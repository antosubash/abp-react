"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[4444],{2205:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"tutorials/creating-crud-pages","title":"Creating CRUD Pages with Authentication","description":"This tutorial demonstrates how to create complete CRUD (Create, Read, Update, Delete) pages with authentication and permission controls using a Product entity as an example.","source":"@site/docs/tutorials/creating-crud-pages.md","sourceDirName":"tutorials","slug":"/tutorials/creating-crud-pages","permalink":"/abp-react/docs/tutorials/creating-crud-pages","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/tutorials/creating-crud-pages.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"CMS Tutorials","permalink":"/abp-react/docs/tutorials/cms-tutorials"},"next":{"title":"Deploy your site","permalink":"/abp-react/docs/tutorials/deploy-your-site"}}');var o=t(4848),i=t(8453);const a={sidebar_position:4},s="Creating CRUD Pages with Authentication",c={},d=[{value:"Overview",id:"overview",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Define Types and Interfaces",id:"step-1-define-types-and-interfaces",level:2},{value:"Create Type Definitions",id:"create-type-definitions",level:3},{value:"Add Permissions",id:"add-permissions",level:3},{value:"Step 2: Create API Hooks",id:"step-2-create-api-hooks",level:2},{value:"API Service Hook",id:"api-service-hook",level:3},{value:"Query Constants",id:"query-constants",level:3},{value:"Step 3: Create CRUD Components",id:"step-3-create-crud-components",level:2},{value:"Product List Component",id:"product-list-component",level:3},{value:"Product Form Component",id:"product-form-component",level:3},{value:"Product Details Component",id:"product-details-component",level:3},{value:"Step 4: Create Pages with Authentication",id:"step-4-create-pages-with-authentication",level:2},{value:"Product List Page",id:"product-list-page",level:3},{value:"Create Product Page",id:"create-product-page",level:3},{value:"Product Details Page",id:"product-details-page",level:3},{value:"Edit Product Page",id:"edit-product-page",level:3},{value:"Step 5: Create Permission Guard Component",id:"step-5-create-permission-guard-component",level:2},{value:"Access Denied Component",id:"access-denied-component",level:3},{value:"Step 6: Add Navigation Menu",id:"step-6-add-navigation-menu",level:2},{value:"Step 7: Error Handling and Loading States",id:"step-7-error-handling-and-loading-states",level:2},{value:"Custom Error Boundary",id:"custom-error-boundary",level:3},{value:"Delete Confirmation Dialog",id:"delete-confirmation-dialog",level:3},{value:"Step 8: Testing and Best Practices",id:"step-8-testing-and-best-practices",level:2},{value:"Testing Permissions",id:"testing-permissions",level:3},{value:"Performance Optimization",id:"performance-optimization",level:3},{value:"Best Practices Summary",id:"best-practices-summary",level:2},{value:"1. Security",id:"1-security",level:3},{value:"2. Performance",id:"2-performance",level:3},{value:"3. User Experience",id:"3-user-experience",level:3},{value:"4. Code Organization",id:"4-code-organization",level:3},{value:"5. Accessibility",id:"5-accessibility",level:3},{value:"Conclusion",id:"conclusion",level:2},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"creating-crud-pages-with-authentication",children:"Creating CRUD Pages with Authentication"})}),"\n",(0,o.jsx)(n.p,{children:"This tutorial demonstrates how to create complete CRUD (Create, Read, Update, Delete) pages with authentication and permission controls using a Product entity as an example."}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(n.p,{children:"We'll build a complete product management system that includes:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Product List Page"}),": Display products with search, pagination, and actions"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Product Create Page"}),": Form to add new products"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Product Edit Page"}),": Form to update existing products"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Product Details Page"}),": View detailed product information"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Permission-based Access"}),": Role-based access control for all operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Authentication Protection"}),": Secure all routes and actions"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,o.jsx)(n.p,{children:"Before starting, ensure you have:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"ABP React project set up and running"}),"\n",(0,o.jsx)(n.li,{children:"ABP backend with Product entity and API endpoints"}),"\n",(0,o.jsx)(n.li,{children:"Understanding of React, TypeScript, and Next.js basics"}),"\n",(0,o.jsx)(n.li,{children:"Familiarity with the project structure"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"step-1-define-types-and-interfaces",children:"Step 1: Define Types and Interfaces"}),"\n",(0,o.jsx)(n.p,{children:"First, let's define the TypeScript interfaces for our Product entity."}),"\n",(0,o.jsx)(n.h3,{id:"create-type-definitions",children:"Create Type Definitions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/types/product.ts\nexport interface ProductDto {\n  id: string\n  name: string\n  description?: string\n  price: number\n  sku: string\n  categoryId?: string\n  category?: CategoryDto\n  isActive: boolean\n  stockQuantity: number\n  imageUrl?: string\n  creationTime: Date\n  lastModificationTime?: Date\n  creatorId?: string\n  lastModifierId?: string\n}\n\nexport interface CreateProductDto {\n  name: string\n  description?: string\n  price: number\n  sku: string\n  categoryId?: string\n  isActive: boolean\n  stockQuantity: number\n  imageUrl?: string\n}\n\nexport interface UpdateProductDto {\n  name: string\n  description?: string\n  price: number\n  sku: string\n  categoryId?: string\n  isActive: boolean\n  stockQuantity: number\n  imageUrl?: string\n}\n\nexport interface ProductListDto {\n  items: ProductDto[]\n  totalCount: number\n}\n\nexport interface CategoryDto {\n  id: string\n  name: string\n  description?: string\n}\n\n// Filter and pagination types\nexport interface GetProductsInput {\n  skipCount?: number\n  maxResultCount?: number\n  sorting?: string\n  keyword?: string\n  categoryId?: string\n  isActive?: boolean\n  minPrice?: number\n  maxPrice?: number\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"add-permissions",children:"Add Permissions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/lib/utils.ts (add to existing Permissions object)\nexport const Permissions = {\n  // ... existing permissions\n  PRODUCTS_VIEW: 'Products.View',\n  PRODUCTS_CREATE: 'Products.Create',\n  PRODUCTS_UPDATE: 'Products.Update',\n  PRODUCTS_DELETE: 'Products.Delete',\n  PRODUCTS_MANAGE: 'Products.Manage',\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-2-create-api-hooks",children:"Step 2: Create API Hooks"}),"\n",(0,o.jsx)(n.p,{children:"Create custom hooks for API operations following the existing patterns."}),"\n",(0,o.jsx)(n.h3,{id:"api-service-hook",children:"API Service Hook"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useProducts.ts\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'\nimport { toast } from 'sonner'\nimport { QueryNames } from './QueryConstants'\nimport type { \n  ProductDto, \n  CreateProductDto, \n  UpdateProductDto, \n  GetProductsInput,\n  ProductListDto \n} from '@/types/product'\n\n// Note: These would be generated API functions from your OpenAPI client\n// For this example, we'll assume they exist in your client\nimport { \n  productGetList,\n  productGet,\n  productCreate,\n  productUpdate,\n  productDelete\n} from '@/client'\n\n// List products with pagination and filtering\nexport const useProducts = (input: GetProductsInput = {}) => {\n  return useQuery({\n    queryKey: [QueryNames.GetProducts, input],\n    queryFn: async () => {\n      const response = await productGetList({ query: input })\n      return response.data as ProductListDto\n    },\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  })\n}\n\n// Get single product\nexport const useProduct = (id: string) => {\n  return useQuery({\n    queryKey: [QueryNames.GetProduct, id],\n    queryFn: async () => {\n      const response = await productGet({ path: { id } })\n      return response.data as ProductDto\n    },\n    enabled: !!id,\n    staleTime: 5 * 60 * 1000,\n  })\n}\n\n// Create product mutation\nexport const useCreateProduct = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (input: CreateProductDto) => {\n      const response = await productCreate({ body: input })\n      return response.data as ProductDto\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [QueryNames.GetProducts] })\n      toast.success(`Product \"${data.name}\" created successfully`)\n    },\n    onError: (error: any) => {\n      toast.error(error?.message || 'Failed to create product')\n    },\n  })\n}\n\n// Update product mutation\nexport const useUpdateProduct = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async ({ id, input }: { id: string; input: UpdateProductDto }) => {\n      const response = await productUpdate({ path: { id }, body: input })\n      return response.data as ProductDto\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [QueryNames.GetProducts] })\n      queryClient.invalidateQueries({ queryKey: [QueryNames.GetProduct, data.id] })\n      toast.success(`Product \"${data.name}\" updated successfully`)\n    },\n    onError: (error: any) => {\n      toast.error(error?.message || 'Failed to update product')\n    },\n  })\n}\n\n// Delete product mutation\nexport const useDeleteProduct = () => {\n  const queryClient = useQueryClient()\n\n  return useMutation({\n    mutationFn: async (id: string) => {\n      await productDelete({ path: { id } })\n      return id\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [QueryNames.GetProducts] })\n      toast.success('Product deleted successfully')\n    },\n    onError: (error: any) => {\n      toast.error(error?.message || 'Failed to delete product')\n    },\n  })\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"query-constants",children:"Query Constants"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/QueryConstants.ts (add to existing)\nexport const QueryNames = {\n  // ... existing constants\n  GetProducts: 'GetProducts',\n  GetProduct: 'GetProduct',\n  GetCategories: 'GetCategories',\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-3-create-crud-components",children:"Step 3: Create CRUD Components"}),"\n",(0,o.jsx)(n.p,{children:"Build the UI components for product management."}),"\n",(0,o.jsx)(n.h3,{id:"product-list-component",children:"Product List Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/product/ProductList.tsx\n'use client'\nimport { useState, useMemo } from 'react'\nimport { useRouter } from 'next/navigation'\nimport { ColumnDef, PaginationState, getCoreRowModel, useReactTable } from '@tanstack/react-table'\nimport { Eye, Pencil, Trash, Plus } from 'lucide-react'\n\nimport { useProducts, useDeleteProduct } from '@/hooks/useProducts'\nimport { useGrantedPolicies } from '@/lib/hooks/useGrantedPolicies'\nimport { Permissions } from '@/lib/utils'\nimport type { ProductDto } from '@/types/product'\n\nimport { CustomTable } from '@/components/ui/CustomTable'\nimport { Search } from '@/components/ui/Search'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport { PermissionActions } from '@/components/permission/PermissionActions'\nimport { DeleteConfirmDialog } from '@/components/ui/DeleteConfirmDialog'\nimport Error from '@/components/ui/Error'\nimport Loader from '@/components/ui/Loader'\n\ntype ProductActionDialogState = {\n  productId: string\n  productName: string\n  dialogType: 'delete'\n} | null\n\nexport const ProductList = () => {\n  const router = useRouter()\n  const { can } = useGrantedPolicies()\n  const deleteProductMutation = useDeleteProduct()\n\n  const [searchStr, setSearchStr] = useState<string>('')\n  const [productActionDialog, setProductActionDialog] = useState<ProductActionDialogState>(null)\n  const [pagination, setPagination] = useState<PaginationState>({\n    pageIndex: 0,\n    pageSize: 10,\n  })\n\n  const { data, isLoading, error } = useProducts({\n    skipCount: pagination.pageIndex * pagination.pageSize,\n    maxResultCount: pagination.pageSize,\n    keyword: searchStr || undefined,\n  })\n\n  const handleActionComplete = () => {\n    setProductActionDialog(null)\n  }\n\n  const handleDelete = async () => {\n    if (productActionDialog?.dialogType === 'delete') {\n      await deleteProductMutation.mutateAsync(productActionDialog.productId)\n      handleActionComplete()\n    }\n  }\n\n  const columns = useMemo(() => getProductColumns({\n    onView: (product) => router.push(`/admin/products/${product.id}`),\n    onEdit: (product) => router.push(`/admin/products/${product.id}/edit`),\n    onDelete: (product) => setProductActionDialog({\n      productId: product.id,\n      productName: product.name,\n      dialogType: 'delete'\n    }),\n    canView: can(Permissions.PRODUCTS_VIEW),\n    canEdit: can(Permissions.PRODUCTS_UPDATE),\n    canDelete: can(Permissions.PRODUCTS_DELETE),\n  }), [can, router])\n\n  const table = useReactTable({\n    data: data?.items ?? [],\n    pageCount: Math.ceil((data?.totalCount ?? 0) / pagination.pageSize),\n    state: { pagination },\n    columns,\n    getCoreRowModel: getCoreRowModel(),\n    onPaginationChange: setPagination,\n    manualPagination: true,\n  })\n\n  if (isLoading) return <Loader />\n  if (error) return <Error />\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Products</h1>\n          <p className=\"text-muted-foreground\">Manage your product catalog</p>\n        </div>\n        {can(Permissions.PRODUCTS_CREATE) && (\n          <Button onClick={() => router.push('/admin/products/create')}>\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Create Product\n          </Button>\n        )}\n      </div>\n\n      {/* Search */}\n      <Search \n        onUpdate={setSearchStr} \n        value={searchStr}\n        placeholder=\"Search products...\"\n      />\n\n      {/* Table */}\n      <CustomTable<ProductDto>\n        table={table}\n        totalCount={data?.totalCount ?? 0}\n        pageSize={pagination.pageSize}\n      />\n\n      {/* Delete Dialog */}\n      {productActionDialog?.dialogType === 'delete' && (\n        <DeleteConfirmDialog\n          isOpen={true}\n          onClose={handleActionComplete}\n          onConfirm={handleDelete}\n          title=\"Delete Product\"\n          description={`Are you sure you want to delete \"${productActionDialog.productName}\"? This action cannot be undone.`}\n          isLoading={deleteProductMutation.isPending}\n        />\n      )}\n    </div>\n  )\n}\n\n// Column definitions\nconst getProductColumns = (actions: {\n  onView: (product: ProductDto) => void\n  onEdit: (product: ProductDto) => void\n  onDelete: (product: ProductDto) => void\n  canView: boolean\n  canEdit: boolean\n  canDelete: boolean\n}): ColumnDef<ProductDto>[] => [\n  {\n    header: 'Product Management',\n    columns: [\n      {\n        accessorKey: 'actions',\n        header: 'Actions',\n        cell: ({ row }) => (\n          <PermissionActions\n            actions={[\n              {\n                icon: 'eye',\n                label: 'View',\n                visible: actions.canView,\n                callback: () => actions.onView(row.original),\n              },\n              {\n                icon: 'pencil',\n                label: 'Edit',\n                visible: actions.canEdit,\n                callback: () => actions.onEdit(row.original),\n              },\n              {\n                icon: 'trash',\n                label: 'Delete',\n                visible: actions.canDelete,\n                callback: () => actions.onDelete(row.original),\n              },\n            ]}\n          />\n        ),\n      },\n      {\n        accessorKey: 'name',\n        header: 'Name',\n        cell: ({ row }) => (\n          <div>\n            <div className=\"font-medium\">{row.original.name}</div>\n            <div className=\"text-sm text-muted-foreground\">{row.original.sku}</div>\n          </div>\n        ),\n      },\n      {\n        accessorKey: 'description',\n        header: 'Description',\n        cell: ({ row }) => (\n          <div className=\"max-w-[200px] truncate\">\n            {row.original.description || '-'}\n          </div>\n        ),\n      },\n      {\n        accessorKey: 'price',\n        header: 'Price',\n        cell: ({ row }) => (\n          <div className=\"font-medium\">\n            ${row.original.price.toFixed(2)}\n          </div>\n        ),\n      },\n      {\n        accessorKey: 'stockQuantity',\n        header: 'Stock',\n        cell: ({ row }) => (\n          <Badge variant={row.original.stockQuantity > 0 ? 'default' : 'destructive'}>\n            {row.original.stockQuantity}\n          </Badge>\n        ),\n      },\n      {\n        accessorKey: 'isActive',\n        header: 'Status',\n        cell: ({ row }) => (\n          <Badge variant={row.original.isActive ? 'default' : 'secondary'}>\n            {row.original.isActive ? 'Active' : 'Inactive'}\n          </Badge>\n        ),\n      },\n      {\n        accessorKey: 'category',\n        header: 'Category',\n        cell: ({ row }) => row.original.category?.name || '-',\n      },\n    ],\n  },\n]\n"})}),"\n",(0,o.jsx)(n.h3,{id:"product-form-component",children:"Product Form Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/product/ProductForm.tsx\n'use client'\nimport { useForm } from 'react-hook-form'\nimport { zodResolver } from '@hookform/resolvers/zod'\nimport { z } from 'zod'\nimport { useRouter } from 'next/navigation'\n\nimport { useCreateProduct, useUpdateProduct } from '@/hooks/useProducts'\nimport type { ProductDto, CreateProductDto, UpdateProductDto } from '@/types/product'\n\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Switch } from '@/components/ui/switch'\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n\nconst productSchema = z.object({\n  name: z.string().min(1, 'Name is required').max(256, 'Name is too long'),\n  description: z.string().optional(),\n  price: z.number().min(0, 'Price must be positive'),\n  sku: z.string().min(1, 'SKU is required').max(64, 'SKU is too long'),\n  categoryId: z.string().optional(),\n  isActive: z.boolean(),\n  stockQuantity: z.number().int().min(0, 'Stock quantity must be non-negative'),\n  imageUrl: z.string().url().optional().or(z.literal('')),\n})\n\ntype ProductFormData = z.infer<typeof productSchema>\n\ninterface ProductFormProps {\n  product?: ProductDto\n  mode: 'create' | 'edit'\n}\n\nexport const ProductForm: React.FC<ProductFormProps> = ({ product, mode }) => {\n  const router = useRouter()\n  const createProductMutation = useCreateProduct()\n  const updateProductMutation = useUpdateProduct()\n\n  const form = useForm<ProductFormData>({\n    resolver: zodResolver(productSchema),\n    defaultValues: {\n      name: product?.name || '',\n      description: product?.description || '',\n      price: product?.price || 0,\n      sku: product?.sku || '',\n      categoryId: product?.categoryId || '',\n      isActive: product?.isActive ?? true,\n      stockQuantity: product?.stockQuantity || 0,\n      imageUrl: product?.imageUrl || '',\n    },\n  })\n\n  const onSubmit = async (data: ProductFormData) => {\n    try {\n      if (mode === 'create') {\n        await createProductMutation.mutateAsync(data as CreateProductDto)\n      } else if (product) {\n        await updateProductMutation.mutateAsync({\n          id: product.id,\n          input: data as UpdateProductDto,\n        })\n      }\n      router.push('/admin/products')\n    } catch (error) {\n      // Error is handled by the mutation\n    }\n  }\n\n  const isLoading = createProductMutation.isPending || updateProductMutation.isPending\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div>\n        <h1 className=\"text-2xl font-bold\">\n          {mode === 'create' ? 'Create Product' : 'Edit Product'}\n        </h1>\n        <p className=\"text-muted-foreground\">\n          {mode === 'create' \n            ? 'Add a new product to your catalog' \n            : 'Update product information'\n          }\n        </p>\n      </div>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n            {/* Main Information */}\n            <div className=\"lg:col-span-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Basic Information</CardTitle>\n                  <CardDescription>\n                    Enter the basic product details\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Enter product name\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea \n                            placeholder=\"Enter product description\"\n                            rows={3}\n                            {...field}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"sku\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SKU</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Product SKU\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price</FormLabel>\n                          <FormControl>\n                            <Input \n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"0.00\"\n                              {...field}\n                              onChange={(e) => field.onChange(parseFloat(e.target.value) || 0)}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <FormField\n                    control={form.control}\n                    name=\"imageUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Image URL</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"https://example.com/image.jpg\" {...field} />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Side Information */}\n            <div>\n              <Card>\n                <CardHeader>\n                  <CardTitle>Additional Details</CardTitle>\n                  <CardDescription>\n                    Configure inventory and status\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"stockQuantity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock Quantity</FormLabel>\n                        <FormControl>\n                          <Input \n                            type=\"number\"\n                            placeholder=\"0\"\n                            {...field}\n                            onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"electronics\">Electronics</SelectItem>\n                            <SelectItem value=\"clothing\">Clothing</SelectItem>\n                            <SelectItem value=\"books\">Books</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>Active Status</FormLabel>\n                          <div className=\"text-sm text-muted-foreground\">\n                            Make this product available for sale\n                          </div>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n\n          {/* Form Actions */}\n          <div className=\"flex items-center gap-4\">\n            <Button \n              type=\"submit\" \n              disabled={isLoading}\n              className=\"min-w-[120px]\"\n            >\n              {isLoading ? 'Saving...' : mode === 'create' ? 'Create Product' : 'Update Product'}\n            </Button>\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={() => router.push('/admin/products')}\n            >\n              Cancel\n            </Button>\n          </div>\n        </form>\n      </Form>\n    </div>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"product-details-component",children:"Product Details Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// src/components/product/ProductDetails.tsx\n\'use client\'\nimport { useRouter } from \'next/navigation\'\nimport { Pencil, ArrowLeft } from \'lucide-react\'\n\nimport { useProduct } from \'@/hooks/useProducts\'\nimport { useGrantedPolicies } from \'@/lib/hooks/useGrantedPolicies\'\nimport { Permissions } from \'@/lib/utils\'\n\nimport { Button } from \'@/components/ui/button\'\nimport { Badge } from \'@/components/ui/badge\'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\'\nimport { Separator } from \'@/components/ui/separator\'\nimport Error from \'@/components/ui/Error\'\nimport Loader from \'@/components/ui/Loader\'\n\ninterface ProductDetailsProps {\n  productId: string\n}\n\nexport const ProductDetails: React.FC<ProductDetailsProps> = ({ productId }) => {\n  const router = useRouter()\n  const { can } = useGrantedPolicies()\n  const { data: product, isLoading, error } = useProduct(productId)\n\n  if (isLoading) return <Loader />\n  if (error) return <Error />\n  if (!product) return <div>Product not found</div>\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\'en-US\', {\n      year: \'numeric\',\n      month: \'long\',\n      day: \'numeric\',\n      hour: \'2-digit\',\n      minute: \'2-digit\'\n    })\n  }\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div className="flex items-center gap-4">\n          <Button \n            variant="outline" \n            size="icon"\n            onClick={() => router.push(\'/admin/products\')}\n          >\n            <ArrowLeft className="w-4 h-4" />\n          </Button>\n          <div>\n            <h1 className="text-2xl font-bold">{product.name}</h1>\n            <p className="text-muted-foreground">Product Details</p>\n          </div>\n        </div>\n        {can(Permissions.PRODUCTS_UPDATE) && (\n          <Button onClick={() => router.push(`/admin/products/${product.id}/edit`)}>\n            <Pencil className="w-4 h-4 mr-2" />\n            Edit Product\n          </Button>\n        )}\n      </div>\n\n      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">\n        {/* Main Information */}\n        <div className="lg:col-span-2 space-y-6">\n          <Card>\n            <CardHeader>\n              <CardTitle>Product Information</CardTitle>\n            </CardHeader>\n            <CardContent className="space-y-4">\n              <div className="grid grid-cols-2 gap-4">\n                <div>\n                  <label className="text-sm font-medium text-muted-foreground">Name</label>\n                  <p className="text-sm">{product.name}</p>\n                </div>\n                <div>\n                  <label className="text-sm font-medium text-muted-foreground">SKU</label>\n                  <p className="text-sm font-mono">{product.sku}</p>\n                </div>\n              </div>\n              \n              <div>\n                <label className="text-sm font-medium text-muted-foreground">Description</label>\n                <p className="text-sm mt-1">{product.description || \'No description provided\'}</p>\n              </div>\n\n              <Separator />\n\n              <div className="grid grid-cols-3 gap-4">\n                <div>\n                  <label className="text-sm font-medium text-muted-foreground">Price</label>\n                  <p className="text-lg font-semibold">${product.price.toFixed(2)}</p>\n                </div>\n                <div>\n                  <label className="text-sm font-medium text-muted-foreground">Stock</label>\n                  <p className="text-lg font-semibold">{product.stockQuantity}</p>\n                </div>\n                <div>\n                  <label className="text-sm font-medium text-muted-foreground">Status</label>\n                  <div className="mt-1">\n                    <Badge variant={product.isActive ? \'default\' : \'secondary\'}>\n                      {product.isActive ? \'Active\' : \'Inactive\'}\n                    </Badge>\n                  </div>\n                </div>\n              </div>\n\n              {product.category && (\n                <>\n                  <Separator />\n                  <div>\n                    <label className="text-sm font-medium text-muted-foreground">Category</label>\n                    <p className="text-sm">{product.category.name}</p>\n                  </div>\n                </>\n              )}\n            </CardContent>\n          </Card>\n\n          {product.imageUrl && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Product Image</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <img \n                  src={product.imageUrl} \n                  alt={product.name}\n                  className="max-w-full h-auto rounded-lg"\n                />\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Metadata */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle>Metadata</CardTitle>\n              <CardDescription>Creation and modification information</CardDescription>\n            </CardHeader>\n            <CardContent className="space-y-4">\n              <div>\n                <label className="text-sm font-medium text-muted-foreground">Created</label>\n                <p className="text-sm">{formatDate(product.creationTime)}</p>\n              </div>\n              \n              {product.lastModificationTime && (\n                <div>\n                  <label className="text-sm font-medium text-muted-foreground">Last Modified</label>\n                  <p className="text-sm">{formatDate(product.lastModificationTime)}</p>\n                </div>\n              )}\n\n              <Separator />\n\n              <div>\n                <label className="text-sm font-medium text-muted-foreground">Product ID</label>\n                <p className="text-xs font-mono break-all">{product.id}</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  )\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-4-create-pages-with-authentication",children:"Step 4: Create Pages with Authentication"}),"\n",(0,o.jsx)(n.p,{children:"Now let's create the actual pages with proper authentication and routing."}),"\n",(0,o.jsx)(n.h3,{id:"product-list-page",children:"Product List Page"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/app/admin/products/page.tsx\nimport { Metadata } from 'next'\nimport { ProductList } from '@/components/product/ProductList'\nimport { PermissionGuard } from '@/components/auth/PermissionGuard'\nimport { Permissions } from '@/lib/utils'\n\nexport const metadata: Metadata = {\n  title: 'Products | Admin',\n  description: 'Manage your product catalog',\n}\n\nexport default function ProductsPage() {\n  return (\n    <PermissionGuard permission={Permissions.PRODUCTS_VIEW}>\n      <div className=\"container mx-auto p-6\">\n        <ProductList />\n      </div>\n    </PermissionGuard>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"create-product-page",children:"Create Product Page"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/app/admin/products/create/page.tsx\nimport { Metadata } from 'next'\nimport { ProductForm } from '@/components/product/ProductForm'\nimport { PermissionGuard } from '@/components/auth/PermissionGuard'\nimport { Permissions } from '@/lib/utils'\n\nexport const metadata: Metadata = {\n  title: 'Create Product | Admin',\n  description: 'Add a new product to your catalog',\n}\n\nexport default function CreateProductPage() {\n  return (\n    <PermissionGuard permission={Permissions.PRODUCTS_CREATE}>\n      <div className=\"container mx-auto p-6\">\n        <ProductForm mode=\"create\" />\n      </div>\n    </PermissionGuard>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"product-details-page",children:"Product Details Page"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/app/admin/products/[id]/page.tsx\nimport { Metadata } from 'next'\nimport { ProductDetails } from '@/components/product/ProductDetails'\nimport { PermissionGuard } from '@/components/auth/PermissionGuard'\nimport { Permissions } from '@/lib/utils'\n\ninterface ProductDetailPageProps {\n  params: {\n    id: string\n  }\n}\n\nexport const metadata: Metadata = {\n  title: 'Product Details | Admin',\n  description: 'View product information',\n}\n\nexport default function ProductDetailPage({ params }: ProductDetailPageProps) {\n  return (\n    <PermissionGuard permission={Permissions.PRODUCTS_VIEW}>\n      <div className=\"container mx-auto p-6\">\n        <ProductDetails productId={params.id} />\n      </div>\n    </PermissionGuard>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"edit-product-page",children:"Edit Product Page"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/app/admin/products/[id]/edit/page.tsx\n'use client'\nimport { ProductForm } from '@/components/product/ProductForm'\nimport { PermissionGuard } from '@/components/auth/PermissionGuard'\nimport { useProduct } from '@/hooks/useProducts'\nimport { Permissions } from '@/lib/utils'\nimport Error from '@/components/ui/Error'\nimport Loader from '@/components/ui/Loader'\n\ninterface EditProductPageProps {\n  params: {\n    id: string\n  }\n}\n\nexport default function EditProductPage({ params }: EditProductPageProps) {\n  const { data: product, isLoading, error } = useProduct(params.id)\n\n  if (isLoading) return <Loader />\n  if (error) return <Error />\n  if (!product) return <div>Product not found</div>\n\n  return (\n    <PermissionGuard permission={Permissions.PRODUCTS_UPDATE}>\n      <div className=\"container mx-auto p-6\">\n        <ProductForm mode=\"edit\" product={product} />\n      </div>\n    </PermissionGuard>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-5-create-permission-guard-component",children:"Step 5: Create Permission Guard Component"}),"\n",(0,o.jsx)(n.p,{children:"Create a reusable permission guard component for protecting pages and components."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/auth/PermissionGuard.tsx\n'use client'\nimport { useGrantedPolicies } from '@/lib/hooks/useGrantedPolicies'\nimport { AccessDenied } from './AccessDenied'\nimport Loader from '@/components/ui/Loader'\n\ninterface PermissionGuardProps {\n  permission: string\n  children: React.ReactNode\n  fallback?: React.ReactNode\n}\n\nexport const PermissionGuard: React.FC<PermissionGuardProps> = ({ \n  permission, \n  children, \n  fallback \n}) => {\n  const { can, isLoading } = useGrantedPolicies()\n\n  if (isLoading) {\n    return <Loader />\n  }\n\n  if (!can(permission)) {\n    return fallback || <AccessDenied />\n  }\n\n  return <>{children}</>\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"access-denied-component",children:"Access Denied Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// src/components/auth/AccessDenied.tsx\nimport { ShieldX } from \'lucide-react\'\nimport { Button } from \'@/components/ui/button\'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\'\n\nexport const AccessDenied = () => {\n  return (\n    <div className="flex items-center justify-center min-h-[400px]">\n      <Card className="w-full max-w-md">\n        <CardHeader className="text-center">\n          <div className="mx-auto mb-4 w-12 h-12 rounded-full bg-red-100 flex items-center justify-center">\n            <ShieldX className="w-6 h-6 text-red-600" />\n          </div>\n          <CardTitle>Access Denied</CardTitle>\n          <CardDescription>\n            You don\'t have permission to access this resource.\n          </CardDescription>\n        </CardHeader>\n        <CardContent className="text-center">\n          <Button \n            variant="outline" \n            onClick={() => window.history.back()}\n          >\n            Go Back\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"step-6-add-navigation-menu",children:"Step 6: Add Navigation Menu"}),"\n",(0,o.jsx)(n.p,{children:"Update the admin menu to include the new product management section."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/config.ts (update AdminMenus)\nimport { Package } from 'lucide-react'\n\nexport const AdminMenus: Array<{ \n  name: string; \n  link: string; \n  icon: React.ComponentType; \n  submenus?: Array<{ name: string; link: string; icon: React.ComponentType; }>;\n}> = [\n  // ... existing menus\n  {\n    name: 'Products',\n    link: '/admin/products',\n    icon: Package,\n  },\n  // ... rest of menus\n]\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-7-error-handling-and-loading-states",children:"Step 7: Error Handling and Loading States"}),"\n",(0,o.jsx)(n.h3,{id:"custom-error-boundary",children:"Custom Error Boundary"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/ui/ErrorBoundary.tsx\n'use client'\nimport { Component, ErrorInfo, ReactNode } from 'react'\nimport { AlertTriangle } from 'lucide-react'\nimport { Button } from './button'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from './card'\n\ninterface Props {\n  children: ReactNode\n}\n\ninterface State {\n  hasError: boolean\n  error?: Error\n}\n\nexport class ErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  }\n\n  public static getDerivedStateFromError(error: Error): State {\n    return { hasError: true, error }\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('Error caught by boundary:', error, errorInfo)\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return (\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto mb-4 w-12 h-12 rounded-full bg-red-100 flex items-center justify-center\">\n                <AlertTriangle className=\"w-6 h-6 text-red-600\" />\n              </div>\n              <CardTitle>Something went wrong</CardTitle>\n              <CardDescription>\n                An unexpected error occurred. Please try again.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"text-center\">\n              <Button \n                onClick={() => this.setState({ hasError: false, error: undefined })}\n              >\n                Try Again\n              </Button>\n            </CardContent>\n          </Card>\n        </div>\n      )\n    }\n\n    return this.props.children\n  }\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"delete-confirmation-dialog",children:"Delete Confirmation Dialog"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/ui/DeleteConfirmDialog.tsx\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\"\n\ninterface DeleteConfirmDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  onConfirm: () => void\n  title: string\n  description: string\n  isLoading?: boolean\n}\n\nexport const DeleteConfirmDialog: React.FC<DeleteConfirmDialogProps> = ({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  description,\n  isLoading = false,\n}) => {\n  return (\n    <AlertDialog open={isOpen} onOpenChange={onClose}>\n      <AlertDialogContent>\n        <AlertDialogHeader>\n          <AlertDialogTitle>{title}</AlertDialogTitle>\n          <AlertDialogDescription>{description}</AlertDialogDescription>\n        </AlertDialogHeader>\n        <AlertDialogFooter>\n          <AlertDialogCancel disabled={isLoading}>Cancel</AlertDialogCancel>\n          <AlertDialogAction \n            onClick={onConfirm}\n            disabled={isLoading}\n            className=\"bg-red-600 hover:bg-red-700\"\n          >\n            {isLoading ? 'Deleting...' : 'Delete'}\n          </AlertDialogAction>\n        </AlertDialogFooter>\n      </AlertDialogContent>\n    </AlertDialog>\n  )\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"step-8-testing-and-best-practices",children:"Step 8: Testing and Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"testing-permissions",children:"Testing Permissions"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/product/__tests__/ProductList.test.tsx\nimport { render, screen, waitFor } from '@testing-library/react'\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query'\nimport { ProductList } from '../ProductList'\n\n// Mock the permission hook\njest.mock('@/lib/hooks/useGrantedPolicies', () => ({\n  useGrantedPolicies: () => ({\n    can: jest.fn().mockReturnValue(true),\n    isLoading: false,\n  }),\n}))\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n    },\n  })\n\n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  )\n}\n\ndescribe('ProductList', () => {\n  it('renders product list with proper permissions', async () => {\n    render(<ProductList />, { wrapper: createWrapper() })\n    \n    await waitFor(() => {\n      expect(screen.getByText('Products')).toBeInTheDocument()\n      expect(screen.getByText('Create Product')).toBeInTheDocument()\n    })\n  })\n\n  it('hides create button when user lacks permission', async () => {\n    // Mock permission to return false\n    jest.mocked(useGrantedPolicies).mockReturnValue({\n      can: jest.fn().mockReturnValue(false),\n      isLoading: false,\n    })\n\n    render(<ProductList />, { wrapper: createWrapper() })\n    \n    await waitFor(() => {\n      expect(screen.getByText('Products')).toBeInTheDocument()\n      expect(screen.queryByText('Create Product')).not.toBeInTheDocument()\n    })\n  })\n})\n"})}),"\n",(0,o.jsx)(n.h3,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/product/ProductList.tsx (optimization example)\nimport { memo, useMemo, useCallback } from 'react'\n\n// Memoize column definitions\nconst getProductColumns = memo((actions: ActionHandlers) => {\n  // ... column definitions\n})\n\n// Memoize action handlers\nexport const ProductList = () => {\n  const handleView = useCallback((product: ProductDto) => {\n    router.push(`/admin/products/${product.id}`)\n  }, [router])\n\n  const handleEdit = useCallback((product: ProductDto) => {\n    router.push(`/admin/products/${product.id}/edit`)\n  }, [router])\n\n  const handleDelete = useCallback((product: ProductDto) => {\n    setProductActionDialog({\n      productId: product.id,\n      productName: product.name,\n      dialogType: 'delete'\n    })\n  }, [])\n\n  // ... rest of component\n}\n"})}),"\n",(0,o.jsx)(n.h2,{id:"best-practices-summary",children:"Best Practices Summary"}),"\n",(0,o.jsx)(n.h3,{id:"1-security",children:"1. Security"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Always use ",(0,o.jsx)(n.code,{children:"PermissionGuard"})," for page-level protection"]}),"\n",(0,o.jsx)(n.li,{children:"Check permissions in components for conditional rendering"}),"\n",(0,o.jsx)(n.li,{children:"Validate data on both client and server sides"}),"\n",(0,o.jsx)(n.li,{children:"Use proper error boundaries"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"2-performance",children:"2. Performance"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Implement proper caching with React Query"}),"\n",(0,o.jsx)(n.li,{children:"Use memoization for expensive calculations"}),"\n",(0,o.jsx)(n.li,{children:"Implement pagination for large datasets"}),"\n",(0,o.jsxs)(n.li,{children:["Optimize re-renders with ",(0,o.jsx)(n.code,{children:"useCallback"})," and ",(0,o.jsx)(n.code,{children:"useMemo"})]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"3-user-experience",children:"3. User Experience"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Provide loading states for all async operations"}),"\n",(0,o.jsx)(n.li,{children:"Show clear error messages and recovery options"}),"\n",(0,o.jsx)(n.li,{children:"Implement optimistic updates where appropriate"}),"\n",(0,o.jsx)(n.li,{children:"Use toast notifications for user feedback"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"4-code-organization",children:"4. Code Organization"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Follow consistent naming conventions"}),"\n",(0,o.jsx)(n.li,{children:"Separate concerns (hooks, components, types)"}),"\n",(0,o.jsx)(n.li,{children:"Use TypeScript for type safety"}),"\n",(0,o.jsx)(n.li,{children:"Write comprehensive tests"}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"5-accessibility",children:"5. Accessibility"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Use semantic HTML elements"}),"\n",(0,o.jsx)(n.li,{children:"Provide proper ARIA labels"}),"\n",(0,o.jsx)(n.li,{children:"Ensure keyboard navigation works"}),"\n",(0,o.jsx)(n.li,{children:"Test with screen readers"}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:"This tutorial demonstrated how to create a complete CRUD interface with authentication and permissions. The patterns shown here can be applied to any entity in your ABP React application:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Define TypeScript interfaces"})," for your entity"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Create API hooks"})," for data operations"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Build reusable components"})," following established patterns"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Implement pages"})," with proper routing and guards"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Add permission controls"})," at multiple levels"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Test thoroughly"})," and optimize for performance"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"By following these patterns, you can quickly scaffold new features while maintaining consistency, security, and performance across your application."}),"\n",(0,o.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/fundamentals/permissions",children:"Permission Management"})})," - Deep dive into ABP's permission system"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/components/forms",children:"Form Validation"})})," - Advanced form handling techniques"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/testing",children:"Testing Guide"})})," - Comprehensive testing strategies"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/performance",children:"Performance Optimization"})})," - Advanced optimization techniques"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>s});var r=t(6540);const o={},i=r.createContext(o);function a(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);