"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[4225],{1216:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"fundamentals/api-integration","title":"API Integration","description":"Learn how to integrate your ABP React frontend with the ABP Framework backend API. This guide covers client generation, authentication, error handling, and best practices for API communication.","source":"@site/docs/fundamentals/api-integration.md","sourceDirName":"fundamentals","slug":"/fundamentals/api-integration","permalink":"/abp-react/docs/fundamentals/api-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/fundamentals/api-integration.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Session Management","permalink":"/abp-react/docs/fundamentals/session-management"},"next":{"title":"Multi-tenancy","permalink":"/abp-react/docs/fundamentals/multi-tenancy"}}');var s=r(4848),i=r(8453);const a={sidebar_position:4},o="API Integration",c={},l=[{value:"Overview",id:"overview",level:2},{value:"API Client Generation",id:"api-client-generation",level:2},{value:"Automatic Generation",id:"automatic-generation",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Generate Client",id:"generate-client",level:3},{value:"Client Structure",id:"client-structure",level:2},{value:"Authentication Integration",id:"authentication-integration",level:2},{value:"JWT Token Management",id:"jwt-token-management",level:3},{value:"Session Management",id:"session-management",level:3},{value:"Making API Calls",id:"making-api-calls",level:2},{value:"Using Generated Services",id:"using-generated-services",level:3},{value:"Custom Hooks for API Operations",id:"custom-hooks-for-api-operations",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Global Error Handler",id:"global-error-handler",level:3},{value:"React Query Error Handling",id:"react-query-error-handling",level:3},{value:"Multi-tenancy Support",id:"multi-tenancy-support",level:2},{value:"Tenant Header Management",id:"tenant-header-management",level:3},{value:"Tenant-specific API Calls",id:"tenant-specific-api-calls",level:3},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Request Deduplication",id:"request-deduplication",level:3},{value:"Caching Strategy",id:"caching-strategy",level:3},{value:"Background Updates",id:"background-updates",level:3},{value:"Testing API Integration",id:"testing-api-integration",level:2},{value:"Mocking API Calls",id:"mocking-api-calls",level:3},{value:"Testing Custom Hooks",id:"testing-custom-hooks",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Type Safety",id:"1-type-safety",level:3},{value:"2. Error Boundaries",id:"2-error-boundaries",level:3},{value:"3. Loading States",id:"3-loading-states",level:3},{value:"4. Optimistic Updates",id:"4-optimistic-updates",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"api-integration",children:"API Integration"})}),"\n",(0,s.jsx)(n.p,{children:"Learn how to integrate your ABP React frontend with the ABP Framework backend API. This guide covers client generation, authentication, error handling, and best practices for API communication."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"ABP React uses a type-safe, auto-generated API client that provides seamless integration with your ABP backend. The client is generated from your backend's OpenAPI specification, ensuring type safety and consistency."}),"\n",(0,s.jsx)(n.h2,{id:"api-client-generation",children:"API Client Generation"}),"\n",(0,s.jsx)(n.h3,{id:"automatic-generation",children:"Automatic Generation"}),"\n",(0,s.jsxs)(n.p,{children:["The project uses ",(0,s.jsx)(n.code,{children:"@hey-api/openapi-ts"})," to automatically generate TypeScript clients from your ABP backend's OpenAPI specification."]}),"\n",(0,s.jsx)(n.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(n.p,{children:["The API client generation is configured in ",(0,s.jsx)(n.code,{children:"openapi-ts.config.ts"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"import { defineConfig } from '@hey-api/openapi-ts';\n\nexport default defineConfig({\n  client: '@hey-api/client-axios',\n  input: 'https://your-api-url.com/swagger/v1/swagger.json',\n  output: './src/client',\n  types: {\n    enums: 'javascript',\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"generate-client",children:"Generate Client"}),"\n",(0,s.jsx)(n.p,{children:"To generate or update the API client:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"pnpm generate-client\n"})}),"\n",(0,s.jsx)(n.p,{children:"This command:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Fetches the OpenAPI specification from your backend"}),"\n",(0,s.jsx)(n.li,{children:"Generates TypeScript interfaces and client methods"}),"\n",(0,s.jsx)(n.li,{children:"Creates type-safe API service functions"}),"\n",(0,s.jsxs)(n.li,{children:["Updates the client in the ",(0,s.jsx)(n.code,{children:"src/client"})," directory"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"client-structure",children:"Client Structure"}),"\n",(0,s.jsx)(n.p,{children:"The generated client includes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"src/client/\n\u251c\u2500\u2500 index.ts              # Main client exports\n\u251c\u2500\u2500 types.gen.ts          # Generated TypeScript types\n\u251c\u2500\u2500 services.gen.ts       # Generated service methods\n\u2514\u2500\u2500 core/                 # Core client functionality\n    \u251c\u2500\u2500 ApiError.ts       # Error handling\n    \u251c\u2500\u2500 ApiResult.ts      # Response types\n    \u251c\u2500\u2500 BaseHttpRequest.ts # Base HTTP client\n    \u2514\u2500\u2500 request.ts        # Request utilities\n"})}),"\n",(0,s.jsx)(n.h2,{id:"authentication-integration",children:"Authentication Integration"}),"\n",(0,s.jsx)(n.h3,{id:"jwt-token-management",children:"JWT Token Management"}),"\n",(0,s.jsx)(n.p,{children:"ABP React automatically handles JWT token authentication:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/lib/api-client.ts\nimport { ApiClient } from '@/client';\nimport { getSession } from 'next-auth/react';\n\nconst apiClient = new ApiClient({\n  BASE: process.env.NEXT_PUBLIC_API_URL,\n  WITH_CREDENTIALS: true,\n  CREDENTIALS: 'include',\n});\n\n// Automatic token injection\napiClient.request.config.interceptors.request.use(async (config) => {\n  const session = await getSession();\n  if (session?.accessToken) {\n    config.headers.Authorization = `Bearer ${session.accessToken}`;\n  }\n  return config;\n});\n\nexport { apiClient };\n"})}),"\n",(0,s.jsx)(n.h3,{id:"session-management",children:"Session Management"}),"\n",(0,s.jsx)(n.p,{children:"Integration with NextAuth.js for session handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/sessionOptions.ts\nimport { NextAuthOptions } from 'next-auth';\nimport { JWT } from 'next-auth/jwt';\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    CredentialsProvider({\n      name: 'credentials',\n      credentials: {\n        username: { label: 'Username', type: 'text' },\n        password: { label: 'Password', type: 'password' },\n      },\n      async authorize(credentials) {\n        // ABP authentication logic\n        const response = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/account/login`, {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(credentials),\n        });\n\n        if (response.ok) {\n          return await response.json();\n        }\n        return null;\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.accessToken = user.accessToken;\n        token.refreshToken = user.refreshToken;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      session.accessToken = token.accessToken;\n      return session;\n    },\n  },\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"making-api-calls",children:"Making API Calls"}),"\n",(0,s.jsx)(n.h3,{id:"using-generated-services",children:"Using Generated Services"}),"\n",(0,s.jsx)(n.p,{children:"The generated client provides type-safe service methods:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Example: User management\nimport { UserService } from '@/client';\n\n// Get users with pagination\nconst getUsersPage = async (page: number, pageSize: number) => {\n  const response = await UserService.getUserList({\n    skipCount: (page - 1) * pageSize,\n    maxResultCount: pageSize,\n  });\n  return response;\n};\n\n// Create a new user\nconst createUser = async (userData: CreateUserDto) => {\n  const response = await UserService.createUser({\n    requestBody: userData,\n  });\n  return response;\n};\n\n// Update user\nconst updateUser = async (id: string, userData: UpdateUserDto) => {\n  const response = await UserService.updateUser({\n    id,\n    requestBody: userData,\n  });\n  return response;\n};\n\n// Delete user\nconst deleteUser = async (id: string) => {\n  await UserService.deleteUser({ id });\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"custom-hooks-for-api-operations",children:"Custom Hooks for API Operations"}),"\n",(0,s.jsx)(n.p,{children:"Create custom hooks for common API operations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useUsers.ts\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { UserService } from '@/client';\nimport type { CreateUserDto, UpdateUserDto } from '@/client/types.gen';\n\nexport const useUsers = (page: number, pageSize: number) => {\n  return useQuery({\n    queryKey: ['users', page, pageSize],\n    queryFn: () => UserService.getUserList({\n      skipCount: (page - 1) * pageSize,\n      maxResultCount: pageSize,\n    }),\n  });\n};\n\nexport const useUser = (id: string) => {\n  return useQuery({\n    queryKey: ['user', id],\n    queryFn: () => UserService.getUser({ id }),\n    enabled: !!id,\n  });\n};\n\nexport const useCreateUser = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (userData: CreateUserDto) => \n      UserService.createUser({ requestBody: userData }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n\nexport const useUpdateUser = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, userData }: { id: string; userData: UpdateUserDto }) =>\n      UserService.updateUser({ id, requestBody: userData }),\n    onSuccess: (_, { id }) => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      queryClient.invalidateQueries({ queryKey: ['user', id] });\n    },\n  });\n};\n\nexport const useDeleteUser = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: (id: string) => UserService.deleteUser({ id }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,s.jsx)(n.h3,{id:"global-error-handler",children:"Global Error Handler"}),"\n",(0,s.jsx)(n.p,{children:"Implement global error handling for API calls:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/lib/error-handler.ts\nimport { ApiError } from '@/client';\nimport { toast } from 'sonner';\n\nexport const handleApiError = (error: unknown) => {\n  if (error instanceof ApiError) {\n    // ABP validation errors\n    if (error.status === 400 && error.body?.error?.validationErrors) {\n      const validationErrors = error.body.error.validationErrors;\n      Object.entries(validationErrors).forEach(([field, messages]) => {\n        toast.error(`${field}: ${messages.join(', ')}`);\n      });\n      return;\n    }\n    \n    // ABP business logic errors\n    if (error.body?.error?.message) {\n      toast.error(error.body.error.message);\n      return;\n    }\n    \n    // HTTP status errors\n    switch (error.status) {\n      case 401:\n        toast.error('Please log in to continue');\n        // Redirect to login\n        break;\n      case 403:\n        toast.error('You do not have permission to perform this action');\n        break;\n      case 404:\n        toast.error('Resource not found');\n        break;\n      case 500:\n        toast.error('An internal server error occurred');\n        break;\n      default:\n        toast.error('An unexpected error occurred');\n    }\n  } else {\n    // Network or other errors\n    toast.error('Unable to connect to the server');\n  }\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"react-query-error-handling",children:"React Query Error Handling"}),"\n",(0,s.jsx)(n.p,{children:"Integrate error handling with React Query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/lib/query-client.ts\nimport { QueryClient } from '@tanstack/react-query';\nimport { handleApiError } from './error-handler';\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      retry: (failureCount, error) => {\n        // Don't retry on authentication errors\n        if (error instanceof ApiError && error.status === 401) {\n          return false;\n        }\n        return failureCount < 3;\n      },\n      onError: handleApiError,\n    },\n    mutations: {\n      onError: handleApiError,\n    },\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"multi-tenancy-support",children:"Multi-tenancy Support"}),"\n",(0,s.jsx)(n.h3,{id:"tenant-header-management",children:"Tenant Header Management"}),"\n",(0,s.jsx)(n.p,{children:"Handle multi-tenant scenarios:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/lib/tenant-client.ts\nimport { apiClient } from './api-client';\nimport { useTenant } from '@/hooks/useTenant';\n\n// Tenant header interceptor\napiClient.request.config.interceptors.request.use((config) => {\n  const { currentTenant } = useTenant();\n  \n  if (currentTenant) {\n    config.headers['__tenant'] = currentTenant.id;\n  }\n  \n  return config;\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"tenant-specific-api-calls",children:"Tenant-specific API Calls"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useTenantUsers.ts\nimport { useQuery } from '@tanstack/react-query';\nimport { UserService } from '@/client';\nimport { useTenant } from './useTenant';\n\nexport const useTenantUsers = (page: number, pageSize: number) => {\n  const { currentTenant } = useTenant();\n  \n  return useQuery({\n    queryKey: ['users', currentTenant?.id, page, pageSize],\n    queryFn: () => UserService.getUserList({\n      skipCount: (page - 1) * pageSize,\n      maxResultCount: pageSize,\n    }),\n    enabled: !!currentTenant,\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,s.jsx)(n.h3,{id:"request-deduplication",children:"Request Deduplication"}),"\n",(0,s.jsx)(n.p,{children:"React Query automatically deduplicates requests:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Multiple components calling the same API will share the result\nconst UserProfile = ({ userId }: { userId: string }) => {\n  const { data: user } = useUser(userId); // Shared across components\n  return <div>{user?.name}</div>;\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"caching-strategy",children:"Caching Strategy"}),"\n",(0,s.jsx)(n.p,{children:"Configure caching for different data types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/useUsers.ts\nexport const useUsers = (page: number, pageSize: number) => {\n  return useQuery({\n    queryKey: ['users', page, pageSize],\n    queryFn: () => UserService.getUserList({\n      skipCount: (page - 1) * pageSize,\n      maxResultCount: pageSize,\n    }),\n    staleTime: 5 * 60 * 1000, // 5 minutes\n    cacheTime: 10 * 60 * 1000, // 10 minutes\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"background-updates",children:"Background Updates"}),"\n",(0,s.jsx)(n.p,{children:"Keep data fresh with background updates:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const useUserProfile = (userId: string) => {\n  return useQuery({\n    queryKey: ['user', userId],\n    queryFn: () => UserService.getUser({ id: userId }),\n    refetchOnWindowFocus: true,\n    refetchInterval: 5 * 60 * 1000, // Refresh every 5 minutes\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"testing-api-integration",children:"Testing API Integration"}),"\n",(0,s.jsx)(n.h3,{id:"mocking-api-calls",children:"Mocking API Calls"}),"\n",(0,s.jsx)(n.p,{children:"Use Mock Service Worker (MSW) for testing:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/mocks/handlers.ts\nimport { rest } from 'msw';\n\nexport const handlers = [\n  rest.get('/api/users', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        items: [\n          { id: '1', name: 'John Doe', email: 'john@example.com' },\n          { id: '2', name: 'Jane Smith', email: 'jane@example.com' },\n        ],\n        totalCount: 2,\n      })\n    );\n  }),\n  \n  rest.post('/api/users', (req, res, ctx) => {\n    return res(\n      ctx.json({\n        id: '3',\n        name: 'New User',\n        email: 'new@example.com',\n      })\n    );\n  }),\n];\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-custom-hooks",children:"Testing Custom Hooks"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/hooks/__tests__/useUsers.test.ts\nimport { renderHook, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { useUsers } from '../useUsers';\n\nconst createWrapper = () => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n    },\n  });\n  \n  return ({ children }: { children: React.ReactNode }) => (\n    <QueryClientProvider client={queryClient}>\n      {children}\n    </QueryClientProvider>\n  );\n};\n\ndescribe('useUsers', () => {\n  it('should fetch users successfully', async () => {\n    const { result } = renderHook(() => useUsers(1, 10), {\n      wrapper: createWrapper(),\n    });\n\n    await waitFor(() => {\n      expect(result.current.isSuccess).toBe(true);\n    });\n\n    expect(result.current.data?.items).toHaveLength(2);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-type-safety",children:"1. Type Safety"}),"\n",(0,s.jsx)(n.p,{children:"Always use the generated types for API calls:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Good: Using generated types\nconst createUser = async (userData: CreateUserDto) => {\n  return UserService.createUser({ requestBody: userData });\n};\n\n// Bad: Using any type\nconst createUser = async (userData: any) => {\n  return UserService.createUser({ requestBody: userData });\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-error-boundaries",children:"2. Error Boundaries"}),"\n",(0,s.jsx)(n.p,{children:"Implement error boundaries for API error handling:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/components/ErrorBoundary.tsx\nimport { Component, ErrorInfo, ReactNode } from 'react';\n\ninterface Props {\n  children: ReactNode;\n}\n\ninterface State {\n  hasError: boolean;\n}\n\nexport class ApiErrorBoundary extends Component<Props, State> {\n  public state: State = {\n    hasError: false,\n  };\n\n  public static getDerivedStateFromError(_: Error): State {\n    return { hasError: true };\n  }\n\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\n    console.error('API Error:', error, errorInfo);\n  }\n\n  public render() {\n    if (this.state.hasError) {\n      return <div>Something went wrong with the API call.</div>;\n    }\n\n    return this.props.children;\n  }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-loading-states",children:"3. Loading States"}),"\n",(0,s.jsx)(n.p,{children:"Always handle loading states in your UI:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"const UserList = () => {\n  const { data, isLoading, error } = useUsers(1, 10);\n\n  if (isLoading) return <div>Loading...</div>;\n  if (error) return <div>Error loading users</div>;\n\n  return (\n    <div>\n      {data?.items.map(user => (\n        <div key={user.id}>{user.name}</div>\n      ))}\n    </div>\n  );\n};\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-optimistic-updates",children:"4. Optimistic Updates"}),"\n",(0,s.jsx)(n.p,{children:"Implement optimistic updates for better UX:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"export const useUpdateUser = () => {\n  const queryClient = useQueryClient();\n  \n  return useMutation({\n    mutationFn: ({ id, userData }: { id: string; userData: UpdateUserDto }) =>\n      UserService.updateUser({ id, requestBody: userData }),\n    onMutate: async ({ id, userData }) => {\n      // Cancel outgoing refetches\n      await queryClient.cancelQueries({ queryKey: ['user', id] });\n      \n      // Snapshot previous value\n      const previousUser = queryClient.getQueryData(['user', id]);\n      \n      // Optimistically update\n      queryClient.setQueryData(['user', id], (old: any) => ({\n        ...old,\n        ...userData,\n      }));\n      \n      return { previousUser };\n    },\n    onError: (err, { id }, context) => {\n      // Rollback on error\n      queryClient.setQueryData(['user', id], context?.previousUser);\n    },\n    onSettled: (_, __, { id }) => {\n      // Always refetch after error or success\n      queryClient.invalidateQueries({ queryKey: ['user', id] });\n    },\n  });\n};\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"CORS Errors"}),": Ensure your ABP backend is configured to allow requests from your frontend domain"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Authentication Failures"}),": Check that JWT tokens are being properly included in requests"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Type Mismatches"}),": Regenerate the client after backend changes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Network Timeouts"}),": Configure appropriate timeout values for your API calls"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,s.jsx)(n.p,{children:"Enable debug mode for detailed API logging:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/lib/api-client.ts\nif (process.env.NODE_ENV === 'development') {\n  apiClient.request.config.interceptors.request.use((config) => {\n    console.log('API Request:', config);\n    return config;\n  });\n  \n  apiClient.request.config.interceptors.response.use(\n    (response) => {\n      console.log('API Response:', response);\n      return response;\n    },\n    (error) => {\n      console.error('API Error:', error);\n      return Promise.reject(error);\n    }\n  );\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/fundamentals/authentication",children:"Authentication"})})," - Set up authentication with ABP"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/fundamentals/multi-tenancy",children:"Multi-tenancy"})})," - Configure multi-tenant support"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/development/custom-hooks",children:"Custom Hooks"})})," - Create reusable API hooks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/development/testing",children:"Testing"})})," - Test your API integration"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Proper API integration is crucial for a successful ABP React application. Follow these patterns and best practices to ensure reliable, performant, and maintainable API communication."})]})}function d(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);