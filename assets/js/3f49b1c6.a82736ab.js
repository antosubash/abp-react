"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[3825],{1238:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"components/custom-components","title":"Custom Components","description":"Custom components are the building blocks of your ABP React application. This guide covers how to create, use, and maintain custom components that integrate seamlessly with the ABP Framework.","source":"@site/docs/components/custom-components.md","sourceDirName":"components","slug":"/components/custom-components","permalink":"/abp-react/docs/components/custom-components","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/components/custom-components.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"UI Components","permalink":"/abp-react/docs/components/ui-components"},"next":{"title":"Form Components","permalink":"/abp-react/docs/components/forms"}}');var o=t(4848),s=t(8453);const a={sidebar_position:2},i="Custom Components",c={},l=[{value:"\ud83c\udfaf Component Architecture",id:"-component-architecture",level:2},{value:"Component Types",id:"component-types",level:3},{value:"Component Structure",id:"component-structure",level:3},{value:"\ud83c\udfd7\ufe0f Creating Custom Components",id:"\ufe0f-creating-custom-components",level:2},{value:"1. Component Template",id:"1-component-template",level:3},{value:"2. Component with ABP Integration",id:"2-component-with-abp-integration",level:3},{value:"\ud83c\udfa8 Styling Components",id:"-styling-components",level:2},{value:"1. Tailwind CSS Classes",id:"1-tailwind-css-classes",level:3},{value:"2. CSS Modules",id:"2-css-modules",level:3},{value:"3. Styled Components",id:"3-styled-components",level:3},{value:"\ud83d\udd27 Component Composition",id:"-component-composition",level:2},{value:"1. Compound Components",id:"1-compound-components",level:3},{value:"2. Render Props Pattern",id:"2-render-props-pattern",level:3},{value:"\ud83d\udd04 State Management in Components",id:"-state-management-in-components",level:2},{value:"1. Local State",id:"1-local-state",level:3},{value:"2. Context State",id:"2-context-state",level:3},{value:"\ud83d\udcdd Form Components",id:"-form-components",level:2},{value:"1. Controlled Form Component",id:"1-controlled-form-component",level:3},{value:"\ud83e\uddea Testing Custom Components",id:"-testing-custom-components",level:2},{value:"1. Component Testing",id:"1-component-testing",level:3},{value:"2. Integration Testing",id:"2-integration-testing",level:3},{value:"\ud83d\udcda Best Practices",id:"-best-practices",level:2},{value:"1. Component Organization",id:"1-component-organization",level:3},{value:"2. Props Interface",id:"2-props-interface",level:3},{value:"3. Error Boundaries",id:"3-error-boundaries",level:3},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"custom-components",children:"Custom Components"})}),"\n",(0,o.jsx)(n.p,{children:"Custom components are the building blocks of your ABP React application. This guide covers how to create, use, and maintain custom components that integrate seamlessly with the ABP Framework."}),"\n",(0,o.jsx)(n.h2,{id:"-component-architecture",children:"\ud83c\udfaf Component Architecture"}),"\n",(0,o.jsx)(n.h3,{id:"component-types",children:"Component Types"}),"\n",(0,o.jsx)(n.p,{children:"ABP React supports several types of components:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"UI Components"}),": Reusable interface elements"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Container Components"}),": Business logic and data management"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Layout Components"}),": Page structure and navigation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Form Components"}),": Data input and validation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Admin Components"}),": ABP-specific functionality"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"component-structure",children:"Component Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Basic component structure\nimport React from 'react';\nimport { cn } from '@/lib/utils';\n\ninterface ComponentProps {\n  // Props interface\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport const CustomComponent: React.FC<ComponentProps> = ({\n  className,\n  children,\n  ...props\n}) => {\n  return (\n    <div className={cn('base-styles', className)} {...props}>\n      {children}\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-creating-custom-components",children:"\ud83c\udfd7\ufe0f Creating Custom Components"}),"\n",(0,o.jsx)(n.h3,{id:"1-component-template",children:"1. Component Template"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// src/components/custom/UserCard.tsx\nimport React from \'react\';\nimport { Card, CardContent, CardHeader } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Avatar, AvatarFallback, AvatarImage } from \'@/components/ui/avatar\';\nimport { cn } from \'@/lib/utils\';\n\ninterface User {\n  id: string;\n  name: string;\n  email: string;\n  avatar?: string;\n  role: string;\n}\n\ninterface UserCardProps {\n  user: User;\n  onEdit?: (userId: string) => void;\n  onDelete?: (userId: string) => void;\n  className?: string;\n}\n\nexport const UserCard: React.FC<UserCardProps> = ({\n  user,\n  onEdit,\n  onDelete,\n  className,\n}) => {\n  const initials = user.name\n    .split(\' \')\n    .map(n => n[0])\n    .join(\'\')\n    .toUpperCase();\n\n  return (\n    <Card className={cn(\'w-full\', className)}>\n      <CardHeader className="flex flex-row items-center space-y-0 pb-2">\n        <Avatar className="h-12 w-12">\n          <AvatarImage src={user.avatar} alt={user.name} />\n          <AvatarFallback>{initials}</AvatarFallback>\n        </Avatar>\n        <div className="ml-4 space-y-1">\n          <h3 className="text-lg font-semibold">{user.name}</h3>\n          <p className="text-sm text-muted-foreground">{user.email}</p>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className="flex items-center justify-between">\n          <span className="text-sm font-medium">{user.role}</span>\n          <div className="flex space-x-2">\n            {onEdit && (\n              <Button\n                variant="outline"\n                size="sm"\n                onClick={() => onEdit(user.id)}\n              >\n                Edit\n              </Button>\n            )}\n            {onDelete && (\n              <Button\n                variant="destructive"\n                size="sm"\n                onClick={() => onDelete(user.id)}\n              >\n                Delete\n              </Button>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-component-with-abp-integration",children:"2. Component with ABP Integration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/admin/UserManagement.tsx\nimport React from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { usePermission } from '@/hooks/usePermission';\nimport { userService } from '@/services/userService';\nimport { UserCard } from '@/components/custom/UserCard';\nimport { Button } from '@/components/ui/button';\nimport { Plus } from 'lucide-react';\n\nexport const UserManagement: React.FC = () => {\n  const queryClient = useQueryClient();\n  const canCreate = usePermission('UserManagement.Create');\n  const canEdit = usePermission('UserManagement.Update');\n  const canDelete = usePermission('UserManagement.Delete');\n\n  const { data: users, isLoading, error } = useQuery({\n    queryKey: ['users'],\n    queryFn: userService.getUsers,\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: userService.deleteUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n    },\n  });\n\n  const handleEdit = (userId: string) => {\n    // Navigate to edit page or open modal\n    console.log('Edit user:', userId);\n  };\n\n  const handleDelete = (userId: string) => {\n    if (confirm('Are you sure you want to delete this user?')) {\n      deleteMutation.mutate(userId);\n    }\n  };\n\n  if (isLoading) return <div>Loading users...</div>;\n  if (error) return <div>Error loading users</div>;\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex justify-between items-center\">\n        <h1 className=\"text-2xl font-bold\">User Management</h1>\n        {canCreate && (\n          <Button>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Add User\n          </Button>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n        {users?.map(user => (\n          <UserCard\n            key={user.id}\n            user={user}\n            onEdit={canEdit ? handleEdit : undefined}\n            onDelete={canDelete ? handleDelete : undefined}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-styling-components",children:"\ud83c\udfa8 Styling Components"}),"\n",(0,o.jsx)(n.h3,{id:"1-tailwind-css-classes",children:"1. Tailwind CSS Classes"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Using Tailwind CSS for styling\nexport const StyledComponent: React.FC = () => {\n  return (\n    <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md p-6 hover:shadow-lg transition-shadow duration-200">\n      <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4">\n        Component Title\n      </h2>\n      <p className="text-gray-600 dark:text-gray-300">\n        Component content goes here.\n      </p>\n    </div>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-css-modules",children:"2. CSS Modules"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-css",children:"/* Component.module.css */\n.container {\n  background: var(--background);\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.2s ease;\n}\n\n.container:hover {\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n}\n\n.title {\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  color: var(--foreground);\n}\n\n.content {\n  color: var(--muted-foreground);\n  line-height: 1.6;\n}\n"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Using CSS modules\nimport styles from './Component.module.css';\n\nexport const CSSModuleComponent: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <h2 className={styles.title}>Component Title</h2>\n      <p className={styles.content}>Component content goes here.</p>\n    </div>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-styled-components",children:"3. Styled Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Using styled-components\nimport styled from 'styled-components';\n\nconst StyledContainer = styled.div`\n  background: ${props => props.theme.colors.background};\n  border-radius: 8px;\n  padding: 1.5rem;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);\n  transition: box-shadow 0.2s ease;\n\n  &:hover {\n    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.15);\n  }\n`;\n\nconst StyledTitle = styled.h2`\n  font-size: 1.25rem;\n  font-weight: 600;\n  margin-bottom: 1rem;\n  color: ${props => props.theme.colors.foreground};\n`;\n\nexport const StyledComponent: React.FC = () => {\n  return (\n    <StyledContainer>\n      <StyledTitle>Component Title</StyledTitle>\n      <p>Component content goes here.</p>\n    </StyledContainer>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-component-composition",children:"\ud83d\udd27 Component Composition"}),"\n",(0,o.jsx)(n.h3,{id:"1-compound-components",children:"1. Compound Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Compound component pattern\ninterface DataTableProps {\n  children: React.ReactNode;\n  className?: string;\n}\n\ninterface DataTableHeaderProps {\n  children: React.ReactNode;\n}\n\ninterface DataTableRowProps {\n  children: React.ReactNode;\n  onClick?: () => void;\n}\n\nconst DataTable: React.FC<DataTableProps> & {\n  Header: React.FC<DataTableHeaderProps>;\n  Row: React.FC<DataTableRowProps>;\n} = ({ children, className }) => {\n  return (\n    <div className={cn(\'border rounded-lg\', className)}>\n      {children}\n    </div>\n  );\n};\n\nDataTable.Header = ({ children }) => (\n  <div className="bg-gray-50 px-4 py-3 border-b font-medium">\n    {children}\n  </div>\n);\n\nDataTable.Row = ({ children, onClick }) => (\n  <div\n    className="px-4 py-3 border-b hover:bg-gray-50 cursor-pointer"\n    onClick={onClick}\n  >\n    {children}\n  </div>\n);\n\n// Usage\nexport const UserTable: React.FC = () => {\n  return (\n    <DataTable>\n      <DataTable.Header>\n        <div className="grid grid-cols-3 gap-4">\n          <span>Name</span>\n          <span>Email</span>\n          <span>Role</span>\n        </div>\n      </DataTable.Header>\n      {users.map(user => (\n        <DataTable.Row key={user.id} onClick={() => handleUserClick(user)}>\n          <div className="grid grid-cols-3 gap-4">\n            <span>{user.name}</span>\n            <span>{user.email}</span>\n            <span>{user.role}</span>\n          </div>\n        </DataTable.Row>\n      ))}\n    </DataTable>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-render-props-pattern",children:"2. Render Props Pattern"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Render props pattern\ninterface DataFetcherProps<T> {\n  queryKey: string[];\n  queryFn: () => Promise<T>;\n  children: (data: T | undefined, loading: boolean, error: Error | null) => React.ReactNode;\n}\n\nexport const DataFetcher = <T,>({\n  queryKey,\n  queryFn,\n  children,\n}: DataFetcherProps<T>) => {\n  const { data, isLoading, error } = useQuery({\n    queryKey,\n    queryFn,\n  });\n\n  return <>{children(data, isLoading, error)}</>;\n};\n\n// Usage\nexport const UserList: React.FC = () => {\n  return (\n    <DataFetcher\n      queryKey={['users']}\n      queryFn={userService.getUsers}\n    >\n      {(users, loading, error) => {\n        if (loading) return <div>Loading...</div>;\n        if (error) return <div>Error: {error.message}</div>;\n        if (!users) return <div>No users found</div>;\n\n        return (\n          <div className=\"grid gap-4\">\n            {users.map(user => (\n              <UserCard key={user.id} user={user} />\n            ))}\n          </div>\n        );\n      }}\n    </DataFetcher>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-state-management-in-components",children:"\ud83d\udd04 State Management in Components"}),"\n",(0,o.jsx)(n.h3,{id:"1-local-state",children:"1. Local State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Component with local state\nexport const Counter: React.FC = () => {\n  const [count, setCount] = useState(0);\n\n  const increment = () => setCount(prev => prev + 1);\n  const decrement = () => setCount(prev => prev - 1);\n  const reset = () => setCount(0);\n\n  return (\n    <div className="flex items-center space-x-4">\n      <Button onClick={decrement}>-</Button>\n      <span className="text-xl font-semibold">{count}</span>\n      <Button onClick={increment}>+</Button>\n      <Button variant="outline" onClick={reset}>Reset</Button>\n    </div>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"2-context-state",children:"2. Context State"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Using context for shared state\nconst ThemeContext = createContext<{\n  theme: 'light' | 'dark';\n  toggleTheme: () => void;\n}>({\n  theme: 'light',\n  toggleTheme: () => {},\n});\n\nexport const ThemeProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [theme, setTheme] = useState<'light' | 'dark'>('light');\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'light' ? 'dark' : 'light');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport const useTheme = () => useContext(ThemeContext);\n\n// Usage in component\nexport const ThemeToggle: React.FC = () => {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button onClick={toggleTheme}>\n      {theme === 'light' ? '\ud83c\udf19' : '\u2600\ufe0f'} Toggle Theme\n    </Button>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-form-components",children:"\ud83d\udcdd Form Components"}),"\n",(0,o.jsx)(n.h3,{id:"1-controlled-form-component",children:"1. Controlled Form Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Controlled form component\ninterface FormData {\n  name: string;\n  email: string;\n  role: string;\n}\n\nexport const UserForm: React.FC<{\n  initialData?: Partial<FormData>;\n  onSubmit: (data: FormData) => void;\n}> = ({ initialData, onSubmit }) => {\n  const [formData, setFormData] = useState<FormData>({\n    name: initialData?.name || \'\',\n    email: initialData?.email || \'\',\n    role: initialData?.role || \'User\',\n  });\n\n  const [errors, setErrors] = useState<Partial<FormData>>({});\n\n  const validate = (): boolean => {\n    const newErrors: Partial<FormData> = {};\n\n    if (!formData.name.trim()) {\n      newErrors.name = \'Name is required\';\n    }\n\n    if (!formData.email.trim()) {\n      newErrors.email = \'Email is required\';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(formData.email)) {\n      newErrors.email = \'Email is invalid\';\n    }\n\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (validate()) {\n      onSubmit(formData);\n    }\n  };\n\n  const handleChange = (field: keyof FormData, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: undefined }));\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className="space-y-4">\n      <div>\n        <label htmlFor="name" className="block text-sm font-medium mb-1">\n          Name\n        </label>\n        <input\n          id="name"\n          type="text"\n          value={formData.name}\n          onChange={e => handleChange(\'name\', e.target.value)}\n          className={cn(\n            \'w-full px-3 py-2 border rounded-md\',\n            errors.name ? \'border-red-500\' : \'border-gray-300\'\n          )}\n        />\n        {errors.name && (\n          <p className="text-red-500 text-sm mt-1">{errors.name}</p>\n        )}\n      </div>\n\n      <div>\n        <label htmlFor="email" className="block text-sm font-medium mb-1">\n          Email\n        </label>\n        <input\n          id="email"\n          type="email"\n          value={formData.email}\n          onChange={e => handleChange(\'email\', e.target.value)}\n          className={cn(\n            \'w-full px-3 py-2 border rounded-md\',\n            errors.email ? \'border-red-500\' : \'border-gray-300\'\n          )}\n        />\n        {errors.email && (\n          <p className="text-red-500 text-sm mt-1">{errors.email}</p>\n        )}\n      </div>\n\n      <div>\n        <label htmlFor="role" className="block text-sm font-medium mb-1">\n          Role\n        </label>\n        <select\n          id="role"\n          value={formData.role}\n          onChange={e => handleChange(\'role\', e.target.value)}\n          className="w-full px-3 py-2 border border-gray-300 rounded-md"\n        >\n          <option value="User">User</option>\n          <option value="Admin">Admin</option>\n          <option value="Manager">Manager</option>\n        </select>\n      </div>\n\n      <Button type="submit" className="w-full">\n        Submit\n      </Button>\n    </form>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-testing-custom-components",children:"\ud83e\uddea Testing Custom Components"}),"\n",(0,o.jsx)(n.h3,{id:"1-component-testing",children:"1. Component Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// UserCard.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { UserCard } from './UserCard';\n\ndescribe('UserCard', () => {\n  const mockUser = {\n    id: '1',\n    name: 'John Doe',\n    email: 'john@example.com',\n    role: 'Admin',\n  };\n\n  it('renders user information correctly', () => {\n    render(<UserCard user={mockUser} />);\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('john@example.com')).toBeInTheDocument();\n    expect(screen.getByText('Admin')).toBeInTheDocument();\n  });\n\n  it('calls onEdit when edit button is clicked', () => {\n    const onEdit = vi.fn();\n    render(<UserCard user={mockUser} onEdit={onEdit} />);\n    \n    fireEvent.click(screen.getByRole('button', { name: /edit/i }));\n    \n    expect(onEdit).toHaveBeenCalledWith(mockUser.id);\n  });\n\n  it('calls onDelete when delete button is clicked', () => {\n    const onDelete = vi.fn();\n    render(<UserCard user={mockUser} onDelete={onDelete} />);\n    \n    fireEvent.click(screen.getByRole('button', { name: /delete/i }));\n    \n    expect(onDelete).toHaveBeenCalledWith(mockUser.id);\n  });\n\n  it('does not show edit button when onEdit is not provided', () => {\n    render(<UserCard user={mockUser} />);\n    \n    expect(screen.queryByRole('button', { name: /edit/i })).not.toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-integration-testing",children:"2. Integration Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// UserManagement.test.tsx\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, vi } from 'vitest';\nimport { UserManagement } from './UserManagement';\nimport { userService } from '@/services/userService';\n\nvi.mock('@/services/userService');\nvi.mock('@/hooks/usePermission', () => ({\n  usePermission: (permission: string) => {\n    const permissions = {\n      'UserManagement.Create': true,\n      'UserManagement.Update': true,\n      'UserManagement.Delete': true,\n    };\n    return permissions[permission] || false;\n  },\n}));\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <QueryClientProvider client={queryClient}>\n    {children}\n  </QueryClientProvider>\n);\n\ndescribe('UserManagement', () => {\n  it('renders users from API', async () => {\n    const mockUsers = [\n      { id: '1', name: 'John Doe', email: 'john@example.com', role: 'Admin' },\n      { id: '2', name: 'Jane Smith', email: 'jane@example.com', role: 'User' },\n    ];\n\n    vi.mocked(userService.getUsers).mockResolvedValue(mockUsers);\n\n    render(\n      <TestWrapper>\n        <UserManagement />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\n      expect(screen.getByText('Jane Smith')).toBeInTheDocument();\n    });\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-best-practices",children:"\ud83d\udcda Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-component-organization",children:"1. Component Organization"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"components/\n\u251c\u2500\u2500 ui/                    # Base UI components\n\u251c\u2500\u2500 forms/                 # Form components\n\u251c\u2500\u2500 layout/                # Layout components\n\u251c\u2500\u2500 admin/                 # Admin-specific components\n\u2514\u2500\u2500 custom/                # Custom business components\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-props-interface",children:"2. Props Interface"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Always define clear props interfaces\ninterface ComponentProps {\n  // Required props\n  title: string;\n  data: DataType[];\n  \n  // Optional props with defaults\n  variant?: 'primary' | 'secondary';\n  size?: 'sm' | 'md' | 'lg';\n  \n  // Event handlers\n  onAction?: (id: string) => void;\n  \n  // Styling\n  className?: string;\n  \n  // Children\n  children?: React.ReactNode;\n}\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-error-boundaries",children:"3. Error Boundaries"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Error boundary for custom components\nclass ComponentErrorBoundary extends React.Component<\n  { children: React.ReactNode },\n  { hasError: boolean }\n> {\n  constructor(props: { children: React.ReactNode }) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError() {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\n    console.error(\'Component error:\', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return (\n        <div className="p-4 border border-red-200 rounded-md bg-red-50">\n          <h3 className="text-red-800 font-medium">Something went wrong</h3>\n          <p className="text-red-600 text-sm">\n            This component encountered an error and cannot be displayed.\n          </p>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/components/ui-components",children:"UI Components"})})," - Base UI component library"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/components/forms",children:"Form Validation"})})," - Form handling and validation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/fundamentals/api-integration",children:"API Integration"})})," - Integrating with ABP APIs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/testing",children:"Testing Guide"})})," - Testing custom components"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Custom components are the foundation of your ABP React application. By following these patterns and best practices, you can create maintainable, reusable, and well-tested components that integrate seamlessly with the ABP Framework."})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>i});var r=t(6540);const o={},s=r.createContext(o);function a(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);