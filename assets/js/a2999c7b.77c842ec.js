"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[8167],{225:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"development/testing","title":"Testing Guide","description":"Testing is a crucial part of building reliable and maintainable applications. ABP React provides comprehensive testing capabilities using modern testing tools and best practices.","source":"@site/docs/development/testing.md","sourceDirName":"development","slug":"/development/testing","permalink":"/abp-react/docs/development/testing","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/development/testing.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Custom Hooks","permalink":"/abp-react/docs/development/custom-hooks"},"next":{"title":"Performance Optimization","permalink":"/abp-react/docs/development/performance"}}');var s=t(4848),r=t(8453);const a={sidebar_position:3},o="Testing Guide",c={},l=[{value:"\ud83c\udfaf Testing Strategy",id:"-testing-strategy",level:2},{value:"Testing Pyramid",id:"testing-pyramid",level:3},{value:"Testing Tools",id:"testing-tools",level:3},{value:"\ud83e\uddea Unit Testing",id:"-unit-testing",level:2},{value:"Setting Up Unit Tests",id:"setting-up-unit-tests",level:3},{value:"Testing Utilities",id:"testing-utilities",level:3},{value:"Component Testing",id:"component-testing",level:3},{value:"Hook Testing",id:"hook-testing",level:3},{value:"Utility Function Testing",id:"utility-function-testing",level:3},{value:"\ud83d\udd17 Integration Testing",id:"-integration-testing",level:2},{value:"API Integration Testing",id:"api-integration-testing",level:3},{value:"Component Integration Testing",id:"component-integration-testing",level:3},{value:"\ud83c\udf10 End-to-End Testing",id:"-end-to-end-testing",level:2},{value:"Setting Up Playwright",id:"setting-up-playwright",level:3},{value:"E2E Test Examples",id:"e2e-test-examples",level:3},{value:"\ud83c\udfad Mocking",id:"-mocking",level:2},{value:"API Mocking with MSW",id:"api-mocking-with-msw",level:3},{value:"Component Mocking",id:"component-mocking",level:3},{value:"\ud83d\udcca Test Coverage",id:"-test-coverage",level:2},{value:"Coverage Configuration",id:"coverage-configuration",level:3},{value:"Coverage Reports",id:"coverage-reports",level:3},{value:"\ud83d\ude80 Performance Testing",id:"-performance-testing",level:2},{value:"Component Performance Testing",id:"component-performance-testing",level:3},{value:"\ud83d\udd27 Test Utilities",id:"-test-utilities",level:2},{value:"Custom Test Helpers",id:"custom-test-helpers",level:3},{value:"Test Data Factories",id:"test-data-factories",level:3},{value:"\ud83d\udcdd Best Practices",id:"-best-practices",level:2},{value:"1. Test Organization",id:"1-test-organization",level:3},{value:"2. Test Naming",id:"2-test-naming",level:3},{value:"3. Test Isolation",id:"3-test-isolation",level:3},{value:"4. Assertion Best Practices",id:"4-assertion-best-practices",level:3},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"testing-guide",children:"Testing Guide"})}),"\n",(0,s.jsx)(n.p,{children:"Testing is a crucial part of building reliable and maintainable applications. ABP React provides comprehensive testing capabilities using modern testing tools and best practices."}),"\n",(0,s.jsx)(n.h2,{id:"-testing-strategy",children:"\ud83c\udfaf Testing Strategy"}),"\n",(0,s.jsx)(n.h3,{id:"testing-pyramid",children:"Testing Pyramid"}),"\n",(0,s.jsx)(n.p,{children:"ABP React follows the testing pyramid approach:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502   E2E Tests \u2502  (Few, high-level)\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502Integration  \u2502  (Some, medium-level)\n    \u2502   Tests     \u2502\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n    \u2502  Unit Tests \u2502  (Many, low-level)\n    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-tools",children:"Testing Tools"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vitest"}),": Fast unit testing framework"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"React Testing Library"}),": Component testing utilities"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Playwright"}),": End-to-end testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"MSW (Mock Service Worker)"}),": API mocking"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"-unit-testing",children:"\ud83e\uddea Unit Testing"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-unit-tests",children:"Setting Up Unit Tests"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// vitest.config.ts\nimport { defineConfig } from 'vitest/config';\nimport react from '@vitejs/plugin-react';\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [react()],\n  test: {\n    environment: 'jsdom',\n    setupFiles: ['./src/test/setup.ts'],\n    globals: true,\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, './src'),\n    },\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"testing-utilities",children:"Testing Utilities"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/test/setup.ts\nimport '@testing-library/jest-dom';\nimport { vi } from 'vitest';\n\n// Mock IntersectionObserver\nglobal.IntersectionObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n\n// Mock ResizeObserver\nglobal.ResizeObserver = vi.fn().mockImplementation(() => ({\n  observe: vi.fn(),\n  unobserve: vi.fn(),\n  disconnect: vi.fn(),\n}));\n"})}),"\n",(0,s.jsx)(n.h3,{id:"component-testing",children:"Component Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// UserCard.test.tsx\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { UserCard } from './UserCard';\n\ndescribe('UserCard', () => {\n  const mockUser = {\n    id: '1',\n    name: 'John Doe',\n    email: 'john@example.com',\n    role: 'Admin',\n  };\n\n  it('renders user information correctly', () => {\n    render(<UserCard user={mockUser} />);\n    \n    expect(screen.getByText('John Doe')).toBeInTheDocument();\n    expect(screen.getByText('john@example.com')).toBeInTheDocument();\n    expect(screen.getByText('Admin')).toBeInTheDocument();\n  });\n\n  it('calls onEdit when edit button is clicked', () => {\n    const onEdit = vi.fn();\n    render(<UserCard user={mockUser} onEdit={onEdit} />);\n    \n    fireEvent.click(screen.getByRole('button', { name: /edit/i }));\n    \n    expect(onEdit).toHaveBeenCalledWith(mockUser.id);\n  });\n\n  it('shows delete confirmation when delete button is clicked', () => {\n    const onDelete = vi.fn();\n    render(<UserCard user={mockUser} onDelete={onDelete} />);\n    \n    fireEvent.click(screen.getByRole('button', { name: /delete/i }));\n    \n    expect(screen.getByText(/are you sure/i)).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"hook-testing",children:"Hook Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// useCounter.test.ts\nimport { renderHook, act } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport { useCounter } from './useCounter';\n\ndescribe('useCounter', () => {\n  it('should initialize with default value', () => {\n    const { result } = renderHook(() => useCounter());\n    \n    expect(result.current.count).toBe(0);\n  });\n\n  it('should initialize with provided value', () => {\n    const { result } = renderHook(() => useCounter(5));\n    \n    expect(result.current.count).toBe(5);\n  });\n\n  it('should increment counter', () => {\n    const { result } = renderHook(() => useCounter(0));\n    \n    act(() => {\n      result.current.increment();\n    });\n    \n    expect(result.current.count).toBe(1);\n  });\n\n  it('should decrement counter', () => {\n    const { result } = renderHook(() => useCounter(1));\n    \n    act(() => {\n      result.current.decrement();\n    });\n    \n    expect(result.current.count).toBe(0);\n  });\n\n  it('should reset counter', () => {\n    const { result } = renderHook(() => useCounter(10));\n    \n    act(() => {\n      result.current.reset();\n    });\n    \n    expect(result.current.count).toBe(0);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"utility-function-testing",children:"Utility Function Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// utils.test.ts\nimport { describe, it, expect } from 'vitest';\nimport { formatDate, validateEmail, debounce } from './utils';\n\ndescribe('formatDate', () => {\n  it('should format date correctly', () => {\n    const date = new Date('2023-01-15');\n    const formatted = formatDate(date);\n    \n    expect(formatted).toBe('Jan 15, 2023');\n  });\n\n  it('should handle invalid date', () => {\n    const formatted = formatDate('invalid-date');\n    \n    expect(formatted).toBe('Invalid Date');\n  });\n});\n\ndescribe('validateEmail', () => {\n  it('should validate correct email', () => {\n    expect(validateEmail('test@example.com')).toBe(true);\n    expect(validateEmail('user.name@domain.co.uk')).toBe(true);\n  });\n\n  it('should reject invalid email', () => {\n    expect(validateEmail('invalid-email')).toBe(false);\n    expect(validateEmail('test@')).toBe(false);\n    expect(validateEmail('@example.com')).toBe(false);\n  });\n});\n\ndescribe('debounce', () => {\n  it('should debounce function calls', async () => {\n    const fn = vi.fn();\n    const debouncedFn = debounce(fn, 100);\n    \n    debouncedFn();\n    debouncedFn();\n    debouncedFn();\n    \n    expect(fn).not.toHaveBeenCalled();\n    \n    await new Promise(resolve => setTimeout(resolve, 150));\n    \n    expect(fn).toHaveBeenCalledTimes(1);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-integration-testing",children:"\ud83d\udd17 Integration Testing"}),"\n",(0,s.jsx)(n.h3,{id:"api-integration-testing",children:"API Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// userService.test.ts\nimport { describe, it, expect, beforeEach, vi } from 'vitest';\nimport { userService } from './userService';\nimport { api } from '@/lib/api';\n\n// Mock the API module\nvi.mock('@/lib/api');\n\ndescribe('userService', () => {\n  beforeEach(() => {\n    vi.clearAllMocks();\n  });\n\n  it('should fetch users successfully', async () => {\n    const mockUsers = [\n      { id: '1', name: 'John Doe', email: 'john@example.com' },\n      { id: '2', name: 'Jane Smith', email: 'jane@example.com' },\n    ];\n\n    vi.mocked(api.get).mockResolvedValue({ data: mockUsers });\n\n    const result = await userService.getUsers();\n\n    expect(api.get).toHaveBeenCalledWith('/users');\n    expect(result).toEqual(mockUsers);\n  });\n\n  it('should handle API errors', async () => {\n    const error = new Error('Network error');\n    vi.mocked(api.get).mockRejectedValue(error);\n\n    await expect(userService.getUsers()).rejects.toThrow('Network error');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"component-integration-testing",children:"Component Integration Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// UserList.test.tsx\nimport { render, screen, waitFor } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { describe, it, expect, vi } from 'vitest';\nimport { UserList } from './UserList';\nimport { userService } from './userService';\n\n// Mock the user service\nvi.mock('./userService');\n\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: { retry: false },\n    mutations: { retry: false },\n  },\n});\n\nconst TestWrapper = ({ children }: { children: React.ReactNode }) => (\n  <QueryClientProvider client={queryClient}>\n    {children}\n  </QueryClientProvider>\n);\n\ndescribe('UserList', () => {\n  it('should render users from API', async () => {\n    const mockUsers = [\n      { id: '1', name: 'John Doe', email: 'john@example.com' },\n      { id: '2', name: 'Jane Smith', email: 'jane@example.com' },\n    ];\n\n    vi.mocked(userService.getUsers).mockResolvedValue(mockUsers);\n\n    render(\n      <TestWrapper>\n        <UserList />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n\n    await waitFor(() => {\n      expect(screen.getByText('John Doe')).toBeInTheDocument();\n      expect(screen.getByText('Jane Smith')).toBeInTheDocument();\n    });\n  });\n\n  it('should handle loading state', () => {\n    vi.mocked(userService.getUsers).mockImplementation(\n      () => new Promise(() => {}) // Never resolves\n    );\n\n    render(\n      <TestWrapper>\n        <UserList />\n      </TestWrapper>\n    );\n\n    expect(screen.getByText('Loading...')).toBeInTheDocument();\n  });\n\n  it('should handle error state', async () => {\n    vi.mocked(userService.getUsers).mockRejectedValue(\n      new Error('Failed to fetch users')\n    );\n\n    render(\n      <TestWrapper>\n        <UserList />\n      </TestWrapper>\n    );\n\n    await waitFor(() => {\n      expect(screen.getByText('Error loading users')).toBeInTheDocument();\n    });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-end-to-end-testing",children:"\ud83c\udf10 End-to-End Testing"}),"\n",(0,s.jsx)(n.h3,{id:"setting-up-playwright",children:"Setting Up Playwright"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// playwright.config.ts\nimport { defineConfig, devices } from '@playwright/test';\n\nexport default defineConfig({\n  testDir: './e2e',\n  fullyParallel: true,\n  forbidOnly: !!process.env.CI,\n  retries: process.env.CI ? 2 : 0,\n  workers: process.env.CI ? 1 : undefined,\n  reporter: 'html',\n  use: {\n    baseURL: 'http://localhost:3000',\n    trace: 'on-first-retry',\n  },\n  projects: [\n    {\n      name: 'chromium',\n      use: { ...devices['Desktop Chrome'] },\n    },\n    {\n      name: 'firefox',\n      use: { ...devices['Desktop Firefox'] },\n    },\n    {\n      name: 'webkit',\n      use: { ...devices['Desktop Safari'] },\n    },\n  ],\n  webServer: {\n    command: 'npm run dev',\n    url: 'http://localhost:3000',\n    reuseExistingServer: !process.env.CI,\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"e2e-test-examples",children:"E2E Test Examples"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// e2e/auth.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('Authentication', () => {\n  test('should login successfully', async ({ page }) => {\n    await page.goto('/login');\n    \n    await page.fill('[data-testid=\"email\"]', 'admin@example.com');\n    await page.fill('[data-testid=\"password\"]', 'password123');\n    await page.click('[data-testid=\"login-button\"]');\n    \n    await expect(page).toHaveURL('/admin');\n    await expect(page.locator('[data-testid=\"user-menu\"]')).toBeVisible();\n  });\n\n  test('should show error for invalid credentials', async ({ page }) => {\n    await page.goto('/login');\n    \n    await page.fill('[data-testid=\"email\"]', 'invalid@example.com');\n    await page.fill('[data-testid=\"password\"]', 'wrongpassword');\n    await page.click('[data-testid=\"login-button\"]');\n    \n    await expect(page.locator('[data-testid=\"error-message\"]')).toBeVisible();\n    await expect(page.locator('[data-testid=\"error-message\"]')).toContainText(\n      'Invalid credentials'\n    );\n  });\n\n  test('should logout successfully', async ({ page }) => {\n    // Login first\n    await page.goto('/login');\n    await page.fill('[data-testid=\"email\"]', 'admin@example.com');\n    await page.fill('[data-testid=\"password\"]', 'password123');\n    await page.click('[data-testid=\"login-button\"]');\n    \n    // Logout\n    await page.click('[data-testid=\"user-menu\"]');\n    await page.click('[data-testid=\"logout-button\"]');\n    \n    await expect(page).toHaveURL('/login');\n  });\n});\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// e2e/user-management.spec.ts\nimport { test, expect } from '@playwright/test';\n\ntest.describe('User Management', () => {\n  test.beforeEach(async ({ page }) => {\n    // Login before each test\n    await page.goto('/login');\n    await page.fill('[data-testid=\"email\"]', 'admin@example.com');\n    await page.fill('[data-testid=\"password\"]', 'password123');\n    await page.click('[data-testid=\"login-button\"]');\n  });\n\n  test('should create a new user', async ({ page }) => {\n    await page.goto('/admin/users');\n    \n    await page.click('[data-testid=\"create-user-button\"]');\n    \n    await page.fill('[data-testid=\"user-name\"]', 'New User');\n    await page.fill('[data-testid=\"user-email\"]', 'newuser@example.com');\n    await page.selectOption('[data-testid=\"user-role\"]', 'User');\n    \n    await page.click('[data-testid=\"save-button\"]');\n    \n    await expect(page.locator('text=New User')).toBeVisible();\n    await expect(page.locator('text=newuser@example.com')).toBeVisible();\n  });\n\n  test('should edit existing user', async ({ page }) => {\n    await page.goto('/admin/users');\n    \n    await page.click('[data-testid=\"edit-user-1\"]');\n    \n    await page.fill('[data-testid=\"user-name\"]', 'Updated Name');\n    await page.click('[data-testid=\"save-button\"]');\n    \n    await expect(page.locator('text=Updated Name')).toBeVisible();\n  });\n\n  test('should delete user', async ({ page }) => {\n    await page.goto('/admin/users');\n    \n    await page.click('[data-testid=\"delete-user-1\"]');\n    await page.click('[data-testid=\"confirm-delete\"]');\n    \n    await expect(page.locator('[data-testid=\"user-1\"]')).not.toBeVisible();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-mocking",children:"\ud83c\udfad Mocking"}),"\n",(0,s.jsx)(n.h3,{id:"api-mocking-with-msw",children:"API Mocking with MSW"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/test/mocks/handlers.ts\nimport { rest } from 'msw';\n\nexport const handlers = [\n  rest.get('/api/users', (req, res, ctx) => {\n    return res(\n      ctx.status(200),\n      ctx.json([\n        { id: '1', name: 'John Doe', email: 'john@example.com' },\n        { id: '2', name: 'Jane Smith', email: 'jane@example.com' },\n      ])\n    );\n  }),\n\n  rest.post('/api/users', (req, res, ctx) => {\n    const { name, email } = req.body as any;\n    \n    return res(\n      ctx.status(201),\n      ctx.json({\n        id: '3',\n        name,\n        email,\n        createdAt: new Date().toISOString(),\n      })\n    );\n  }),\n\n  rest.delete('/api/users/:id', (req, res, ctx) => {\n    return res(ctx.status(204));\n  }),\n];\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/test/setup.ts\nimport { setupServer } from 'msw/node';\nimport { handlers } from './mocks/handlers';\n\nexport const server = setupServer(...handlers);\n\nbeforeAll(() => server.listen());\nafterEach(() => server.resetHandlers());\nafterAll(() => server.close());\n"})}),"\n",(0,s.jsx)(n.h3,{id:"component-mocking",children:"Component Mocking"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'// Mocking child components\nvi.mock(\'./UserCard\', () => ({\n  UserCard: ({ user, onEdit, onDelete }: any) => (\n    <div data-testid="user-card">\n      <span data-testid="user-name">{user.name}</span>\n      <button onClick={() => onEdit?.(user.id)}>Edit</button>\n      <button onClick={() => onDelete?.(user.id)}>Delete</button>\n    </div>\n  ),\n}));\n'})}),"\n",(0,s.jsx)(n.h2,{id:"-test-coverage",children:"\ud83d\udcca Test Coverage"}),"\n",(0,s.jsx)(n.h3,{id:"coverage-configuration",children:"Coverage Configuration"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// vitest.config.ts\nexport default defineConfig({\n  test: {\n    coverage: {\n      provider: 'v8',\n      reporter: ['text', 'json', 'html'],\n      exclude: [\n        'node_modules/',\n        'src/test/',\n        '**/*.d.ts',\n        '**/*.config.*',\n      ],\n    },\n  },\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"coverage-reports",children:"Coverage Reports"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Run tests with coverage\nnpm run test:coverage\n\n# Generate coverage report\nnpm run test:coverage:report\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-performance-testing",children:"\ud83d\ude80 Performance Testing"}),"\n",(0,s.jsx)(n.h3,{id:"component-performance-testing",children:"Component Performance Testing"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Performance test example\nimport { render } from '@testing-library/react';\nimport { describe, it, expect } from 'vitest';\nimport { UserList } from './UserList';\n\ndescribe('UserList Performance', () => {\n  it('should render large lists efficiently', () => {\n    const largeUserList = Array.from({ length: 1000 }, (_, i) => ({\n      id: i.toString(),\n      name: `User ${i}`,\n      email: `user${i}@example.com`,\n    }));\n\n    const startTime = performance.now();\n    \n    render(<UserList users={largeUserList} />);\n    \n    const endTime = performance.now();\n    const renderTime = endTime - startTime;\n    \n    // Should render in less than 100ms\n    expect(renderTime).toBeLessThan(100);\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-test-utilities",children:"\ud83d\udd27 Test Utilities"}),"\n",(0,s.jsx)(n.h3,{id:"custom-test-helpers",children:"Custom Test Helpers"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/test/utils.tsx\nimport { render, RenderOptions } from '@testing-library/react';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { BrowserRouter } from 'react-router-dom';\nimport { AuthProvider } from '@/contexts/AuthContext';\n\nconst AllTheProviders = ({ children }: { children: React.ReactNode }) => {\n  const queryClient = new QueryClient({\n    defaultOptions: {\n      queries: { retry: false },\n      mutations: { retry: false },\n    },\n  });\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <BrowserRouter>\n        <AuthProvider>\n          {children}\n        </AuthProvider>\n      </BrowserRouter>\n    </QueryClientProvider>\n  );\n};\n\nconst customRender = (\n  ui: React.ReactElement,\n  options?: Omit<RenderOptions, 'wrapper'>\n) => render(ui, { wrapper: AllTheProviders, ...options });\n\nexport * from '@testing-library/react';\nexport { customRender as render };\n"})}),"\n",(0,s.jsx)(n.h3,{id:"test-data-factories",children:"Test Data Factories"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// src/test/factories.ts\nimport { faker } from '@faker-js/faker';\n\nexport const createUser = (overrides = {}) => ({\n  id: faker.string.uuid(),\n  name: faker.person.fullName(),\n  email: faker.internet.email(),\n  role: faker.helpers.arrayElement(['Admin', 'User', 'Manager']),\n  createdAt: faker.date.past().toISOString(),\n  ...overrides,\n});\n\nexport const createUserList = (count: number) =>\n  Array.from({ length: count }, () => createUser());\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-best-practices",children:"\ud83d\udcdd Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-test-organization",children:"1. Test Organization"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Organize tests by feature\ndescribe('User Management', () => {\n  describe('User List', () => {\n    it('should display users', () => { /* ... */ });\n    it('should handle empty state', () => { /* ... */ });\n  });\n\n  describe('User Creation', () => {\n    it('should create user successfully', () => { /* ... */ });\n    it('should validate required fields', () => { /* ... */ });\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-test-naming",children:"2. Test Naming"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Use descriptive test names\nit('should show error message when email is invalid', () => { /* ... */ });\nit('should redirect to dashboard after successful login', () => { /* ... */ });\nit('should disable submit button when form is invalid', () => { /* ... */ });\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-test-isolation",children:"3. Test Isolation"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Each test should be independent\ndescribe('UserService', () => {\n  beforeEach(() => {\n    // Reset mocks and state before each test\n    vi.clearAllMocks();\n    localStorage.clear();\n  });\n\n  afterEach(() => {\n    // Clean up after each test\n    vi.restoreAllMocks();\n  });\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-assertion-best-practices",children:"4. Assertion Best Practices"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:"// Test behavior, not implementation\n// Good\nexpect(screen.getByText('User created successfully')).toBeInTheDocument();\n\n// Avoid\nexpect(mockApi.createUser).toHaveBeenCalledWith(userData);\n"})}),"\n",(0,s.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/development/custom-hooks",children:"Custom Hooks"})})," - Testing custom hooks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/fundamentals/api-integration",children:"API Integration"})})," - Testing API calls"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/development/performance",children:"Performance Optimization"})})," - Performance testing"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.a,{href:"/docs/components/ui-components",children:"Component Development"})})," - Component testing"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:"Testing is essential for building reliable applications. By following these testing patterns and best practices, you can ensure your ABP React application is robust, maintainable, and bug-free."})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const s={},r=i.createContext(s);function a(e){const n=i.useContext(r);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);