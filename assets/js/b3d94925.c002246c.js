"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[1453],{4616:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"components/forms","title":"Form Components","description":"Form components in ABP React provide a comprehensive solution for handling user input, validation, and submission. This guide covers form creation, validation, and integration with the ABP Framework.","source":"@site/docs/components/forms.md","sourceDirName":"components","slug":"/components/forms","permalink":"/abp-react/docs/components/forms","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/components/forms.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Custom Components","permalink":"/abp-react/docs/components/custom-components"},"next":{"title":"CMS Components","permalink":"/abp-react/docs/components/cms-components"}}');var o=r(4848),a=r(8453);const s={sidebar_position:3},i="Form Components",l={},m=[{value:"\ud83c\udfaf Form Architecture",id:"-form-architecture",level:2},{value:"Form Types",id:"form-types",level:3},{value:"Form Structure",id:"form-structure",level:3},{value:"\ud83c\udfd7\ufe0f Creating Forms",id:"\ufe0f-creating-forms",level:2},{value:"1. Basic Form Component",id:"1-basic-form-component",level:3},{value:"2. Form with API Integration",id:"2-form-with-api-integration",level:3},{value:"\ud83d\udd0d Form Validation",id:"-form-validation",level:2},{value:"1. Schema Validation with Zod",id:"1-schema-validation-with-zod",level:3},{value:"2. Custom Validation",id:"2-custom-validation",level:3},{value:"3. Async Validation",id:"3-async-validation",level:3},{value:"\ud83d\udcdd Form Components",id:"-form-components",level:2},{value:"1. Form Field Components",id:"1-form-field-components",level:3},{value:"2. Form Select Component",id:"2-form-select-component",level:3},{value:"3. Form Textarea Component",id:"3-form-textarea-component",level:3},{value:"\ud83d\udd04 Dynamic Forms",id:"-dynamic-forms",level:2},{value:"1. Dynamic Form Builder",id:"1-dynamic-form-builder",level:3},{value:"2. Multi-step Form",id:"2-multi-step-form",level:3},{value:"\ud83e\uddea Testing Forms",id:"-testing-forms",level:2},{value:"1. Form Testing",id:"1-form-testing",level:3},{value:"\ud83d\udcda Best Practices",id:"-best-practices",level:2},{value:"1. Form Organization",id:"1-form-organization",level:3},{value:"2. Error Handling",id:"2-error-handling",level:3},{value:"3. Form State Management",id:"3-form-state-management",level:3},{value:"\ud83d\udcda Related Documentation",id:"-related-documentation",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"form-components",children:"Form Components"})}),"\n",(0,o.jsx)(n.p,{children:"Form components in ABP React provide a comprehensive solution for handling user input, validation, and submission. This guide covers form creation, validation, and integration with the ABP Framework."}),"\n",(0,o.jsx)(n.h2,{id:"-form-architecture",children:"\ud83c\udfaf Form Architecture"}),"\n",(0,o.jsx)(n.h3,{id:"form-types",children:"Form Types"}),"\n",(0,o.jsx)(n.p,{children:"ABP React supports various form patterns:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Controlled Forms"}),": React-managed state"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Uncontrolled Forms"}),": DOM-managed state"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Form Libraries"}),": React Hook Form, Formik integration"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Dynamic Forms"}),": Runtime form generation"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Multi-step Forms"}),": Wizard-style forms"]}),"\n"]}),"\n",(0,o.jsx)(n.h3,{id:"form-structure",children:"Form Structure"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Basic form structure\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\n\nconst formSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  role: z.enum(['User', 'Admin', 'Manager']),\n});\n\ntype FormData = z.infer<typeof formSchema>;\n\nexport const UserForm: React.FC = () => {\n  const form = useForm<FormData>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: '',\n      email: '',\n      role: 'User',\n    },\n  });\n\n  const onSubmit = (data: FormData) => {\n    console.log('Form data:', data);\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)}>\n      {/* Form fields */}\n    </form>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"\ufe0f-creating-forms",children:"\ud83c\udfd7\ufe0f Creating Forms"}),"\n",(0,o.jsx)(n.h3,{id:"1-basic-form-component",children:"1. Basic Form Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/forms/UserForm.tsx\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\n\nconst userSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  role: z.enum(['User', 'Admin', 'Manager']),\n  department: z.string().optional(),\n});\n\ntype UserFormData = z.infer<typeof userSchema>;\n\ninterface UserFormProps {\n  initialData?: Partial<UserFormData>;\n  onSubmit: (data: UserFormData) => void;\n  onCancel?: () => void;\n  loading?: boolean;\n}\n\nexport const UserForm: React.FC<UserFormProps> = ({\n  initialData,\n  onSubmit,\n  onCancel,\n  loading = false,\n}) => {\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      name: initialData?.name || '',\n      email: initialData?.email || '',\n      role: initialData?.role || 'User',\n      department: initialData?.department || '',\n    },\n  });\n\n  const handleSubmit = (data: UserFormData) => {\n    onSubmit(data);\n  };\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter full name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"role\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Role</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"User\">User</SelectItem>\n                  <SelectItem value=\"Admin\">Admin</SelectItem>\n                  <SelectItem value=\"Manager\">Manager</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"department\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Department (Optional)</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter department\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex justify-end space-x-2\">\n          {onCancel && (\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n          )}\n          <Button type=\"submit\" disabled={loading}>\n            {loading ? 'Saving...' : 'Save User'}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-form-with-api-integration",children:"2. Form with API Integration"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/forms/UserFormWithAPI.tsx\nimport React from 'react';\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { toast } from 'sonner';\nimport { userService } from '@/services/userService';\nimport { UserForm } from './UserForm';\n\nconst userSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  email: z.string().email('Invalid email address'),\n  role: z.enum(['User', 'Admin', 'Manager']),\n  department: z.string().optional(),\n});\n\ntype UserFormData = z.infer<typeof userSchema>;\n\ninterface UserFormWithAPIProps {\n  initialData?: Partial<UserFormData>;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nexport const UserFormWithAPI: React.FC<UserFormWithAPIProps> = ({\n  initialData,\n  onSuccess,\n  onCancel,\n}) => {\n  const queryClient = useQueryClient();\n\n  const createUserMutation = useMutation({\n    mutationFn: userService.createUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      toast.success('User created successfully');\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast.error('Failed to create user');\n      console.error('Create user error:', error);\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: userService.updateUser,\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['users'] });\n      toast.success('User updated successfully');\n      onSuccess?.();\n    },\n    onError: (error) => {\n      toast.error('Failed to update user');\n      console.error('Update user error:', error);\n    },\n  });\n\n  const handleSubmit = (data: UserFormData) => {\n    if (initialData?.id) {\n      // Update existing user\n      updateUserMutation.mutate({ id: initialData.id, ...data });\n    } else {\n      // Create new user\n      createUserMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createUserMutation.isPending || updateUserMutation.isPending;\n\n  return (\n    <UserForm\n      initialData={initialData}\n      onSubmit={handleSubmit}\n      onCancel={onCancel}\n      loading={isLoading}\n    />\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-form-validation",children:"\ud83d\udd0d Form Validation"}),"\n",(0,o.jsx)(n.h3,{id:"1-schema-validation-with-zod",children:"1. Schema Validation with Zod"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/lib/validations/user.ts\nimport { z } from 'zod';\n\nexport const userSchema = z.object({\n  name: z\n    .string()\n    .min(1, 'Name is required')\n    .min(2, 'Name must be at least 2 characters')\n    .max(50, 'Name must be less than 50 characters'),\n  \n  email: z\n    .string()\n    .min(1, 'Email is required')\n    .email('Invalid email address')\n    .refine((email) => email.includes('@'), 'Email must contain @'),\n  \n  role: z.enum(['User', 'Admin', 'Manager'], {\n    required_error: 'Please select a role',\n  }),\n  \n  department: z\n    .string()\n    .optional()\n    .refine((dept) => !dept || dept.length >= 2, 'Department must be at least 2 characters'),\n  \n  password: z\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, 'Password must contain uppercase, lowercase, and number'),\n  \n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport type UserFormData = z.infer<typeof userSchema>;\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-custom-validation",children:"2. Custom Validation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Custom validation functions\nexport const validateUniqueEmail = async (email: string, excludeId?: string) => {\n  try {\n    const response = await userService.checkEmailExists(email, excludeId);\n    return response.exists ? 'Email already exists' : true;\n  } catch (error) {\n    return 'Unable to validate email';\n  }\n};\n\nexport const validatePasswordStrength = (password: string) => {\n  const hasUpperCase = /[A-Z]/.test(password);\n  const hasLowerCase = /[a-z]/.test(password);\n  const hasNumbers = /\\d/.test(password);\n  const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(password);\n\n  if (!hasUpperCase) return 'Password must contain uppercase letter';\n  if (!hasLowerCase) return 'Password must contain lowercase letter';\n  if (!hasNumbers) return 'Password must contain number';\n  if (!hasSpecialChar) return 'Password must contain special character';\n\n  return true;\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-async-validation",children:"3. Async Validation"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// Form with async validation\nexport const UserFormWithAsyncValidation: React.FC = () => {\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userSchema),\n    mode: \'onBlur\', // Validate on blur for better UX\n  });\n\n  const validateEmail = useCallback(\n    debounce(async (email: string) => {\n      if (!email) return true;\n      \n      const result = await validateUniqueEmail(email);\n      return result === true ? true : result;\n    }, 500),\n    []\n  );\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)}>\n        <FormField\n          control={form.control}\n          name="email"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email</FormLabel>\n              <FormControl>\n                <Input\n                  type="email"\n                  placeholder="Enter email"\n                  {...field}\n                  onBlur={async (e) => {\n                    field.onBlur();\n                    const isValid = await validateEmail(e.target.value);\n                    if (isValid !== true) {\n                      form.setError(\'email\', { message: isValid });\n                    }\n                  }}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n      </form>\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-form-components",children:"\ud83d\udcdd Form Components"}),"\n",(0,o.jsx)(n.h3,{id:"1-form-field-components",children:"1. Form Field Components"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/forms/FormField.tsx\nimport React from 'react';\nimport { Controller, Control, FieldPath, FieldValues } from 'react-hook-form';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\n\ninterface FormFieldProps<T extends FieldValues> {\n  control: Control<T>;\n  name: FieldPath<T>;\n  label: string;\n  placeholder?: string;\n  type?: 'text' | 'email' | 'password' | 'number' | 'tel' | 'url';\n  required?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const FormFieldComponent = <T extends FieldValues>({\n  control,\n  name,\n  label,\n  placeholder,\n  type = 'text',\n  required = false,\n  disabled = false,\n  className,\n}: FormFieldProps<T>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field, fieldState }) => (\n        <FormItem className={className}>\n          <FormLabel>\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </FormLabel>\n          <FormControl>\n            <Input\n              type={type}\n              placeholder={placeholder}\n              disabled={disabled}\n              {...field}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-form-select-component",children:"2. Form Select Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/forms/FormSelect.tsx\nimport React from 'react';\nimport { Controller, Control, FieldPath, FieldValues } from 'react-hook-form';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ninterface Option {\n  value: string;\n  label: string;\n}\n\ninterface FormSelectProps<T extends FieldValues> {\n  control: Control<T>;\n  name: FieldPath<T>;\n  label: string;\n  options: Option[];\n  placeholder?: string;\n  required?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const FormSelect = <T extends FieldValues>({\n  control,\n  name,\n  label,\n  options,\n  placeholder = 'Select an option',\n  required = false,\n  disabled = false,\n  className,\n}: FormSelectProps<T>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          <FormLabel>\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </FormLabel>\n          <Select onValueChange={field.onChange} defaultValue={field.value} disabled={disabled}>\n            <FormControl>\n              <SelectTrigger>\n                <SelectValue placeholder={placeholder} />\n              </SelectTrigger>\n            </FormControl>\n            <SelectContent>\n              {options.map((option) => (\n                <SelectItem key={option.value} value={option.value}>\n                  {option.label}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-form-textarea-component",children:"3. Form Textarea Component"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/forms/FormTextarea.tsx\nimport React from 'react';\nimport { Controller, Control, FieldPath, FieldValues } from 'react-hook-form';\nimport { FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Textarea } from '@/components/ui/textarea';\n\ninterface FormTextareaProps<T extends FieldValues> {\n  control: Control<T>;\n  name: FieldPath<T>;\n  label: string;\n  placeholder?: string;\n  rows?: number;\n  required?: boolean;\n  disabled?: boolean;\n  className?: string;\n}\n\nexport const FormTextarea = <T extends FieldValues>({\n  control,\n  name,\n  label,\n  placeholder,\n  rows = 4,\n  required = false,\n  disabled = false,\n  className,\n}: FormTextareaProps<T>) => {\n  return (\n    <FormField\n      control={control}\n      name={name}\n      render={({ field }) => (\n        <FormItem className={className}>\n          <FormLabel>\n            {label}\n            {required && <span className=\"text-red-500 ml-1\">*</span>}\n          </FormLabel>\n          <FormControl>\n            <Textarea\n              placeholder={placeholder}\n              rows={rows}\n              disabled={disabled}\n              {...field}\n            />\n          </FormControl>\n          <FormMessage />\n        </FormItem>\n      )}\n    />\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-dynamic-forms",children:"\ud83d\udd04 Dynamic Forms"}),"\n",(0,o.jsx)(n.h3,{id:"1-dynamic-form-builder",children:"1. Dynamic Form Builder"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// src/components/forms/DynamicForm.tsx\nimport React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { FormFieldComponent } from './FormField';\nimport { FormSelect } from './FormSelect';\nimport { FormTextarea } from './FormTextarea';\n\ninterface FieldConfig {\n  name: string;\n  label: string;\n  type: 'text' | 'email' | 'password' | 'number' | 'select' | 'textarea';\n  required?: boolean;\n  options?: { value: string; label: string }[];\n  validation?: any;\n}\n\ninterface DynamicFormProps {\n  fields: FieldConfig[];\n  onSubmit: (data: any) => void;\n  defaultValues?: any;\n  loading?: boolean;\n}\n\nexport const DynamicForm: React.FC<DynamicFormProps> = ({\n  fields,\n  onSubmit,\n  defaultValues = {},\n  loading = false,\n}) => {\n  const form = useForm({\n    defaultValues,\n  });\n\n  const renderField = (field: FieldConfig) => {\n    const commonProps = {\n      control: form.control,\n      name: field.name as any,\n      label: field.label,\n      required: field.required,\n      disabled: loading,\n    };\n\n    switch (field.type) {\n      case 'select':\n        return (\n          <FormSelect\n            {...commonProps}\n            options={field.options || []}\n            placeholder={`Select ${field.label.toLowerCase()}`}\n          />\n        );\n      case 'textarea':\n        return (\n          <FormTextarea\n            {...commonProps}\n            placeholder={`Enter ${field.label.toLowerCase()}`}\n          />\n        );\n      default:\n        return (\n          <FormFieldComponent\n            {...commonProps}\n            type={field.type}\n            placeholder={`Enter ${field.label.toLowerCase()}`}\n          />\n        );\n    }\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n      {fields.map((field) => (\n        <div key={field.name}>\n          {renderField(field)}\n        </div>\n      ))}\n      \n      <div className=\"flex justify-end\">\n        <Button type=\"submit\" disabled={loading}>\n          {loading ? 'Submitting...' : 'Submit'}\n        </Button>\n      </div>\n    </form>\n  );\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-multi-step-form",children:"2. Multi-step Form"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:'// src/components/forms/MultiStepForm.tsx\nimport React, { useState } from \'react\';\nimport { useForm } from \'react-hook-form\';\nimport { Button } from \'@/components/ui/button\';\nimport { Progress } from \'@/components/ui/progress\';\n\ninterface Step {\n  title: string;\n  fields: string[];\n  component: React.ComponentType<any>;\n}\n\ninterface MultiStepFormProps {\n  steps: Step[];\n  onSubmit: (data: any) => void;\n  defaultValues?: any;\n}\n\nexport const MultiStepForm: React.FC<MultiStepFormProps> = ({\n  steps,\n  onSubmit,\n  defaultValues = {},\n}) => {\n  const [currentStep, setCurrentStep] = useState(0);\n  const form = useForm({ defaultValues });\n\n  const progress = ((currentStep + 1) / steps.length) * 100;\n\n  const nextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const handleSubmit = (data: any) => {\n    if (currentStep === steps.length - 1) {\n      onSubmit(data);\n    } else {\n      nextStep();\n    }\n  };\n\n  const CurrentStepComponent = steps[currentStep].component;\n\n  return (\n    <div className="space-y-6">\n      <div className="space-y-2">\n        <div className="flex justify-between text-sm text-gray-600">\n          <span>Step {currentStep + 1} of {steps.length}</span>\n          <span>{steps[currentStep].title}</span>\n        </div>\n        <Progress value={progress} className="w-full" />\n      </div>\n\n      <CurrentStepComponent\n        form={form}\n        onSubmit={handleSubmit}\n      />\n\n      <div className="flex justify-between">\n        <Button\n          type="button"\n          variant="outline"\n          onClick={prevStep}\n          disabled={currentStep === 0}\n        >\n          Previous\n        </Button>\n        \n        <Button\n          type="button"\n          onClick={form.handleSubmit(handleSubmit)}\n        >\n          {currentStep === steps.length - 1 ? \'Submit\' : \'Next\'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h2,{id:"-testing-forms",children:"\ud83e\uddea Testing Forms"}),"\n",(0,o.jsx)(n.h3,{id:"1-form-testing",children:"1. Form Testing"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// UserForm.test.tsx\nimport { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { describe, it, expect, vi } from 'vitest';\nimport { UserForm } from './UserForm';\n\ndescribe('UserForm', () => {\n  const mockOnSubmit = vi.fn();\n\n  beforeEach(() => {\n    mockOnSubmit.mockClear();\n  });\n\n  it('renders form fields correctly', () => {\n    render(<UserForm onSubmit={mockOnSubmit} />);\n    \n    expect(screen.getByLabelText(/name/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/email/i)).toBeInTheDocument();\n    expect(screen.getByLabelText(/role/i)).toBeInTheDocument();\n  });\n\n  it('validates required fields', async () => {\n    render(<UserForm onSubmit={mockOnSubmit} />);\n    \n    fireEvent.click(screen.getByRole('button', { name: /save user/i }));\n    \n    await waitFor(() => {\n      expect(screen.getByText(/name is required/i)).toBeInTheDocument();\n      expect(screen.getByText(/email is required/i)).toBeInTheDocument();\n    });\n    \n    expect(mockOnSubmit).not.toHaveBeenCalled();\n  });\n\n  it('submits form with valid data', async () => {\n    render(<UserForm onSubmit={mockOnSubmit} />);\n    \n    fireEvent.change(screen.getByLabelText(/name/i), {\n      target: { value: 'John Doe' },\n    });\n    \n    fireEvent.change(screen.getByLabelText(/email/i), {\n      target: { value: 'john@example.com' },\n    });\n    \n    fireEvent.click(screen.getByRole('button', { name: /save user/i }));\n    \n    await waitFor(() => {\n      expect(mockOnSubmit).toHaveBeenCalledWith({\n        name: 'John Doe',\n        email: 'john@example.com',\n        role: 'User',\n        department: '',\n      });\n    });\n  });\n\n  it('shows loading state', () => {\n    render(<UserForm onSubmit={mockOnSubmit} loading={true} />);\n    \n    expect(screen.getByRole('button', { name: /saving/i })).toBeDisabled();\n  });\n});\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-best-practices",children:"\ud83d\udcda Best Practices"}),"\n",(0,o.jsx)(n.h3,{id:"1-form-organization",children:"1. Form Organization"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Organize forms by feature\nforms/\n\u251c\u2500\u2500 user/\n\u2502   \u251c\u2500\u2500 UserForm.tsx\n\u2502   \u251c\u2500\u2500 UserFormWithAPI.tsx\n\u2502   \u2514\u2500\u2500 UserForm.test.tsx\n\u251c\u2500\u2500 product/\n\u2502   \u251c\u2500\u2500 ProductForm.tsx\n\u2502   \u2514\u2500\u2500 ProductForm.test.tsx\n\u2514\u2500\u2500 common/\n    \u251c\u2500\u2500 FormField.tsx\n    \u251c\u2500\u2500 FormSelect.tsx\n    \u2514\u2500\u2500 DynamicForm.tsx\n"})}),"\n",(0,o.jsx)(n.h3,{id:"2-error-handling",children:"2. Error Handling"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Centralized error handling\nexport const handleFormError = (error: any, form: any) => {\n  if (error.response?.data?.errors) {\n    // Handle validation errors from API\n    Object.entries(error.response.data.errors).forEach(([field, message]) => {\n      form.setError(field as any, { message: message as string });\n    });\n  } else {\n    // Handle general errors\n    toast.error('An error occurred. Please try again.');\n  }\n};\n"})}),"\n",(0,o.jsx)(n.h3,{id:"3-form-state-management",children:"3. Form State Management"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-typescript",children:"// Form state management with React Query\nexport const useFormWithAPI = <T>({\n  queryKey,\n  mutationFn,\n  onSuccess,\n  onError,\n}: UseFormWithAPIOptions<T>) => {\n  const queryClient = useQueryClient();\n  \n  const mutation = useMutation({\n    mutationFn,\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey });\n      onSuccess?.(data);\n    },\n    onError,\n  });\n\n  return {\n    mutation,\n    isLoading: mutation.isPending,\n    error: mutation.error,\n  };\n};\n"})}),"\n",(0,o.jsx)(n.h2,{id:"-related-documentation",children:"\ud83d\udcda Related Documentation"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/components/custom-components",children:"Custom Components"})})," - Building custom form components"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/fundamentals/api-integration",children:"API Integration"})})," - Form submission to APIs"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/validation",children:"Validation"})})," - Advanced validation techniques"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.a,{href:"/docs/development/testing",children:"Testing Guide"})})," - Testing form components"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.p,{children:"Form components in ABP React provide a robust foundation for handling user input and data submission. By following these patterns and best practices, you can create maintainable, accessible, and user-friendly forms that integrate seamlessly with the ABP Framework."})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>i});var t=r(6540);const o={},a=t.createContext(o);function s(e){const n=t.useContext(a);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);