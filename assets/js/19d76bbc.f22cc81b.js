"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[1459],{1545:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"components/role-management","title":"Role Management","description":"This guide covers role management in ABP React applications, including role-based access control (RBAC), role management components, and integration with ABP Framework permissions.","source":"@site/docs/components/role-management.md","sourceDirName":"components","slug":"/components/role-management","permalink":"/abp-react/docs/components/role-management","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/components/role-management.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Form Components","permalink":"/abp-react/docs/components/forms"},"next":{"title":"Development Setup","permalink":"/abp-react/docs/development/setup"}}');var r=s(4848),o=s(8453);const t={},l="Role Management",a={},c=[{value:"Overview",id:"overview",level:2},{value:"Core Concepts",id:"core-concepts",level:2},{value:"Roles vs Permissions",id:"roles-vs-permissions",level:3},{value:"ABP Framework Integration",id:"abp-framework-integration",level:3},{value:"Role Management Components",id:"role-management-components",level:2},{value:"Role List Component",id:"role-list-component",level:3},{value:"Role Form Component",id:"role-form-component",level:3},{value:"Permission Management Component",id:"permission-management-component",level:3},{value:"Role Management Hooks",id:"role-management-hooks",level:2},{value:"useRoles Hook",id:"useroles-hook",level:3},{value:"useRolePermissions Hook",id:"userolepermissions-hook",level:3},{value:"Role-Based UI Components",id:"role-based-ui-components",level:2},{value:"Conditional Rendering",id:"conditional-rendering",level:3},{value:"Protected Routes",id:"protected-routes",level:3},{value:"Role-Based Navigation",id:"role-based-navigation",level:3},{value:"Advanced Role Management",id:"advanced-role-management",level:2},{value:"Role Hierarchy",id:"role-hierarchy",level:3},{value:"Dynamic Role Assignment",id:"dynamic-role-assignment",level:3},{value:"Testing Role Management",id:"testing-role-management",level:2},{value:"Unit Tests",id:"unit-tests",level:3},{value:"Integration Tests",id:"integration-tests",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Role Design",id:"1-role-design",level:3},{value:"2. Permission Management",id:"2-permission-management",level:3},{value:"3. Security",id:"3-security",level:3},{value:"4. Performance",id:"4-performance",level:3},{value:"5. User Experience",id:"5-user-experience",level:3},{value:"Conclusion",id:"conclusion",level:2}];function m(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"role-management",children:"Role Management"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers role management in ABP React applications, including role-based access control (RBAC), role management components, and integration with ABP Framework permissions."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Role management is a crucial aspect of ABP React applications, providing a structured way to organize permissions and control access to different parts of the application. ABP React integrates seamlessly with ABP Framework's role management system."}),"\n",(0,r.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,r.jsx)(n.h3,{id:"roles-vs-permissions",children:"Roles vs Permissions"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Roles"}),": Collections of permissions that can be assigned to users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Permissions"}),": Granular access rights to specific features or resources"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Role Hierarchy"}),": Roles can inherit permissions from other roles"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Dynamic Permissions"}),": Permissions can be granted or revoked at runtime"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"abp-framework-integration",children:"ABP Framework Integration"}),"\n",(0,r.jsx)(n.p,{children:"ABP React leverages ABP Framework's role management system:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface Role {\n  id: string;\n  name: string;\n  displayName: string;\n  description?: string;\n  isDefault: boolean;\n  isStatic: boolean;\n  isPublic: boolean;\n  permissions: Permission[];\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"role-management-components",children:"Role Management Components"}),"\n",(0,r.jsx)(n.h3,{id:"role-list-component",children:"Role List Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import React, { useState } from 'react';\nimport { useRoles } from '@/hooks/useRoles';\nimport { Button } from '@/components/ui/button';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\n\nconst RoleList: React.FC = () => {\n  const { roles, isLoading, error } = useRoles();\n  const [selectedRole, setSelectedRole] = useState<Role | null>(null);\n\n  if (isLoading) return <div>Loading roles...</div>;\n  if (error) return <div>Error loading roles: {error.message}</div>;\n\n  return (\n    <div>\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-2xl font-bold\">Roles</h2>\n        <Button onClick={() => setSelectedRole({} as Role)}>\n          Create New Role\n        </Button>\n      </div>\n\n      <Table>\n        <TableHeader>\n          <TableRow>\n            <TableHead>Name</TableHead>\n            <TableHead>Display Name</TableHead>\n            <TableHead>Description</TableHead>\n            <TableHead>Default</TableHead>\n            <TableHead>Actions</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {roles.map((role) => (\n            <TableRow key={role.id}>\n              <TableCell>{role.name}</TableCell>\n              <TableCell>{role.displayName}</TableCell>\n              <TableCell>{role.description}</TableCell>\n              <TableCell>{role.isDefault ? 'Yes' : 'No'}</TableCell>\n              <TableCell>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={() => setSelectedRole(role)}\n                >\n                  Edit\n                </Button>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"role-form-component",children:"Role Form Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { usePermissions } from '@/hooks/usePermissions';\nimport { useCreateRole, useUpdateRole } from '@/hooks/useRoles';\n\nconst roleSchema = z.object({\n  name: z.string().min(1, 'Name is required'),\n  displayName: z.string().min(1, 'Display name is required'),\n  description: z.string().optional(),\n  isDefault: z.boolean(),\n  isPublic: z.boolean(),\n  permissions: z.array(z.string()),\n});\n\ntype RoleFormData = z.infer<typeof roleSchema>;\n\ninterface RoleFormProps {\n  role?: Role;\n  onSuccess?: () => void;\n  onCancel?: () => void;\n}\n\nconst RoleForm: React.FC<RoleFormProps> = ({ role, onSuccess, onCancel }) => {\n  const { permissions } = usePermissions();\n  const createRole = useCreateRole();\n  const updateRole = useUpdateRole();\n\n  const form = useForm<RoleFormData>({\n    resolver: zodResolver(roleSchema),\n    defaultValues: {\n      name: role?.name || '',\n      displayName: role?.displayName || '',\n      description: role?.description || '',\n      isDefault: role?.isDefault || false,\n      isPublic: role?.isPublic || false,\n      permissions: role?.permissions.map(p => p.name) || [],\n    },\n  });\n\n  const onSubmit = async (data: RoleFormData) => {\n    try {\n      if (role) {\n        await updateRole.mutateAsync({ id: role.id, ...data });\n      } else {\n        await createRole.mutateAsync(data);\n      }\n      onSuccess?.();\n    } catch (error) {\n      console.error('Error saving role:', error);\n    }\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n      <div>\n        <label htmlFor=\"name\">Name</label>\n        <Input\n          id=\"name\"\n          {...form.register('name')}\n          placeholder=\"Enter role name\"\n        />\n        {form.formState.errors.name && (\n          <span className=\"text-red-500\">{form.formState.errors.name.message}</span>\n        )}\n      </div>\n\n      <div>\n        <label htmlFor=\"displayName\">Display Name</label>\n        <Input\n          id=\"displayName\"\n          {...form.register('displayName')}\n          placeholder=\"Enter display name\"\n        />\n        {form.formState.errors.displayName && (\n          <span className=\"text-red-500\">{form.formState.errors.displayName.message}</span>\n        )}\n      </div>\n\n      <div>\n        <label htmlFor=\"description\">Description</label>\n        <Textarea\n          id=\"description\"\n          {...form.register('description')}\n          placeholder=\"Enter role description\"\n        />\n      </div>\n\n      <div className=\"flex space-x-4\">\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"isDefault\"\n            {...form.register('isDefault')}\n          />\n          <label htmlFor=\"isDefault\">Default Role</label>\n        </div>\n\n        <div className=\"flex items-center space-x-2\">\n          <Checkbox\n            id=\"isPublic\"\n            {...form.register('isPublic')}\n          />\n          <label htmlFor=\"isPublic\">Public Role</label>\n        </div>\n      </div>\n\n      <div>\n        <label>Permissions</label>\n        <div className=\"grid grid-cols-2 gap-2 mt-2\">\n          {permissions.map((permission) => (\n            <div key={permission.name} className=\"flex items-center space-x-2\">\n              <Checkbox\n                id={permission.name}\n                checked={form.watch('permissions').includes(permission.name)}\n                onCheckedChange={(checked) => {\n                  const currentPermissions = form.watch('permissions');\n                  if (checked) {\n                    form.setValue('permissions', [...currentPermissions, permission.name]);\n                  } else {\n                    form.setValue('permissions', currentPermissions.filter(p => p !== permission.name));\n                  }\n                }}\n              />\n              <label htmlFor={permission.name}>{permission.displayName}</label>\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <div className=\"flex space-x-2\">\n        <Button type=\"submit\" disabled={createRole.isLoading || updateRole.isLoading}>\n          {role ? 'Update Role' : 'Create Role'}\n        </Button>\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n          Cancel\n        </Button>\n      </div>\n    </form>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"permission-management-component",children:"Permission Management Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import React from 'react';\nimport { usePermissions } from '@/hooks/usePermissions';\nimport { useUpdateRolePermissions } from '@/hooks/useRoles';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Button } from '@/components/ui/button';\n\ninterface PermissionManagementProps {\n  roleId: string;\n  currentPermissions: string[];\n  onPermissionsUpdated?: () => void;\n}\n\nconst PermissionManagement: React.FC<PermissionManagementProps> = ({\n  roleId,\n  currentPermissions,\n  onPermissionsUpdated,\n}) => {\n  const { permissions } = usePermissions();\n  const updatePermissions = useUpdateRolePermissions();\n\n  const handlePermissionToggle = async (permissionName: string, checked: boolean) => {\n    try {\n      const newPermissions = checked\n        ? [...currentPermissions, permissionName]\n        : currentPermissions.filter(p => p !== permissionName);\n\n      await updatePermissions.mutateAsync({\n        roleId,\n        permissions: newPermissions,\n      });\n\n      onPermissionsUpdated?.();\n    } catch (error) {\n      console.error('Error updating permissions:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h3 className=\"text-lg font-semibold mb-4\">Manage Permissions</h3>\n      <div className=\"grid grid-cols-2 gap-4\">\n        {permissions.map((permission) => (\n          <div key={permission.name} className=\"flex items-center space-x-2\">\n            <Checkbox\n              id={permission.name}\n              checked={currentPermissions.includes(permission.name)}\n              onCheckedChange={(checked) => handlePermissionToggle(permission.name, checked)}\n            />\n            <label htmlFor={permission.name} className=\"text-sm\">\n              {permission.displayName}\n            </label>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"role-management-hooks",children:"Role Management Hooks"}),"\n",(0,r.jsx)(n.h3,{id:"useroles-hook",children:"useRoles Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { useApi } from '@/hooks/useApi';\n\nexport const useRoles = () => {\n  const { get, post, put, delete: del } = useApi();\n\n  const {\n    data: roles,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: ['roles'],\n    queryFn: () => get('/api/identity/roles'),\n  });\n\n  return { roles, isLoading, error };\n};\n\nexport const useCreateRole = () => {\n  const { post } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (roleData: CreateRoleDto) => post('/api/identity/roles', roleData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['roles'] });\n    },\n  });\n};\n\nexport const useUpdateRole = () => {\n  const { put } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: ({ id, ...roleData }: UpdateRoleDto) => \n      put(`/api/identity/roles/${id}`, roleData),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['roles'] });\n    },\n  });\n};\n\nexport const useDeleteRole = () => {\n  const { delete: del } = useApi();\n  const queryClient = useQueryClient();\n\n  return useMutation({\n    mutationFn: (id: string) => del(`/api/identity/roles/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['roles'] });\n    },\n  });\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"userolepermissions-hook",children:"useRolePermissions Hook"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"export const useRolePermissions = (roleId: string) => {\n  const { get, put } = useApi();\n  const queryClient = useQueryClient();\n\n  const {\n    data: permissions,\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: ['role-permissions', roleId],\n    queryFn: () => get(`/api/identity/roles/${roleId}/permissions`),\n    enabled: !!roleId,\n  });\n\n  const updatePermissions = useMutation({\n    mutationFn: ({ roleId, permissions }: { roleId: string; permissions: string[] }) =>\n      put(`/api/identity/roles/${roleId}/permissions`, { permissions }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['role-permissions', roleId] });\n      queryClient.invalidateQueries({ queryKey: ['roles'] });\n    },\n  });\n\n  return { permissions, isLoading, error, updatePermissions };\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"role-based-ui-components",children:"Role-Based UI Components"}),"\n",(0,r.jsx)(n.h3,{id:"conditional-rendering",children:"Conditional Rendering"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { usePermission } from '@/hooks/usePermission';\n\nconst ConditionalComponent: React.FC = () => {\n  const canEditUsers = usePermission('AbpIdentity.Users');\n  const canDeleteUsers = usePermission('AbpIdentity.Users.Delete');\n\n  return (\n    <div>\n      {canEditUsers && (\n        <Button>Edit User</Button>\n      )}\n      {canDeleteUsers && (\n        <Button variant=\"destructive\">Delete User</Button>\n      )}\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"protected-routes",children:"Protected Routes"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { usePermission } from '@/hooks/usePermission';\nimport { Navigate } from 'react-router-dom';\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  permission: string;\n  fallback?: React.ReactNode;\n}\n\nconst ProtectedRoute: React.FC<ProtectedRouteProps> = ({\n  children,\n  permission,\n  fallback,\n}) => {\n  const hasPermission = usePermission(permission);\n\n  if (!hasPermission) {\n    return fallback || <Navigate to=\"/unauthorized\" replace />;\n  }\n\n  return <>{children}</>;\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"role-based-navigation",children:"Role-Based Navigation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { usePermissions } from '@/hooks/usePermissions';\n\nconst Navigation: React.FC = () => {\n  const { permissions } = usePermissions();\n\n  const menuItems = [\n    {\n      label: 'Dashboard',\n      path: '/dashboard',\n      permission: null, // No permission required\n    },\n    {\n      label: 'Users',\n      path: '/users',\n      permission: 'AbpIdentity.Users',\n    },\n    {\n      label: 'Roles',\n      path: '/roles',\n      permission: 'AbpIdentity.Roles',\n    },\n    {\n      label: 'Settings',\n      path: '/settings',\n      permission: 'AbpSettingManagement.Settings',\n    },\n  ];\n\n  const visibleItems = menuItems.filter(item => \n    !item.permission || permissions.some(p => p.name === item.permission)\n  );\n\n  return (\n    <nav>\n      {visibleItems.map((item) => (\n        <Link key={item.path} to={item.path}>\n          {item.label}\n        </Link>\n      ))}\n    </nav>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-role-management",children:"Advanced Role Management"}),"\n",(0,r.jsx)(n.h3,{id:"role-hierarchy",children:"Role Hierarchy"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface RoleHierarchy {\n  parentRole: string;\n  childRoles: string[];\n}\n\nconst RoleHierarchyComponent: React.FC = () => {\n  const { roles } = useRoles();\n  const [hierarchy, setHierarchy] = useState<RoleHierarchy[]>([]);\n\n  const addChildRole = (parentRole: string, childRole: string) => {\n    setHierarchy(prev => {\n      const existing = prev.find(h => h.parentRole === parentRole);\n      if (existing) {\n        return prev.map(h => \n          h.parentRole === parentRole \n            ? { ...h, childRoles: [...h.childRoles, childRole] }\n            : h\n        );\n      }\n      return [...prev, { parentRole, childRoles: [childRole] }];\n    });\n  };\n\n  return (\n    <div>\n      <h3>Role Hierarchy</h3>\n      {hierarchy.map((h) => (\n        <div key={h.parentRole}>\n          <strong>{h.parentRole}</strong>\n          <ul>\n            {h.childRoles.map((child) => (\n              <li key={child}>{child}</li>\n            ))}\n          </ul>\n        </div>\n      ))}\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"dynamic-role-assignment",children:"Dynamic Role Assignment"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const DynamicRoleAssignment: React.FC = () => {\n  const { roles } = useRoles();\n  const { users } = useUsers();\n  const assignRole = useAssignRole();\n\n  const handleRoleAssignment = async (userId: string, roleId: string, assign: boolean) => {\n    try {\n      if (assign) {\n        await assignRole.mutateAsync({ userId, roleId });\n      } else {\n        await unassignRole.mutateAsync({ userId, roleId });\n      }\n    } catch (error) {\n      console.error('Error assigning role:', error);\n    }\n  };\n\n  return (\n    <div>\n      <h3>Dynamic Role Assignment</h3>\n      {users.map((user) => (\n        <div key={user.id}>\n          <h4>{user.userName}</h4>\n          {roles.map((role) => (\n            <div key={role.id}>\n              <Checkbox\n                checked={user.roles?.some(r => r.id === role.id)}\n                onCheckedChange={(checked) => \n                  handleRoleAssignment(user.id, role.id, checked)\n                }\n              />\n              <label>{role.displayName}</label>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-role-management",children:"Testing Role Management"}),"\n",(0,r.jsx)(n.h3,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect, vi } from 'vitest';\nimport { render, screen, fireEvent } from '@testing-library/react';\nimport { RoleList } from './RoleList';\n\ndescribe('RoleList', () => {\n  it('should display roles', () => {\n    const mockRoles = [\n      { id: '1', name: 'admin', displayName: 'Administrator' },\n      { id: '2', name: 'user', displayName: 'User' },\n    ];\n\n    render(<RoleList roles={mockRoles} />);\n\n    expect(screen.getByText('Administrator')).toBeInTheDocument();\n    expect(screen.getByText('User')).toBeInTheDocument();\n  });\n\n  it('should handle role creation', () => {\n    const onCreateRole = vi.fn();\n    render(<RoleList onCreateRole={onCreateRole} />);\n\n    fireEvent.click(screen.getByText('Create New Role'));\n    expect(onCreateRole).toHaveBeenCalled();\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { RoleForm } from './RoleForm';\n\ndescribe('RoleForm Integration', () => {\n  it('should create a new role', async () => {\n    const onSuccess = vi.fn();\n    render(<RoleForm onSuccess={onSuccess} />);\n\n    fireEvent.change(screen.getByLabelText('Name'), {\n      target: { value: 'test-role' },\n    });\n    fireEvent.change(screen.getByLabelText('Display Name'), {\n      target: { value: 'Test Role' },\n    });\n\n    fireEvent.click(screen.getByText('Create Role'));\n\n    await waitFor(() => {\n      expect(onSuccess).toHaveBeenCalled();\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-role-design",children:"1. Role Design"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use descriptive role names"}),"\n",(0,r.jsx)(n.li,{children:"Keep roles focused and specific"}),"\n",(0,r.jsx)(n.li,{children:"Avoid role proliferation"}),"\n",(0,r.jsx)(n.li,{children:"Document role purposes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-permission-management",children:"2. Permission Management"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Grant minimum required permissions"}),"\n",(0,r.jsx)(n.li,{children:"Regular permission audits"}),"\n",(0,r.jsx)(n.li,{children:"Use permission groups"}),"\n",(0,r.jsx)(n.li,{children:"Implement permission inheritance"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-security",children:"3. Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Validate permissions server-side"}),"\n",(0,r.jsx)(n.li,{children:"Use ABP Framework's built-in security"}),"\n",(0,r.jsx)(n.li,{children:"Implement proper error handling"}),"\n",(0,r.jsx)(n.li,{children:"Log permission changes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-performance",children:"4. Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Cache role and permission data"}),"\n",(0,r.jsx)(n.li,{children:"Optimize permission checks"}),"\n",(0,r.jsx)(n.li,{children:"Use lazy loading for large role lists"}),"\n",(0,r.jsx)(n.li,{children:"Implement efficient permission queries"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-user-experience",children:"5. User Experience"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provide clear permission feedback"}),"\n",(0,r.jsx)(n.li,{children:"Show permission requirements"}),"\n",(0,r.jsx)(n.li,{children:"Implement progressive disclosure"}),"\n",(0,r.jsx)(n.li,{children:"Use intuitive permission names"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Role management is essential for building secure and scalable ABP React applications. By leveraging ABP Framework's role management system and implementing proper UI components, you can create a robust role-based access control system."}),"\n",(0,r.jsx)(n.p,{children:"Key takeaways:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use ABP Framework's role management APIs"}),"\n",(0,r.jsx)(n.li,{children:"Implement proper permission checking"}),"\n",(0,r.jsx)(n.li,{children:"Create reusable role management components"}),"\n",(0,r.jsx)(n.li,{children:"Follow security best practices"}),"\n",(0,r.jsx)(n.li,{children:"Test role management thoroughly"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more information on permissions and access control, see the ",(0,r.jsx)(n.a,{href:"/abp-react/docs/fundamentals/permissions",children:"Permissions"})," documentation."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>l});var i=s(6540);const r={},o=i.createContext(r);function t(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);