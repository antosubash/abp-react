"use strict";(self.webpackChunkabp_react=self.webpackChunkabp_react||[]).push([[7152],{7075:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"development/validation","title":"Validation","description":"This guide covers validation strategies and best practices for ABP React applications, including form validation, schema validation, and server-side validation integration.","source":"@site/docs/development/validation.md","sourceDirName":"development","slug":"/development/validation","permalink":"/abp-react/docs/development/validation","draft":false,"unlisted":false,"editUrl":"https://github.com/antosubash/abp-react/tree/main/docs/docs/development/validation.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Performance Optimization","permalink":"/abp-react/docs/development/performance"}}');var r=i(4848),t=i(8453);const s={},l="Validation",o={},d=[{value:"Overview",id:"overview",level:2},{value:"Schema Validation with Zod",id:"schema-validation-with-zod",level:2},{value:"Basic Schema Definition",id:"basic-schema-definition",level:3},{value:"Complex Validation Rules",id:"complex-validation-rules",level:3},{value:"Conditional Validation",id:"conditional-validation",level:3},{value:"Form Validation Integration",id:"form-validation-integration",level:2},{value:"React Hook Form with Zod",id:"react-hook-form-with-zod",level:3},{value:"Custom Validation Hooks",id:"custom-validation-hooks",level:3},{value:"ABP Framework Validation Integration",id:"abp-framework-validation-integration",level:2},{value:"Server-Side Validation",id:"server-side-validation",level:3},{value:"ABP Validation Error Handling",id:"abp-validation-error-handling",level:3},{value:"Real-Time Validation",id:"real-time-validation",level:2},{value:"Debounced Validation",id:"debounced-validation",level:3},{value:"Async Validation",id:"async-validation",level:3},{value:"Validation Components",id:"validation-components",level:2},{value:"Validation Message Component",id:"validation-message-component",level:3},{value:"Validated Input Component",id:"validated-input-component",level:3},{value:"Testing Validation",id:"testing-validation",level:2},{value:"Unit Testing Schemas",id:"unit-testing-schemas",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Progressive Validation",id:"1-progressive-validation",level:3},{value:"2. User Experience",id:"2-user-experience",level:3},{value:"3. Performance",id:"3-performance",level:3},{value:"4. Security",id:"4-security",level:3},{value:"5. Accessibility",id:"5-accessibility",level:3},{value:"Common Validation Patterns",id:"common-validation-patterns",level:2},{value:"Email Validation",id:"email-validation",level:3},{value:"Password Validation",id:"password-validation",level:3},{value:"Phone Number Validation",id:"phone-number-validation",level:3},{value:"URL Validation",id:"url-validation",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Validation Error Types",id:"validation-error-types",level:3},{value:"Error Boundary for Validation",id:"error-boundary-for-validation",level:3},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"validation",children:"Validation"})}),"\n",(0,r.jsx)(n.p,{children:"This guide covers validation strategies and best practices for ABP React applications, including form validation, schema validation, and server-side validation integration."}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Validation is crucial for ensuring data integrity and providing a good user experience. ABP React provides multiple layers of validation:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Client-side validation"}),": Immediate feedback for users"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Schema validation"}),": Type-safe validation with Zod"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Server-side validation"}),": ABP Framework validation integration"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Real-time validation"}),": Dynamic validation based on user input"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"schema-validation-with-zod",children:"Schema Validation with Zod"}),"\n",(0,r.jsx)(n.p,{children:"Zod is the recommended schema validation library for ABP React applications."}),"\n",(0,r.jsx)(n.h3,{id:"basic-schema-definition",children:"Basic Schema Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { z } from 'zod';\n\nconst userSchema = z.object({\n  username: z.string().min(3).max(50),\n  email: z.string().email(),\n  age: z.number().min(18).max(120),\n  role: z.enum(['admin', 'user', 'moderator']),\n});\n\ntype User = z.infer<typeof userSchema>;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"complex-validation-rules",children:"Complex Validation Rules"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const passwordSchema = z.object({\n  password: z\n    .string()\n    .min(8, 'Password must be at least 8 characters')\n    .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')\n    .regex(/[a-z]/, 'Password must contain at least one lowercase letter')\n    .regex(/[0-9]/, 'Password must contain at least one number'),\n  confirmPassword: z.string(),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"conditional-validation",children:"Conditional Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const conditionalSchema = z.object({\n  type: z.enum(['individual', 'company']),\n  name: z.string(),\n  companyName: z.string().optional(),\n  taxId: z.string().optional(),\n}).refine((data) => {\n  if (data.type === 'company') {\n    return data.companyName && data.taxId;\n  }\n  return true;\n}, {\n  message: 'Company name and tax ID are required for company accounts',\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"form-validation-integration",children:"Form Validation Integration"}),"\n",(0,r.jsx)(n.h3,{id:"react-hook-form-with-zod",children:"React Hook Form with Zod"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\n\nconst UserForm = () => {\n  const form = useForm<User>({\n    resolver: zodResolver(userSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      age: 18,\n      role: 'user',\n    },\n  });\n\n  const onSubmit = (data: User) => {\n    // Handle form submission\n  };\n\n  return (\n    <form onSubmit={form.handleSubmit(onSubmit)}>\n      <input {...form.register('username')} />\n      {form.formState.errors.username && (\n        <span>{form.formState.errors.username.message}</span>\n      )}\n      {/* Other form fields */}\n    </form>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"custom-validation-hooks",children:"Custom Validation Hooks"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useState, useEffect } from 'react';\n\nexport const useFieldValidation = (\n  value: string,\n  validationFn: (value: string) => Promise<boolean>,\n  delay: number = 500\n) => {\n  const [isValid, setIsValid] = useState<boolean | null>(null);\n  const [isValidating, setIsValidating] = useState(false);\n\n  useEffect(() => {\n    const timer = setTimeout(async () => {\n      if (value) {\n        setIsValidating(true);\n        try {\n          const result = await validationFn(value);\n          setIsValid(result);\n        } catch (error) {\n          setIsValid(false);\n        } finally {\n          setIsValidating(false);\n        }\n      } else {\n        setIsValid(null);\n      }\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [value, validationFn, delay]);\n\n  return { isValid, isValidating };\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"abp-framework-validation-integration",children:"ABP Framework Validation Integration"}),"\n",(0,r.jsx)(n.h3,{id:"server-side-validation",children:"Server-Side Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useApi } from '@/hooks/useApi';\n\nconst useServerValidation = () => {\n  const { post } = useApi();\n\n  const validateField = async (field: string, value: any) => {\n    try {\n      const response = await post('/api/validation/field', {\n        field,\n        value,\n      });\n      return response.isValid;\n    } catch (error) {\n      return false;\n    }\n  };\n\n  return { validateField };\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"abp-validation-error-handling",children:"ABP Validation Error Handling"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useForm } from 'react-hook-form';\nimport { useApi } from '@/hooks/useApi';\n\nconst useAbpForm = <T>(schema: z.ZodSchema<T>) => {\n  const { post } = useApi();\n  const form = useForm<T>({\n    resolver: zodResolver(schema),\n  });\n\n  const submitWithAbpValidation = async (data: T) => {\n    try {\n      const response = await post('/api/your-endpoint', data);\n      return response;\n    } catch (error: any) {\n      // Handle ABP validation errors\n      if (error.validationErrors) {\n        error.validationErrors.forEach((validationError: any) => {\n          form.setError(validationError.memberNames[0] as any, {\n            type: 'server',\n            message: validationError.errorMessage,\n          });\n        });\n      }\n      throw error;\n    }\n  };\n\n  return { form, submitWithAbpValidation };\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"real-time-validation",children:"Real-Time Validation"}),"\n",(0,r.jsx)(n.h3,{id:"debounced-validation",children:"Debounced Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { useDebounce } from '@/hooks/useDebounce';\n\nconst useRealTimeValidation = (\n  value: string,\n  validationFn: (value: string) => Promise<boolean>\n) => {\n  const debouncedValue = useDebounce(value, 300);\n  const [validationResult, setValidationResult] = useState<{\n    isValid: boolean;\n    message?: string;\n  } | null>(null);\n\n  useEffect(() => {\n    if (debouncedValue) {\n      validationFn(debouncedValue)\n        .then((isValid) => setValidationResult({ isValid }))\n        .catch((error) => setValidationResult({ isValid: false, message: error.message }));\n    }\n  }, [debouncedValue, validationFn]);\n\n  return validationResult;\n};\n"})}),"\n",(0,r.jsx)(n.h3,{id:"async-validation",children:"Async Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const useAsyncValidation = () => {\n  const validateUsername = async (username: string) => {\n    const response = await fetch(`/api/validation/username?username=${username}`);\n    const result = await response.json();\n    return result.isAvailable;\n  };\n\n  const validateEmail = async (email: string) => {\n    const response = await fetch(`/api/validation/email?email=${email}`);\n    const result = await response.json();\n    return result.isAvailable;\n  };\n\n  return { validateUsername, validateEmail };\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"validation-components",children:"Validation Components"}),"\n",(0,r.jsx)(n.h3,{id:"validation-message-component",children:"Validation Message Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'interface ValidationMessageProps {\n  error?: string;\n  isValid?: boolean;\n  isValidating?: boolean;\n}\n\nconst ValidationMessage: React.FC<ValidationMessageProps> = ({\n  error,\n  isValid,\n  isValidating,\n}) => {\n  if (isValidating) {\n    return <span className="text-blue-500">Validating...</span>;\n  }\n\n  if (error) {\n    return <span className="text-red-500">{error}</span>;\n  }\n\n  if (isValid) {\n    return <span className="text-green-500">\u2713 Valid</span>;\n  }\n\n  return null;\n};\n'})}),"\n",(0,r.jsx)(n.h3,{id:"validated-input-component",children:"Validated Input Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ValidatedInputProps {\n  name: string;\n  label: string;\n  validation?: (value: string) => Promise<boolean>;\n  register: any;\n  errors: any;\n}\n\nconst ValidatedInput: React.FC<ValidatedInputProps> = ({\n  name,\n  label,\n  validation,\n  register,\n  errors,\n}) => {\n  const [value, setValue] = useState('');\n  const validationResult = useRealTimeValidation(value, validation || (() => Promise.resolve(true)));\n\n  return (\n    <div>\n      <label htmlFor={name}>{label}</label>\n      <input\n        {...register(name)}\n        onChange={(e) => setValue(e.target.value)}\n        className={errors[name] ? 'border-red-500' : ''}\n      />\n      <ValidationMessage\n        error={errors[name]?.message}\n        isValid={validationResult?.isValid}\n        isValidating={validationResult === null}\n      />\n    </div>\n  );\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"testing-validation",children:"Testing Validation"}),"\n",(0,r.jsx)(n.h3,{id:"unit-testing-schemas",children:"Unit Testing Schemas"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { describe, it, expect } from 'vitest';\nimport { userSchema } from './schemas';\n\ndescribe('User Schema Validation', () => {\n  it('should validate a valid user', () => {\n    const validUser = {\n      username: 'john_doe',\n      email: 'john@example.com',\n      age: 25,\n      role: 'user',\n    };\n\n    const result = userSchema.safeParse(validUser);\n    expect(result.success).toBe(true);\n  });\n\n  it('should reject invalid email', () => {\n    const invalidUser = {\n      username: 'john_doe',\n      email: 'invalid-email',\n      age: 25,\n      role: 'user',\n    };\n\n    const result = userSchema.safeParse(invalidUser);\n    expect(result.success).toBe(false);\n    expect(result.error?.issues[0].message).toContain('Invalid email');\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"import { render, screen, fireEvent, waitFor } from '@testing-library/react';\nimport { UserForm } from './UserForm';\n\ndescribe('UserForm Validation', () => {\n  it('should show validation errors for invalid input', async () => {\n    render(<UserForm />);\n\n    const emailInput = screen.getByLabelText('Email');\n    fireEvent.change(emailInput, { target: { value: 'invalid-email' } });\n    fireEvent.blur(emailInput);\n\n    await waitFor(() => {\n      expect(screen.getByText(/Invalid email/)).toBeInTheDocument();\n    });\n  });\n\n  it('should validate in real-time', async () => {\n    render(<UserForm />);\n\n    const usernameInput = screen.getByLabelText('Username');\n    fireEvent.change(usernameInput, { target: { value: 'ab' } });\n\n    await waitFor(() => {\n      expect(screen.getByText(/at least 3 characters/)).toBeInTheDocument();\n    });\n  });\n});\n"})}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsx)(n.h3,{id:"1-progressive-validation",children:"1. Progressive Validation"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Start with basic client-side validation"}),"\n",(0,r.jsx)(n.li,{children:"Add real-time validation for critical fields"}),"\n",(0,r.jsx)(n.li,{children:"Implement server-side validation for security"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"2-user-experience",children:"2. User Experience"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Provide immediate feedback"}),"\n",(0,r.jsx)(n.li,{children:"Use clear, actionable error messages"}),"\n",(0,r.jsx)(n.li,{children:"Show validation state visually"}),"\n",(0,r.jsx)(n.li,{children:"Debounce real-time validation"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"3-performance",children:"3. Performance"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Debounce async validation calls"}),"\n",(0,r.jsx)(n.li,{children:"Cache validation results when appropriate"}),"\n",(0,r.jsx)(n.li,{children:"Use optimistic validation for better UX"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"4-security",children:"4. Security"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Never rely solely on client-side validation"}),"\n",(0,r.jsx)(n.li,{children:"Validate on both client and server"}),"\n",(0,r.jsx)(n.li,{children:"Sanitize user input"}),"\n",(0,r.jsx)(n.li,{children:"Use ABP Framework validation attributes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"5-accessibility",children:"5. Accessibility"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Associate error messages with form fields"}),"\n",(0,r.jsx)(n.li,{children:"Use proper ARIA attributes"}),"\n",(0,r.jsx)(n.li,{children:"Provide keyboard navigation support"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"common-validation-patterns",children:"Common Validation Patterns"}),"\n",(0,r.jsx)(n.h3,{id:"email-validation",children:"Email Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const emailSchema = z\n  .string()\n  .email('Please enter a valid email address')\n  .min(1, 'Email is required');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"password-validation",children:"Password Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const passwordSchema = z\n  .string()\n  .min(8, 'Password must be at least 8 characters')\n  .regex(/[A-Z]/, 'Must contain at least one uppercase letter')\n  .regex(/[a-z]/, 'Must contain at least one lowercase letter')\n  .regex(/[0-9]/, 'Must contain at least one number')\n  .regex(/[^A-Za-z0-9]/, 'Must contain at least one special character');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"phone-number-validation",children:"Phone Number Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const phoneSchema = z\n  .string()\n  .regex(/^\\+?[\\d\\s\\-\\(\\)]+$/, 'Please enter a valid phone number')\n  .min(10, 'Phone number must be at least 10 digits');\n"})}),"\n",(0,r.jsx)(n.h3,{id:"url-validation",children:"URL Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const urlSchema = z\n  .string()\n  .url('Please enter a valid URL')\n  .refine((url) => url.startsWith('https://'), {\n    message: 'URL must use HTTPS',\n  });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,r.jsx)(n.h3,{id:"validation-error-types",children:"Validation Error Types"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"interface ValidationError {\n  field: string;\n  message: string;\n  code?: string;\n}\n\ninterface ValidationResult {\n  isValid: boolean;\n  errors: ValidationError[];\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"error-boundary-for-validation",children:"Error Boundary for Validation"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"class ValidationErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    console.error('Validation error:', error, errorInfo);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <div>Something went wrong with validation. Please try again.</div>;\n    }\n\n    return this.props.children;\n  }\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,r.jsx)(n.p,{children:"Effective validation is essential for building robust ABP React applications. By combining client-side validation with server-side validation and providing real-time feedback, you can create a smooth user experience while ensuring data integrity."}),"\n",(0,r.jsx)(n.p,{children:"Remember to:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use Zod for type-safe schema validation"}),"\n",(0,r.jsx)(n.li,{children:"Integrate with ABP Framework validation"}),"\n",(0,r.jsx)(n.li,{children:"Provide clear, actionable error messages"}),"\n",(0,r.jsx)(n.li,{children:"Test validation thoroughly"}),"\n",(0,r.jsx)(n.li,{children:"Follow accessibility best practices"}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["For more information on specific validation scenarios, see the ",(0,r.jsx)(n.a,{href:"/abp-react/docs/components/forms",children:"Forms"})," and ",(0,r.jsx)(n.a,{href:"/abp-react/docs/components/custom-components",children:"Custom Components"})," documentation."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>s,x:()=>l});var a=i(6540);const r={},t=a.createContext(r);function s(e){const n=a.useContext(t);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(t.Provider,{value:n},e.children)}}}]);