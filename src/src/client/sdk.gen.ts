// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { AbpApiDefinitionGetData, AbpApiDefinitionGetResponses, AbpApiDefinitionGetErrors, AbpApplicationConfigurationGetData, AbpApplicationConfigurationGetResponses, AbpApplicationConfigurationGetErrors, AbpApplicationLocalizationGetData, AbpApplicationLocalizationGetResponses, AbpApplicationLocalizationGetErrors, AbpTenantFindTenantByNameData, AbpTenantFindTenantByNameResponses, AbpTenantFindTenantByNameErrors, AbpTenantFindTenantByIdData, AbpTenantFindTenantByIdResponses, AbpTenantFindTenantByIdErrors, AccountRegisterData, AccountRegisterResponses, AccountRegisterErrors, AccountSendPasswordResetCodeData, AccountSendPasswordResetCodeResponses, AccountSendPasswordResetCodeErrors, AccountVerifyPasswordResetTokenData, AccountVerifyPasswordResetTokenResponses, AccountVerifyPasswordResetTokenErrors, AccountResetPasswordData, AccountResetPasswordResponses, AccountResetPasswordErrors, BlogAdminDeleteData, BlogAdminDeleteResponses, BlogAdminDeleteErrors, BlogAdminGetData, BlogAdminGetResponses, BlogAdminGetErrors, BlogAdminUpdateData, BlogAdminUpdateResponses, BlogAdminUpdateErrors, BlogAdminGetListData, BlogAdminGetListResponses, BlogAdminGetListErrors, BlogAdminCreateData, BlogAdminCreateResponses, BlogAdminCreateErrors, BlogAdminGetAllListData, BlogAdminGetAllListResponses, BlogAdminGetAllListErrors, BlogAdminMoveAllBlogPostsData, BlogAdminMoveAllBlogPostsResponses, BlogAdminMoveAllBlogPostsErrors, BlogFeatureGetOrDefaultData, BlogFeatureGetOrDefaultResponses, BlogFeatureGetOrDefaultErrors, BlogFeatureAdminGetListData, BlogFeatureAdminGetListResponses, BlogFeatureAdminGetListErrors, BlogFeatureAdminSetData, BlogFeatureAdminSetResponses, BlogFeatureAdminSetErrors, BlogPostAdminGetListData, BlogPostAdminGetListResponses, BlogPostAdminGetListErrors, BlogPostAdminCreateData, BlogPostAdminCreateResponses, BlogPostAdminCreateErrors, BlogPostAdminDeleteData, BlogPostAdminDeleteResponses, BlogPostAdminDeleteErrors, BlogPostAdminGetData, BlogPostAdminGetResponses, BlogPostAdminGetErrors, BlogPostAdminUpdateData, BlogPostAdminUpdateResponses, BlogPostAdminUpdateErrors, BlogPostAdminPublishData, BlogPostAdminPublishResponses, BlogPostAdminPublishErrors, BlogPostAdminDraftData, BlogPostAdminDraftResponses, BlogPostAdminDraftErrors, BlogPostAdminCreateAndPublishData, BlogPostAdminCreateAndPublishResponses, BlogPostAdminCreateAndPublishErrors, BlogPostAdminSendToReviewData, BlogPostAdminSendToReviewResponses, BlogPostAdminSendToReviewErrors, BlogPostAdminCreateAndSendToReviewData, BlogPostAdminCreateAndSendToReviewResponses, BlogPostAdminCreateAndSendToReviewErrors, BlogPostAdminHasBlogPostWaitingForReviewData, BlogPostAdminHasBlogPostWaitingForReviewResponses, BlogPostAdminHasBlogPostWaitingForReviewErrors, BlogPostPublicGetData, BlogPostPublicGetResponses, BlogPostPublicGetErrors, BlogPostPublicGetListData, BlogPostPublicGetListResponses, BlogPostPublicGetListErrors, BlogPostPublicGetAuthorsHasBlogPostsData, BlogPostPublicGetAuthorsHasBlogPostsResponses, BlogPostPublicGetAuthorsHasBlogPostsErrors, BlogPostPublicGetAuthorHasBlogPostData, BlogPostPublicGetAuthorHasBlogPostResponses, BlogPostPublicGetAuthorHasBlogPostErrors, BlogPostPublicDeleteData, BlogPostPublicDeleteResponses, BlogPostPublicDeleteErrors, BlogPostPublicGetTagNameData, BlogPostPublicGetTagNameResponses, BlogPostPublicGetTagNameErrors, ClientGetListData, ClientGetListResponses, ClientCreateData, ClientCreateResponses, ClientDeleteData, ClientDeleteResponses, ClientGetData, ClientGetResponses, ClientUpdateData, ClientUpdateResponses, ClientAddRedirectUriData, ClientAddRedirectUriResponses, ClientAddPostLogoutRedirectUriData, ClientAddPostLogoutRedirectUriResponses, ClientUpdateClientTypeData, ClientUpdateClientTypeResponses, CmsKitPublicGlobalResourcesGetGlobalStyleData, CmsKitPublicGlobalResourcesGetGlobalStyleResponses, CmsKitPublicGlobalResourcesGetGlobalScriptData, CmsKitPublicGlobalResourcesGetGlobalScriptResponses, CommentAdminGetListData, CommentAdminGetListResponses, CommentAdminGetListErrors, CommentAdminDeleteData, CommentAdminDeleteResponses, CommentAdminDeleteErrors, CommentAdminGetData, CommentAdminGetResponses, CommentAdminGetErrors, CommentAdminUpdateApprovalStatusData, CommentAdminUpdateApprovalStatusResponses, CommentAdminUpdateApprovalStatusErrors, CommentAdminUpdateSettingsData, CommentAdminUpdateSettingsResponses, CommentAdminUpdateSettingsErrors, CommentAdminGetWaitingCountData, CommentAdminGetWaitingCountResponses, CommentAdminGetWaitingCountErrors, CommentPublicGetListData, CommentPublicGetListResponses, CommentPublicGetListErrors, CommentPublicCreateData, CommentPublicCreateResponses, CommentPublicCreateErrors, CommentPublicDeleteData, CommentPublicDeleteResponses, CommentPublicDeleteErrors, CommentPublicUpdateData, CommentPublicUpdateResponses, CommentPublicUpdateErrors, DynamicClaimsRefreshData, DynamicClaimsRefreshResponses, DynamicClaimsRefreshErrors, EmailSettingsGetData, EmailSettingsGetResponses, EmailSettingsGetErrors, EmailSettingsUpdateData, EmailSettingsUpdateResponses, EmailSettingsUpdateErrors, EmailSettingsSendTestEmailData, EmailSettingsSendTestEmailResponses, EmailSettingsSendTestEmailErrors, EntityTagAdminRemoveTagFromEntityData, EntityTagAdminRemoveTagFromEntityResponses, EntityTagAdminRemoveTagFromEntityErrors, EntityTagAdminAddTagToEntityData, EntityTagAdminAddTagToEntityResponses, EntityTagAdminAddTagToEntityErrors, EntityTagAdminSetEntityTagsData, EntityTagAdminSetEntityTagsResponses, EntityTagAdminSetEntityTagsErrors, FeaturesDeleteData, FeaturesDeleteResponses, FeaturesDeleteErrors, FeaturesGetData, FeaturesGetResponses, FeaturesGetErrors, FeaturesUpdateData, FeaturesUpdateResponses, FeaturesUpdateErrors, GlobalResourceAdminGetData, GlobalResourceAdminGetResponses, GlobalResourceAdminGetErrors, GlobalResourceAdminSetGlobalResourcesData, GlobalResourceAdminSetGlobalResourcesResponses, GlobalResourceAdminSetGlobalResourcesErrors, GlobalResourcePublicGetGlobalScriptData, GlobalResourcePublicGetGlobalScriptResponses, GlobalResourcePublicGetGlobalScriptErrors, GlobalResourcePublicGetGlobalStyleData, GlobalResourcePublicGetGlobalStyleResponses, GlobalResourcePublicGetGlobalStyleErrors, LoginLoginData, LoginLoginResponses, LoginLoginErrors, LoginLogoutData, LoginLogoutResponses, LoginLogoutErrors, LoginCheckPasswordData, LoginCheckPasswordResponses, LoginCheckPasswordErrors, MarkedItemPublicGetForUserData, MarkedItemPublicGetForUserResponses, MarkedItemPublicGetForUserErrors, MarkedItemPublicToggleData, MarkedItemPublicToggleResponses, MarkedItemPublicToggleErrors, MediaDescriptorDownloadData, MediaDescriptorDownloadResponses, MediaDescriptorDownloadErrors, MediaDescriptorAdminCreateData, MediaDescriptorAdminCreateResponses, MediaDescriptorAdminCreateErrors, MediaDescriptorAdminDeleteData, MediaDescriptorAdminDeleteResponses, MediaDescriptorAdminDeleteErrors, MenuItemAdminGetListData, MenuItemAdminGetListResponses, MenuItemAdminGetListErrors, MenuItemAdminCreateData, MenuItemAdminCreateResponses, MenuItemAdminCreateErrors, MenuItemAdminDeleteData, MenuItemAdminDeleteResponses, MenuItemAdminDeleteErrors, MenuItemAdminGetData, MenuItemAdminGetResponses, MenuItemAdminGetErrors, MenuItemAdminUpdateData, MenuItemAdminUpdateResponses, MenuItemAdminUpdateErrors, MenuItemAdminMoveMenuItemData, MenuItemAdminMoveMenuItemResponses, MenuItemAdminMoveMenuItemErrors, MenuItemAdminGetPageLookupData, MenuItemAdminGetPageLookupResponses, MenuItemAdminGetPageLookupErrors, MenuItemAdminGetPermissionLookupData, MenuItemAdminGetPermissionLookupResponses, MenuItemAdminGetPermissionLookupErrors, MenuItemPublicGetListData, MenuItemPublicGetListResponses, MenuItemPublicGetListErrors, PageAdminDeleteData, PageAdminDeleteResponses, PageAdminDeleteErrors, PageAdminGetData, PageAdminGetResponses, PageAdminGetErrors, PageAdminUpdateData, PageAdminUpdateResponses, PageAdminUpdateErrors, PageAdminGetListData, PageAdminGetListResponses, PageAdminGetListErrors, PageAdminCreateData, PageAdminCreateResponses, PageAdminCreateErrors, PageAdminSetAsHomePageData, PageAdminSetAsHomePageResponses, PageAdminSetAsHomePageErrors, PagesPublicFindBySlugData, PagesPublicFindBySlugResponses, PagesPublicFindBySlugErrors, PagesPublicFindDefaultHomePageData, PagesPublicFindDefaultHomePageResponses, PagesPublicFindDefaultHomePageErrors, PagesPublicDoesSlugExistData, PagesPublicDoesSlugExistResponses, PagesPublicDoesSlugExistErrors, PermissionsGetData, PermissionsGetResponses, PermissionsGetErrors, PermissionsUpdateData, PermissionsUpdateResponses, PermissionsUpdateErrors, ProfileGetData, ProfileGetResponses, ProfileGetErrors, ProfileUpdateData, ProfileUpdateResponses, ProfileUpdateErrors, ProfileChangePasswordData, ProfileChangePasswordResponses, ProfileChangePasswordErrors, RatingPublicDeleteData, RatingPublicDeleteResponses, RatingPublicDeleteErrors, RatingPublicGetGroupedStarCountsData, RatingPublicGetGroupedStarCountsResponses, RatingPublicGetGroupedStarCountsErrors, RatingPublicCreateData, RatingPublicCreateResponses, RatingPublicCreateErrors, ReactionPublicGetForSelectionData, ReactionPublicGetForSelectionResponses, ReactionPublicGetForSelectionErrors, ReactionPublicDeleteData, ReactionPublicDeleteResponses, ReactionPublicDeleteErrors, ReactionPublicCreateData, ReactionPublicCreateResponses, ReactionPublicCreateErrors, RoleGetAllListData, RoleGetAllListResponses, RoleGetAllListErrors, RoleGetListData, RoleGetListResponses, RoleGetListErrors, RoleCreateData, RoleCreateResponses, RoleCreateErrors, RoleDeleteData, RoleDeleteResponses, RoleDeleteErrors, RoleGetData, RoleGetResponses, RoleGetErrors, RoleUpdateData, RoleUpdateResponses, RoleUpdateErrors, TagAdminGetListData, TagAdminGetListResponses, TagAdminGetListErrors, TagAdminCreateData, TagAdminCreateResponses, TagAdminCreateErrors, TagAdminDeleteData, TagAdminDeleteResponses, TagAdminDeleteErrors, TagAdminGetData, TagAdminGetResponses, TagAdminGetErrors, TagAdminUpdateData, TagAdminUpdateResponses, TagAdminUpdateErrors, TagAdminGetTagDefinitionsData, TagAdminGetTagDefinitionsResponses, TagAdminGetTagDefinitionsErrors, TagPublicGetAllRelatedTagsData, TagPublicGetAllRelatedTagsResponses, TagPublicGetAllRelatedTagsErrors, TagPublicGetPopularTagsData, TagPublicGetPopularTagsResponses, TagPublicGetPopularTagsErrors, TenantGetTenantGuidData, TenantGetTenantGuidResponses, TenantAddHostData, TenantAddHostResponses, TenantGetTenantHostData, TenantGetTenantHostResponses, TenantDeleteData, TenantDeleteResponses, TenantDeleteErrors, TenantGetData, TenantGetResponses, TenantGetErrors, TenantUpdateData, TenantUpdateResponses, TenantUpdateErrors, TenantGetListData, TenantGetListResponses, TenantGetListErrors, TenantCreateData, TenantCreateResponses, TenantCreateErrors, TenantDeleteDefaultConnectionStringData, TenantDeleteDefaultConnectionStringResponses, TenantDeleteDefaultConnectionStringErrors, TenantGetDefaultConnectionStringData, TenantGetDefaultConnectionStringResponses, TenantGetDefaultConnectionStringErrors, TenantUpdateDefaultConnectionStringData, TenantUpdateDefaultConnectionStringResponses, TenantUpdateDefaultConnectionStringErrors, TimeZoneSettingsGetData, TimeZoneSettingsGetResponses, TimeZoneSettingsGetErrors, TimeZoneSettingsUpdateData, TimeZoneSettingsUpdateResponses, TimeZoneSettingsUpdateErrors, TimeZoneSettingsGetTimezonesData, TimeZoneSettingsGetTimezonesResponses, TimeZoneSettingsGetTimezonesErrors, UserDeleteData, UserDeleteResponses, UserDeleteErrors, UserGetData, UserGetResponses, UserGetErrors, UserUpdateData, UserUpdateResponses, UserUpdateErrors, UserGetListData, UserGetListResponses, UserGetListErrors, UserCreateData, UserCreateResponses, UserCreateErrors, UserGetRolesData, UserGetRolesResponses, UserGetRolesErrors, UserUpdateRolesData, UserUpdateRolesResponses, UserUpdateRolesErrors, UserGetAssignableRolesData, UserGetAssignableRolesResponses, UserGetAssignableRolesErrors, UserFindByUsernameData, UserFindByUsernameResponses, UserFindByUsernameErrors, UserFindByEmailData, UserFindByEmailResponses, UserFindByEmailErrors, UserLookupFindByIdData, UserLookupFindByIdResponses, UserLookupFindByIdErrors, UserLookupFindByUserNameData, UserLookupFindByUserNameResponses, UserLookupFindByUserNameErrors, UserLookupSearchData, UserLookupSearchResponses, UserLookupSearchErrors, UserLookupGetCountData, UserLookupGetCountResponses, UserLookupGetCountErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const abpApiDefinitionGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApiDefinitionGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApiDefinitionGetResponses, AbpApiDefinitionGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/api-definition',
        ...options
    });
};

export const abpApplicationConfigurationGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApplicationConfigurationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApplicationConfigurationGetResponses, AbpApplicationConfigurationGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-configuration',
        ...options
    });
};

export const abpApplicationLocalizationGet = <ThrowOnError extends boolean = false>(options: Options<AbpApplicationLocalizationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpApplicationLocalizationGetResponses, AbpApplicationLocalizationGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-localization',
        ...options
    });
};

export const abpTenantFindTenantByName = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByNameResponses, AbpTenantFindTenantByNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
        ...options
    });
};

export const abpTenantFindTenantById = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByIdResponses, AbpTenantFindTenantByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
        ...options
    });
};

export const accountRegister = <ThrowOnError extends boolean = false>(options?: Options<AccountRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountRegisterResponses, AccountRegisterErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountSendPasswordResetCode = <ThrowOnError extends boolean = false>(options?: Options<AccountSendPasswordResetCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountSendPasswordResetCodeResponses, AccountSendPasswordResetCodeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/send-password-reset-code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountVerifyPasswordResetToken = <ThrowOnError extends boolean = false>(options?: Options<AccountVerifyPasswordResetTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountVerifyPasswordResetTokenResponses, AccountVerifyPasswordResetTokenErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/verify-password-reset-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountResetPassword = <ThrowOnError extends boolean = false>(options?: Options<AccountResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountResetPasswordResponses, AccountResetPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogAdminDelete = <ThrowOnError extends boolean = false>(options: Options<BlogAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BlogAdminDeleteResponses, BlogAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}',
        ...options
    });
};

export const blogAdminGet = <ThrowOnError extends boolean = false>(options: Options<BlogAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogAdminGetResponses, BlogAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}',
        ...options
    });
};

export const blogAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogAdminUpdateResponses, BlogAdminUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const blogAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<BlogAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogAdminGetListResponses, BlogAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs',
        ...options
    });
};

export const blogAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<BlogAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogAdminCreateResponses, BlogAdminCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogAdminGetAllList = <ThrowOnError extends boolean = false>(options?: Options<BlogAdminGetAllListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogAdminGetAllListResponses, BlogAdminGetAllListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/all',
        ...options
    });
};

export const blogAdminMoveAllBlogPosts = <ThrowOnError extends boolean = false>(options: Options<BlogAdminMoveAllBlogPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogAdminMoveAllBlogPostsResponses, BlogAdminMoveAllBlogPostsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}/move-all-blog-posts',
        ...options
    });
};

export const blogFeatureGetOrDefault = <ThrowOnError extends boolean = false>(options: Options<BlogFeatureGetOrDefaultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogFeatureGetOrDefaultResponses, BlogFeatureGetOrDefaultErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit/blogs/{blogId}/features/{featureName}',
        ...options
    });
};

export const blogFeatureAdminGetList = <ThrowOnError extends boolean = false>(options: Options<BlogFeatureAdminGetListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogFeatureAdminGetListResponses, BlogFeatureAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{blogId}/features',
        ...options
    });
};

export const blogFeatureAdminSet = <ThrowOnError extends boolean = false>(options: Options<BlogFeatureAdminSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogFeatureAdminSetResponses, BlogFeatureAdminSetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{blogId}/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const blogPostAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogPostAdminGetListResponses, BlogPostAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts',
        ...options
    });
};

export const blogPostAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogPostAdminCreateResponses, BlogPostAdminCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminDelete = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BlogPostAdminDeleteResponses, BlogPostAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}',
        ...options
    });
};

export const blogPostAdminGet = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostAdminGetResponses, BlogPostAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}',
        ...options
    });
};

export const blogPostAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogPostAdminUpdateResponses, BlogPostAdminUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const blogPostAdminPublish = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminPublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlogPostAdminPublishResponses, BlogPostAdminPublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}/publish',
        ...options
    });
};

export const blogPostAdminDraft = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlogPostAdminDraftResponses, BlogPostAdminDraftErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}/draft',
        ...options
    });
};

export const blogPostAdminCreateAndPublish = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminCreateAndPublishData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogPostAdminCreateAndPublishResponses, BlogPostAdminCreateAndPublishErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/create-and-publish',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminSendToReview = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminSendToReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BlogPostAdminSendToReviewResponses, BlogPostAdminSendToReviewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}/send-to-review',
        ...options
    });
};

export const blogPostAdminCreateAndSendToReview = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminCreateAndSendToReviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogPostAdminCreateAndSendToReviewResponses, BlogPostAdminCreateAndSendToReviewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/create-and-send-to-review',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminHasBlogPostWaitingForReview = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminHasBlogPostWaitingForReviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogPostAdminHasBlogPostWaitingForReviewResponses, BlogPostAdminHasBlogPostWaitingForReviewErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/has-blogpost-waiting-for-review',
        ...options
    });
};

export const blogPostPublicGet = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetResponses, BlogPostPublicGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/{blogSlug}/{blogPostSlug}',
        ...options
    });
};

export const blogPostPublicGetList = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetListResponses, BlogPostPublicGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/{blogSlug}',
        ...options
    });
};

export const blogPostPublicGetAuthorsHasBlogPosts = <ThrowOnError extends boolean = false>(options?: Options<BlogPostPublicGetAuthorsHasBlogPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogPostPublicGetAuthorsHasBlogPostsResponses, BlogPostPublicGetAuthorsHasBlogPostsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/authors',
        ...options
    });
};

export const blogPostPublicGetAuthorHasBlogPost = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetAuthorHasBlogPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetAuthorHasBlogPostResponses, BlogPostPublicGetAuthorHasBlogPostErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/authors/{id}',
        ...options
    });
};

export const blogPostPublicDelete = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<BlogPostPublicDeleteResponses, BlogPostPublicDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/{id}',
        ...options
    });
};

export const blogPostPublicGetTagName = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetTagNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetTagNameResponses, BlogPostPublicGetTagNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/tags/{id}',
        ...options
    });
};

export const clientGetList = <ThrowOnError extends boolean = false>(options?: Options<ClientGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ClientGetListResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management',
        ...options
    });
};

export const clientCreate = <ThrowOnError extends boolean = false>(options?: Options<ClientCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ClientCreateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management',
        ...options
    });
};

export const clientDelete = <ThrowOnError extends boolean = false>(options: Options<ClientDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ClientDeleteResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientGet = <ThrowOnError extends boolean = false>(options: Options<ClientGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ClientGetResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientUpdate = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ClientUpdateResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientAddRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddRedirectUriData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientAddRedirectUriResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/add-redirect-uri/{id}',
        ...options
    });
};

export const clientAddPostLogoutRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddPostLogoutRedirectUriData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientAddPostLogoutRedirectUriResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/add-post-logout-redirect-uri/{id}',
        ...options
    });
};

export const clientUpdateClientType = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateClientTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientUpdateClientTypeResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/update-client-type/{id}',
        ...options
    });
};

export const cmsKitPublicGlobalResourcesGetGlobalStyle = <ThrowOnError extends boolean = false>(options?: Options<CmsKitPublicGlobalResourcesGetGlobalStyleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CmsKitPublicGlobalResourcesGetGlobalStyleResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/cms-kit/global-resources/style',
        ...options
    });
};

export const cmsKitPublicGlobalResourcesGetGlobalScript = <ThrowOnError extends boolean = false>(options?: Options<CmsKitPublicGlobalResourcesGetGlobalScriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CmsKitPublicGlobalResourcesGetGlobalScriptResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/cms-kit/global-resources/script',
        ...options
    });
};

export const commentAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<CommentAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CommentAdminGetListResponses, CommentAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments',
        ...options
    });
};

export const commentAdminDelete = <ThrowOnError extends boolean = false>(options: Options<CommentAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CommentAdminDeleteResponses, CommentAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/{id}',
        ...options
    });
};

export const commentAdminGet = <ThrowOnError extends boolean = false>(options: Options<CommentAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CommentAdminGetResponses, CommentAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/{id}',
        ...options
    });
};

export const commentAdminUpdateApprovalStatus = <ThrowOnError extends boolean = false>(options: Options<CommentAdminUpdateApprovalStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CommentAdminUpdateApprovalStatusResponses, CommentAdminUpdateApprovalStatusErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/{id}/approval-status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const commentAdminUpdateSettings = <ThrowOnError extends boolean = false>(options?: Options<CommentAdminUpdateSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<CommentAdminUpdateSettingsResponses, CommentAdminUpdateSettingsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const commentAdminGetWaitingCount = <ThrowOnError extends boolean = false>(options?: Options<CommentAdminGetWaitingCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CommentAdminGetWaitingCountResponses, CommentAdminGetWaitingCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/waiting-count',
        ...options
    });
};

export const commentPublicGetList = <ThrowOnError extends boolean = false>(options: Options<CommentPublicGetListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CommentPublicGetListResponses, CommentPublicGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{entityType}/{entityId}',
        ...options
    });
};

export const commentPublicCreate = <ThrowOnError extends boolean = false>(options: Options<CommentPublicCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CommentPublicCreateResponses, CommentPublicCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{entityType}/{entityId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const commentPublicDelete = <ThrowOnError extends boolean = false>(options: Options<CommentPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CommentPublicDeleteResponses, CommentPublicDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{id}',
        ...options
    });
};

export const commentPublicUpdate = <ThrowOnError extends boolean = false>(options: Options<CommentPublicUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CommentPublicUpdateResponses, CommentPublicUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const dynamicClaimsRefresh = <ThrowOnError extends boolean = false>(options?: Options<DynamicClaimsRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<DynamicClaimsRefreshResponses, DynamicClaimsRefreshErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/dynamic-claims/refresh',
        ...options
    });
};

export const emailSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailSettingsGetResponses, EmailSettingsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options
    });
};

export const emailSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EmailSettingsUpdateResponses, EmailSettingsUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const emailSettingsSendTestEmail = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsSendTestEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EmailSettingsSendTestEmailResponses, EmailSettingsSendTestEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing/send-test-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const entityTagAdminRemoveTagFromEntity = <ThrowOnError extends boolean = false>(options: Options<EntityTagAdminRemoveTagFromEntityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<EntityTagAdminRemoveTagFromEntityResponses, EntityTagAdminRemoveTagFromEntityErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/entity-tags',
        ...options
    });
};

export const entityTagAdminAddTagToEntity = <ThrowOnError extends boolean = false>(options?: Options<EntityTagAdminAddTagToEntityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<EntityTagAdminAddTagToEntityResponses, EntityTagAdminAddTagToEntityErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/entity-tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const entityTagAdminSetEntityTags = <ThrowOnError extends boolean = false>(options?: Options<EntityTagAdminSetEntityTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<EntityTagAdminSetEntityTagsResponses, EntityTagAdminSetEntityTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/entity-tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const featuresDelete = <ThrowOnError extends boolean = false>(options?: Options<FeaturesDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<FeaturesDeleteResponses, FeaturesDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresGet = <ThrowOnError extends boolean = false>(options?: Options<FeaturesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FeaturesGetResponses, FeaturesGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresUpdate = <ThrowOnError extends boolean = false>(options?: Options<FeaturesUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<FeaturesUpdateResponses, FeaturesUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const globalResourceAdminGet = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourceAdminGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalResourceAdminGetResponses, GlobalResourceAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/global-resources',
        ...options
    });
};

export const globalResourceAdminSetGlobalResources = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourceAdminSetGlobalResourcesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<GlobalResourceAdminSetGlobalResourcesResponses, GlobalResourceAdminSetGlobalResourcesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/global-resources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const globalResourcePublicGetGlobalScript = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourcePublicGetGlobalScriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalResourcePublicGetGlobalScriptResponses, GlobalResourcePublicGetGlobalScriptErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/global-resources/script',
        ...options
    });
};

export const globalResourcePublicGetGlobalStyle = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourcePublicGetGlobalStyleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalResourcePublicGetGlobalStyleResponses, GlobalResourcePublicGetGlobalStyleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/global-resources/style',
        ...options
    });
};

export const loginLogin = <ThrowOnError extends boolean = false>(options?: Options<LoginLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginLoginResponses, LoginLoginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginLogout = <ThrowOnError extends boolean = false>(options?: Options<LoginLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<LoginLogoutResponses, LoginLogoutErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/logout',
        ...options
    });
};

export const loginCheckPassword = <ThrowOnError extends boolean = false>(options?: Options<LoginCheckPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginCheckPasswordResponses, LoginCheckPasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/check-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const markedItemPublicGetForUser = <ThrowOnError extends boolean = false>(options: Options<MarkedItemPublicGetForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarkedItemPublicGetForUserResponses, MarkedItemPublicGetForUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/marked-items/{entityType}/{entityId}',
        ...options
    });
};

export const markedItemPublicToggle = <ThrowOnError extends boolean = false>(options: Options<MarkedItemPublicToggleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarkedItemPublicToggleResponses, MarkedItemPublicToggleErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/marked-items/{entityType}/{entityId}',
        ...options
    });
};

export const mediaDescriptorDownload = <ThrowOnError extends boolean = false>(options: Options<MediaDescriptorDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MediaDescriptorDownloadResponses, MediaDescriptorDownloadErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit/media/{id}',
        ...options
    });
};

export const mediaDescriptorAdminCreate = <ThrowOnError extends boolean = false>(options: Options<MediaDescriptorAdminCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MediaDescriptorAdminCreateResponses, MediaDescriptorAdminCreateErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/media/{entityType}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const mediaDescriptorAdminDelete = <ThrowOnError extends boolean = false>(options: Options<MediaDescriptorAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MediaDescriptorAdminDeleteResponses, MediaDescriptorAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/media/{id}',
        ...options
    });
};

export const menuItemAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemAdminGetListResponses, MenuItemAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items',
        ...options
    });
};

export const menuItemAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MenuItemAdminCreateResponses, MenuItemAdminCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const menuItemAdminDelete = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<MenuItemAdminDeleteResponses, MenuItemAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}',
        ...options
    });
};

export const menuItemAdminGet = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MenuItemAdminGetResponses, MenuItemAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}',
        ...options
    });
};

export const menuItemAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MenuItemAdminUpdateResponses, MenuItemAdminUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const menuItemAdminMoveMenuItem = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminMoveMenuItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MenuItemAdminMoveMenuItemResponses, MenuItemAdminMoveMenuItemErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const menuItemAdminGetPageLookup = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminGetPageLookupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemAdminGetPageLookupResponses, MenuItemAdminGetPageLookupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/lookup/pages',
        ...options
    });
};

export const menuItemAdminGetPermissionLookup = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminGetPermissionLookupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemAdminGetPermissionLookupResponses, MenuItemAdminGetPermissionLookupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/lookup/permissions',
        ...options
    });
};

export const menuItemPublicGetList = <ThrowOnError extends boolean = false>(options?: Options<MenuItemPublicGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemPublicGetListResponses, MenuItemPublicGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/menu-items',
        ...options
    });
};

export const pageAdminDelete = <ThrowOnError extends boolean = false>(options: Options<PageAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<PageAdminDeleteResponses, PageAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/{id}',
        ...options
    });
};

export const pageAdminGet = <ThrowOnError extends boolean = false>(options: Options<PageAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PageAdminGetResponses, PageAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/{id}',
        ...options
    });
};

export const pageAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<PageAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PageAdminUpdateResponses, PageAdminUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const pageAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<PageAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PageAdminGetListResponses, PageAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages',
        ...options
    });
};

export const pageAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<PageAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageAdminCreateResponses, PageAdminCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const pageAdminSetAsHomePage = <ThrowOnError extends boolean = false>(options: Options<PageAdminSetAsHomePageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PageAdminSetAsHomePageResponses, PageAdminSetAsHomePageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/setashomepage/{id}',
        ...options
    });
};

export const pagesPublicFindBySlug = <ThrowOnError extends boolean = false>(options?: Options<PagesPublicFindBySlugData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PagesPublicFindBySlugResponses, PagesPublicFindBySlugErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/pages/by-slug',
        ...options
    });
};

export const pagesPublicFindDefaultHomePage = <ThrowOnError extends boolean = false>(options?: Options<PagesPublicFindDefaultHomePageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PagesPublicFindDefaultHomePageResponses, PagesPublicFindDefaultHomePageErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/pages/home',
        ...options
    });
};

export const pagesPublicDoesSlugExist = <ThrowOnError extends boolean = false>(options?: Options<PagesPublicDoesSlugExistData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PagesPublicDoesSlugExistResponses, PagesPublicDoesSlugExistErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/pages/exist',
        ...options
    });
};

export const permissionsGet = <ThrowOnError extends boolean = false>(options?: Options<PermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PermissionsGetResponses, PermissionsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options
    });
};

export const permissionsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PermissionsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PermissionsUpdateResponses, PermissionsUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileGet = <ThrowOnError extends boolean = false>(options?: Options<ProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileGetResponses, ProfileGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options
    });
};

export const profileUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfileUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ProfileUpdateResponses, ProfileUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileChangePassword = <ThrowOnError extends boolean = false>(options?: Options<ProfileChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ProfileChangePasswordResponses, ProfileChangePasswordErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const ratingPublicDelete = <ThrowOnError extends boolean = false>(options: Options<RatingPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RatingPublicDeleteResponses, RatingPublicDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/ratings/{entityType}/{entityId}',
        ...options
    });
};

export const ratingPublicGetGroupedStarCounts = <ThrowOnError extends boolean = false>(options: Options<RatingPublicGetGroupedStarCountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RatingPublicGetGroupedStarCountsResponses, RatingPublicGetGroupedStarCountsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/ratings/{entityType}/{entityId}',
        ...options
    });
};

export const ratingPublicCreate = <ThrowOnError extends boolean = false>(options: Options<RatingPublicCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RatingPublicCreateResponses, RatingPublicCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/ratings/{entityType}/{entityId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const reactionPublicGetForSelection = <ThrowOnError extends boolean = false>(options: Options<ReactionPublicGetForSelectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReactionPublicGetForSelectionResponses, ReactionPublicGetForSelectionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/reactions/{entityType}/{entityId}',
        ...options
    });
};

export const reactionPublicDelete = <ThrowOnError extends boolean = false>(options: Options<ReactionPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<ReactionPublicDeleteResponses, ReactionPublicDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/reactions/{entityType}/{entityId}/{reaction}',
        ...options
    });
};

export const reactionPublicCreate = <ThrowOnError extends boolean = false>(options: Options<ReactionPublicCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ReactionPublicCreateResponses, ReactionPublicCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/reactions/{entityType}/{entityId}/{reaction}',
        ...options
    });
};

export const roleGetAllList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetAllListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetAllListResponses, RoleGetAllListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/all',
        ...options
    });
};

export const roleGetList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetListResponses, RoleGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options
    });
};

export const roleCreate = <ThrowOnError extends boolean = false>(options?: Options<RoleCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RoleCreateResponses, RoleCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const roleDelete = <ThrowOnError extends boolean = false>(options: Options<RoleDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<RoleDeleteResponses, RoleDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleGet = <ThrowOnError extends boolean = false>(options: Options<RoleGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoleGetResponses, RoleGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleUpdate = <ThrowOnError extends boolean = false>(options: Options<RoleUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RoleUpdateResponses, RoleUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const tagAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<TagAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagAdminGetListResponses, TagAdminGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags',
        ...options
    });
};

export const tagAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<TagAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TagAdminCreateResponses, TagAdminCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tagAdminDelete = <ThrowOnError extends boolean = false>(options: Options<TagAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TagAdminDeleteResponses, TagAdminDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/{id}',
        ...options
    });
};

export const tagAdminGet = <ThrowOnError extends boolean = false>(options: Options<TagAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagAdminGetResponses, TagAdminGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/{id}',
        ...options
    });
};

export const tagAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<TagAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TagAdminUpdateResponses, TagAdminUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const tagAdminGetTagDefinitions = <ThrowOnError extends boolean = false>(options?: Options<TagAdminGetTagDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagAdminGetTagDefinitionsResponses, TagAdminGetTagDefinitionsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/tag-definitions',
        ...options
    });
};

export const tagPublicGetAllRelatedTags = <ThrowOnError extends boolean = false>(options: Options<TagPublicGetAllRelatedTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagPublicGetAllRelatedTagsResponses, TagPublicGetAllRelatedTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/tags/{entityType}/{entityId}',
        ...options
    });
};

export const tagPublicGetPopularTags = <ThrowOnError extends boolean = false>(options: Options<TagPublicGetPopularTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagPublicGetPopularTagsResponses, TagPublicGetPopularTagsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/tags/popular/{entityType}/{maxCount}',
        ...options
    });
};

export const tenantGetTenantGuid = <ThrowOnError extends boolean = false>(options?: Options<TenantGetTenantGuidData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetTenantGuidResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy',
        ...options
    });
};

export const tenantAddHost = <ThrowOnError extends boolean = false>(options?: Options<TenantAddHostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantAddHostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy',
        ...options
    });
};

export const tenantGetTenantHost = <ThrowOnError extends boolean = false>(options: Options<TenantGetTenantHostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetTenantHostResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/{id}',
        ...options
    });
};

export const tenantDelete = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantDeleteResponses, TenantDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantGet = <ThrowOnError extends boolean = false>(options: Options<TenantGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetResponses, TenantGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantUpdateResponses, TenantUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const tenantGetList = <ThrowOnError extends boolean = false>(options?: Options<TenantGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetListResponses, TenantGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options
    });
};

export const tenantCreate = <ThrowOnError extends boolean = false>(options?: Options<TenantCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantCreateResponses, TenantCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantDeleteDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<TenantDeleteDefaultConnectionStringResponses, TenantDeleteDefaultConnectionStringErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantGetDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantGetDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetDefaultConnectionStringResponses, TenantGetDefaultConnectionStringErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantUpdateDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantUpdateDefaultConnectionStringResponses, TenantUpdateDefaultConnectionStringErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const timeZoneSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetResponses, TimeZoneSettingsGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TimeZoneSettingsUpdateResponses, TimeZoneSettingsUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsGetTimezones = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetTimezonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetTimezonesResponses, TimeZoneSettingsGetTimezonesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone/timezones',
        ...options
    });
};

export const userDelete = <ThrowOnError extends boolean = false>(options: Options<UserDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<UserDeleteResponses, UserDeleteErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userGet = <ThrowOnError extends boolean = false>(options: Options<UserGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetResponses, UserGetErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserUpdateResponses, UserUpdateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGetList = <ThrowOnError extends boolean = false>(options?: Options<UserGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetListResponses, UserGetListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options
    });
};

export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCreateResponses, UserCreateErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetRoles = <ThrowOnError extends boolean = false>(options: Options<UserGetRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetRolesResponses, UserGetRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options
    });
};

export const userUpdateRoles = <ThrowOnError extends boolean = false>(options: Options<UserUpdateRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserUpdateRolesResponses, UserUpdateRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const userGetAssignableRoles = <ThrowOnError extends boolean = false>(options?: Options<UserGetAssignableRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetAssignableRolesResponses, UserGetAssignableRolesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/assignable-roles',
        ...options
    });
};

export const userFindByUsername = <ThrowOnError extends boolean = false>(options: Options<UserFindByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByUsernameResponses, UserFindByUsernameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-username/{userName}',
        ...options
    });
};

export const userFindByEmail = <ThrowOnError extends boolean = false>(options: Options<UserFindByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByEmailResponses, UserFindByEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-email/{email}',
        ...options
    });
};

export const userLookupFindById = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByIdResponses, UserLookupFindByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/{id}',
        ...options
    });
};

export const userLookupFindByUserName = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByUserNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByUserNameResponses, UserLookupFindByUserNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/by-username/{userName}',
        ...options
    });
};

export const userLookupSearch = <ThrowOnError extends boolean = false>(options?: Options<UserLookupSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupSearchResponses, UserLookupSearchErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/search',
        ...options
    });
};

export const userLookupGetCount = <ThrowOnError extends boolean = false>(options?: Options<UserLookupGetCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupGetCountResponses, UserLookupGetCountErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/count',
        ...options
    });
};