// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { AbpApiDefinitionGetData, AbpApiDefinitionGetResponse, AbpApiDefinitionGetError, AbpApplicationConfigurationGetData, AbpApplicationConfigurationGetResponse, AbpApplicationConfigurationGetError, AbpApplicationLocalizationGetData, AbpApplicationLocalizationGetResponse, AbpApplicationLocalizationGetError, AbpTenantFindTenantByNameData, AbpTenantFindTenantByNameResponse, AbpTenantFindTenantByNameError, AbpTenantFindTenantByIdData, AbpTenantFindTenantByIdResponse, AbpTenantFindTenantByIdError, AccountRegisterData, AccountRegisterResponse, AccountRegisterError, AccountSendPasswordResetCodeData, AccountSendPasswordResetCodeError, AccountVerifyPasswordResetTokenData, AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, AccountResetPasswordData, AccountResetPasswordError, ClientGetListData, ClientGetListResponse, ClientCreateData, ClientCreateResponse, ClientDeleteData, ClientGetData, ClientGetResponse, ClientUpdateData, ClientUpdateResponse, ClientAddRedirectUriData, ClientAddRedirectUriResponse, ClientAddPostLogoutRedirectUriData, ClientAddPostLogoutRedirectUriResponse, ClientUpdateClientTypeData, ClientUpdateClientTypeResponse, DynamicClaimsRefreshData, DynamicClaimsRefreshError, EmailSettingsGetData, EmailSettingsGetResponse, EmailSettingsGetError, EmailSettingsUpdateData, EmailSettingsUpdateError, EmailSettingsSendTestEmailData, EmailSettingsSendTestEmailError, FeaturesDeleteData, FeaturesDeleteError, FeaturesGetData, FeaturesGetResponse, FeaturesGetError, FeaturesUpdateData, FeaturesUpdateError, LoginLoginData, LoginLoginResponse, LoginLoginError, LoginLogoutData, LoginLogoutError, LoginCheckPasswordData, LoginCheckPasswordResponse, LoginCheckPasswordError, PermissionsGetData, PermissionsGetResponse, PermissionsGetError, PermissionsUpdateData, PermissionsUpdateError, ProfileGetData, ProfileGetResponse, ProfileGetError, ProfileUpdateData, ProfileUpdateResponse, ProfileUpdateError, ProfileChangePasswordData, ProfileChangePasswordError, RoleGetAllListData, RoleGetAllListResponse, RoleGetAllListError, RoleGetListData, RoleGetListResponse, RoleGetListError, RoleCreateData, RoleCreateResponse, RoleCreateError, RoleDeleteData, RoleDeleteError, RoleGetData, RoleGetResponse, RoleGetError, RoleUpdateData, RoleUpdateResponse, RoleUpdateError, TenantGetTenantGuidData, TenantGetTenantGuidResponse, TenantAddHostData, TenantAddHostResponse, TenantGetTenantHostData, TenantGetTenantHostResponse, TenantDeleteData, TenantDeleteError, TenantGetData, TenantGetResponse, TenantGetError, TenantUpdateData, TenantUpdateResponse, TenantUpdateError, TenantGetListData, TenantGetListResponse, TenantGetListError, TenantCreateData, TenantCreateResponse, TenantCreateError, TenantDeleteDefaultConnectionStringData, TenantDeleteDefaultConnectionStringError, TenantGetDefaultConnectionStringData, TenantGetDefaultConnectionStringResponse, TenantGetDefaultConnectionStringError, TenantUpdateDefaultConnectionStringData, TenantUpdateDefaultConnectionStringError, TimeZoneSettingsGetData, TimeZoneSettingsGetResponse, TimeZoneSettingsGetError, TimeZoneSettingsUpdateData, TimeZoneSettingsUpdateError, TimeZoneSettingsGetTimezonesData, TimeZoneSettingsGetTimezonesResponse, TimeZoneSettingsGetTimezonesError, UserDeleteData, UserDeleteError, UserGetData, UserGetResponse, UserGetError, UserUpdateData, UserUpdateResponse, UserUpdateError, UserGetListData, UserGetListResponse, UserGetListError, UserCreateData, UserCreateResponse, UserCreateError, UserGetRolesData, UserGetRolesResponse, UserGetRolesError, UserUpdateRolesData, UserUpdateRolesError, UserGetAssignableRolesData, UserGetAssignableRolesResponse, UserGetAssignableRolesError, UserFindByUsernameData, UserFindByUsernameResponse, UserFindByUsernameError, UserFindByEmailData, UserFindByEmailResponse, UserFindByEmailError, UserLookupFindByIdData, UserLookupFindByIdResponse, UserLookupFindByIdError, UserLookupFindByUserNameData, UserLookupFindByUserNameResponse, UserLookupFindByUserNameError, UserLookupSearchData, UserLookupSearchResponse, UserLookupSearchError, UserLookupGetCountData, UserLookupGetCountResponse, UserLookupGetCountError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const abpApiDefinitionGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApiDefinitionGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApiDefinitionGetResponse, AbpApiDefinitionGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/api-definition',
        ...options
    });
};

export const abpApplicationConfigurationGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApplicationConfigurationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApplicationConfigurationGetResponse, AbpApplicationConfigurationGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-configuration',
        ...options
    });
};

export const abpApplicationLocalizationGet = <ThrowOnError extends boolean = false>(options: Options<AbpApplicationLocalizationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpApplicationLocalizationGetResponse, AbpApplicationLocalizationGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-localization',
        ...options
    });
};

export const abpTenantFindTenantByName = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByNameResponse, AbpTenantFindTenantByNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
        ...options
    });
};

export const abpTenantFindTenantById = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByIdResponse, AbpTenantFindTenantByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
        ...options
    });
};

export const accountRegister = <ThrowOnError extends boolean = false>(options?: Options<AccountRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountRegisterResponse, AccountRegisterError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountSendPasswordResetCode = <ThrowOnError extends boolean = false>(options?: Options<AccountSendPasswordResetCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AccountSendPasswordResetCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/send-password-reset-code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountVerifyPasswordResetToken = <ThrowOnError extends boolean = false>(options?: Options<AccountVerifyPasswordResetTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/verify-password-reset-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountResetPassword = <ThrowOnError extends boolean = false>(options?: Options<AccountResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AccountResetPasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const clientGetList = <ThrowOnError extends boolean = false>(options?: Options<ClientGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ClientGetListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management',
        ...options
    });
};

export const clientCreate = <ThrowOnError extends boolean = false>(options?: Options<ClientCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ClientCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management',
        ...options
    });
};

export const clientDelete = <ThrowOnError extends boolean = false>(options: Options<ClientDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientGet = <ThrowOnError extends boolean = false>(options: Options<ClientGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ClientGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientUpdate = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ClientUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientAddRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddRedirectUriData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientAddRedirectUriResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/add-redirect-uri/{id}',
        ...options
    });
};

export const clientAddPostLogoutRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddPostLogoutRedirectUriData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientAddPostLogoutRedirectUriResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/add-post-logout-redirect-uri/{id}',
        ...options
    });
};

export const clientUpdateClientType = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateClientTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientUpdateClientTypeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/update-client-type/{id}',
        ...options
    });
};

export const dynamicClaimsRefresh = <ThrowOnError extends boolean = false>(options?: Options<DynamicClaimsRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, DynamicClaimsRefreshError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/dynamic-claims/refresh',
        ...options
    });
};

export const emailSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailSettingsGetResponse, EmailSettingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options
    });
};

export const emailSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, EmailSettingsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const emailSettingsSendTestEmail = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsSendTestEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, EmailSettingsSendTestEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing/send-test-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const featuresDelete = <ThrowOnError extends boolean = false>(options?: Options<FeaturesDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, FeaturesDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresGet = <ThrowOnError extends boolean = false>(options?: Options<FeaturesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FeaturesGetResponse, FeaturesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresUpdate = <ThrowOnError extends boolean = false>(options?: Options<FeaturesUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, FeaturesUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginLogin = <ThrowOnError extends boolean = false>(options?: Options<LoginLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginLoginResponse, LoginLoginError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginLogout = <ThrowOnError extends boolean = false>(options?: Options<LoginLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, LoginLogoutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/logout',
        ...options
    });
};

export const loginCheckPassword = <ThrowOnError extends boolean = false>(options?: Options<LoginCheckPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginCheckPasswordResponse, LoginCheckPasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/check-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const permissionsGet = <ThrowOnError extends boolean = false>(options?: Options<PermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PermissionsGetResponse, PermissionsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options
    });
};

export const permissionsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PermissionsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, PermissionsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileGet = <ThrowOnError extends boolean = false>(options?: Options<ProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileGetResponse, ProfileGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options
    });
};

export const profileUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfileUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ProfileUpdateResponse, ProfileUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileChangePassword = <ThrowOnError extends boolean = false>(options?: Options<ProfileChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ProfileChangePasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const roleGetAllList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetAllListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetAllListResponse, RoleGetAllListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/all',
        ...options
    });
};

export const roleGetList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetListResponse, RoleGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options
    });
};

export const roleCreate = <ThrowOnError extends boolean = false>(options?: Options<RoleCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RoleCreateResponse, RoleCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const roleDelete = <ThrowOnError extends boolean = false>(options: Options<RoleDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RoleDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleGet = <ThrowOnError extends boolean = false>(options: Options<RoleGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoleGetResponse, RoleGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleUpdate = <ThrowOnError extends boolean = false>(options: Options<RoleUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RoleUpdateResponse, RoleUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantGetTenantGuid = <ThrowOnError extends boolean = false>(options?: Options<TenantGetTenantGuidData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetTenantGuidResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy',
        ...options
    });
};

export const tenantAddHost = <ThrowOnError extends boolean = false>(options?: Options<TenantAddHostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantAddHostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy',
        ...options
    });
};

export const tenantGetTenantHost = <ThrowOnError extends boolean = false>(options: Options<TenantGetTenantHostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetTenantHostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/{id}',
        ...options
    });
};

export const tenantDelete = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, TenantDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantGet = <ThrowOnError extends boolean = false>(options: Options<TenantGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetResponse, TenantGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantUpdateResponse, TenantUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantGetList = <ThrowOnError extends boolean = false>(options?: Options<TenantGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetListResponse, TenantGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options
    });
};

export const tenantCreate = <ThrowOnError extends boolean = false>(options?: Options<TenantCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantCreateResponse, TenantCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantDeleteDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, TenantDeleteDefaultConnectionStringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantGetDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantGetDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetDefaultConnectionStringResponse, TenantGetDefaultConnectionStringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantUpdateDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, TenantUpdateDefaultConnectionStringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const timeZoneSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetResponse, TimeZoneSettingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, TimeZoneSettingsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsGetTimezones = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetTimezonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetTimezonesResponse, TimeZoneSettingsGetTimezonesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone/timezones',
        ...options
    });
};

export const userDelete = <ThrowOnError extends boolean = false>(options: Options<UserDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, UserDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userGet = <ThrowOnError extends boolean = false>(options: Options<UserGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetResponse, UserGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserUpdateResponse, UserUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetList = <ThrowOnError extends boolean = false>(options?: Options<UserGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetListResponse, UserGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options
    });
};

export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCreateResponse, UserCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetRoles = <ThrowOnError extends boolean = false>(options: Options<UserGetRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetRolesResponse, UserGetRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options
    });
};

export const userUpdateRoles = <ThrowOnError extends boolean = false>(options: Options<UserUpdateRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UserUpdateRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetAssignableRoles = <ThrowOnError extends boolean = false>(options?: Options<UserGetAssignableRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetAssignableRolesResponse, UserGetAssignableRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/assignable-roles',
        ...options
    });
};

export const userFindByUsername = <ThrowOnError extends boolean = false>(options: Options<UserFindByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByUsernameResponse, UserFindByUsernameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-username/{userName}',
        ...options
    });
};

export const userFindByEmail = <ThrowOnError extends boolean = false>(options: Options<UserFindByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByEmailResponse, UserFindByEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-email/{email}',
        ...options
    });
};

export const userLookupFindById = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByIdResponse, UserLookupFindByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/{id}',
        ...options
    });
};

export const userLookupFindByUserName = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByUserNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByUserNameResponse, UserLookupFindByUserNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/by-username/{userName}',
        ...options
    });
};

export const userLookupSearch = <ThrowOnError extends boolean = false>(options?: Options<UserLookupSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupSearchResponse, UserLookupSearchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/search',
        ...options
    });
};

export const userLookupGetCount = <ThrowOnError extends boolean = false>(options?: Options<UserLookupGetCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupGetCountResponse, UserLookupGetCountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/count',
        ...options
    });
};