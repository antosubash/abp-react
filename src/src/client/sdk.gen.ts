// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { AbpApiDefinitionGetData, AbpApiDefinitionGetResponse, AbpApiDefinitionGetError, AbpApplicationConfigurationGetData, AbpApplicationConfigurationGetResponse, AbpApplicationConfigurationGetError, AbpApplicationLocalizationGetData, AbpApplicationLocalizationGetResponse, AbpApplicationLocalizationGetError, AbpTenantFindTenantByNameData, AbpTenantFindTenantByNameResponse, AbpTenantFindTenantByNameError, AbpTenantFindTenantByIdData, AbpTenantFindTenantByIdResponse, AbpTenantFindTenantByIdError, AccountRegisterData, AccountRegisterResponse, AccountRegisterError, AccountSendPasswordResetCodeData, AccountSendPasswordResetCodeError, AccountVerifyPasswordResetTokenData, AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, AccountResetPasswordData, AccountResetPasswordError, BlogAdminDeleteData, BlogAdminDeleteError, BlogAdminGetData, BlogAdminGetResponse, BlogAdminGetError, BlogAdminUpdateData, BlogAdminUpdateResponse, BlogAdminUpdateError, BlogAdminGetListData, BlogAdminGetListResponse, BlogAdminGetListError, BlogAdminCreateData, BlogAdminCreateResponse, BlogAdminCreateError, BlogAdminGetAllListData, BlogAdminGetAllListResponse, BlogAdminGetAllListError, BlogAdminMoveAllBlogPostsData, BlogAdminMoveAllBlogPostsError, BlogFeatureGetOrDefaultData, BlogFeatureGetOrDefaultResponse, BlogFeatureGetOrDefaultError, BlogFeatureAdminGetListData, BlogFeatureAdminGetListResponse, BlogFeatureAdminGetListError, BlogFeatureAdminSetData, BlogFeatureAdminSetError, BlogPostAdminGetListData, BlogPostAdminGetListResponse, BlogPostAdminGetListError, BlogPostAdminCreateData, BlogPostAdminCreateResponse, BlogPostAdminCreateError, BlogPostAdminDeleteData, BlogPostAdminDeleteError, BlogPostAdminGetData, BlogPostAdminGetResponse, BlogPostAdminGetError, BlogPostAdminUpdateData, BlogPostAdminUpdateResponse, BlogPostAdminUpdateError, BlogPostAdminPublishData, BlogPostAdminPublishError, BlogPostAdminDraftData, BlogPostAdminDraftError, BlogPostAdminCreateAndPublishData, BlogPostAdminCreateAndPublishResponse, BlogPostAdminCreateAndPublishError, BlogPostAdminSendToReviewData, BlogPostAdminSendToReviewError, BlogPostAdminCreateAndSendToReviewData, BlogPostAdminCreateAndSendToReviewResponse, BlogPostAdminCreateAndSendToReviewError, BlogPostAdminHasBlogPostWaitingForReviewData, BlogPostAdminHasBlogPostWaitingForReviewResponse, BlogPostAdminHasBlogPostWaitingForReviewError, BlogPostPublicGetData, BlogPostPublicGetResponse, BlogPostPublicGetError, BlogPostPublicGetListData, BlogPostPublicGetListResponse, BlogPostPublicGetListError, BlogPostPublicGetAuthorsHasBlogPostsData, BlogPostPublicGetAuthorsHasBlogPostsResponse, BlogPostPublicGetAuthorsHasBlogPostsError, BlogPostPublicGetAuthorHasBlogPostData, BlogPostPublicGetAuthorHasBlogPostResponse, BlogPostPublicGetAuthorHasBlogPostError, BlogPostPublicDeleteData, BlogPostPublicDeleteError, BlogPostPublicGetTagNameData, BlogPostPublicGetTagNameResponse, BlogPostPublicGetTagNameError, ClientGetListData, ClientGetListResponse, ClientCreateData, ClientCreateResponse, ClientDeleteData, ClientGetData, ClientGetResponse, ClientUpdateData, ClientUpdateResponse, ClientAddRedirectUriData, ClientAddRedirectUriResponse, ClientAddPostLogoutRedirectUriData, ClientAddPostLogoutRedirectUriResponse, ClientUpdateClientTypeData, ClientUpdateClientTypeResponse, CmsKitPublicGlobalResourcesGetGlobalStyleData, CmsKitPublicGlobalResourcesGetGlobalScriptData, CommentAdminGetListData, CommentAdminGetListResponse, CommentAdminGetListError, CommentAdminDeleteData, CommentAdminDeleteError, CommentAdminGetData, CommentAdminGetResponse, CommentAdminGetError, CommentAdminUpdateApprovalStatusData, CommentAdminUpdateApprovalStatusError, CommentAdminUpdateSettingsData, CommentAdminUpdateSettingsError, CommentAdminGetWaitingCountData, CommentAdminGetWaitingCountResponse, CommentAdminGetWaitingCountError, CommentPublicGetListData, CommentPublicGetListResponse, CommentPublicGetListError, CommentPublicCreateData, CommentPublicCreateResponse, CommentPublicCreateError, CommentPublicDeleteData, CommentPublicDeleteError, CommentPublicUpdateData, CommentPublicUpdateResponse, CommentPublicUpdateError, DynamicClaimsRefreshData, DynamicClaimsRefreshError, EmailSettingsGetData, EmailSettingsGetResponse, EmailSettingsGetError, EmailSettingsUpdateData, EmailSettingsUpdateError, EmailSettingsSendTestEmailData, EmailSettingsSendTestEmailError, EntityTagAdminRemoveTagFromEntityData, EntityTagAdminRemoveTagFromEntityError, EntityTagAdminAddTagToEntityData, EntityTagAdminAddTagToEntityError, EntityTagAdminSetEntityTagsData, EntityTagAdminSetEntityTagsError, FeaturesDeleteData, FeaturesDeleteError, FeaturesGetData, FeaturesGetResponse, FeaturesGetError, FeaturesUpdateData, FeaturesUpdateError, GlobalResourceAdminGetData, GlobalResourceAdminGetResponse, GlobalResourceAdminGetError, GlobalResourceAdminSetGlobalResourcesData, GlobalResourceAdminSetGlobalResourcesError, GlobalResourcePublicGetGlobalScriptData, GlobalResourcePublicGetGlobalScriptResponse, GlobalResourcePublicGetGlobalScriptError, GlobalResourcePublicGetGlobalStyleData, GlobalResourcePublicGetGlobalStyleResponse, GlobalResourcePublicGetGlobalStyleError, LoginLoginData, LoginLoginResponse, LoginLoginError, LoginLogoutData, LoginLogoutError, LoginCheckPasswordData, LoginCheckPasswordResponse, LoginCheckPasswordError, MarkedItemPublicGetForUserData, MarkedItemPublicGetForUserResponse, MarkedItemPublicGetForUserError, MarkedItemPublicToggleData, MarkedItemPublicToggleResponse, MarkedItemPublicToggleError, MediaDescriptorDownloadData, MediaDescriptorDownloadResponse, MediaDescriptorDownloadError, MediaDescriptorAdminCreateData, MediaDescriptorAdminCreateResponse, MediaDescriptorAdminCreateError, MediaDescriptorAdminDeleteData, MediaDescriptorAdminDeleteError, MenuItemAdminGetListData, MenuItemAdminGetListResponse, MenuItemAdminGetListError, MenuItemAdminCreateData, MenuItemAdminCreateResponse, MenuItemAdminCreateError, MenuItemAdminDeleteData, MenuItemAdminDeleteError, MenuItemAdminGetData, MenuItemAdminGetResponse, MenuItemAdminGetError, MenuItemAdminUpdateData, MenuItemAdminUpdateResponse, MenuItemAdminUpdateError, MenuItemAdminMoveMenuItemData, MenuItemAdminMoveMenuItemError, MenuItemAdminGetPageLookupData, MenuItemAdminGetPageLookupResponse, MenuItemAdminGetPageLookupError, MenuItemAdminGetPermissionLookupData, MenuItemAdminGetPermissionLookupResponse, MenuItemAdminGetPermissionLookupError, MenuItemPublicGetListData, MenuItemPublicGetListResponse, MenuItemPublicGetListError, PageAdminDeleteData, PageAdminDeleteError, PageAdminGetData, PageAdminGetResponse, PageAdminGetError, PageAdminUpdateData, PageAdminUpdateResponse, PageAdminUpdateError, PageAdminGetListData, PageAdminGetListResponse, PageAdminGetListError, PageAdminCreateData, PageAdminCreateResponse, PageAdminCreateError, PageAdminSetAsHomePageData, PageAdminSetAsHomePageError, PagesPublicFindBySlugData, PagesPublicFindBySlugResponse, PagesPublicFindBySlugError, PagesPublicFindDefaultHomePageData, PagesPublicFindDefaultHomePageResponse, PagesPublicFindDefaultHomePageError, PagesPublicDoesSlugExistData, PagesPublicDoesSlugExistResponse, PagesPublicDoesSlugExistError, PermissionsGetData, PermissionsGetResponse, PermissionsGetError, PermissionsUpdateData, PermissionsUpdateError, ProfileGetData, ProfileGetResponse, ProfileGetError, ProfileUpdateData, ProfileUpdateResponse, ProfileUpdateError, ProfileChangePasswordData, ProfileChangePasswordError, RatingPublicDeleteData, RatingPublicDeleteError, RatingPublicGetGroupedStarCountsData, RatingPublicGetGroupedStarCountsResponse, RatingPublicGetGroupedStarCountsError, RatingPublicCreateData, RatingPublicCreateResponse, RatingPublicCreateError, ReactionPublicGetForSelectionData, ReactionPublicGetForSelectionResponse, ReactionPublicGetForSelectionError, ReactionPublicDeleteData, ReactionPublicDeleteError, ReactionPublicCreateData, ReactionPublicCreateError, RoleGetAllListData, RoleGetAllListResponse, RoleGetAllListError, RoleGetListData, RoleGetListResponse, RoleGetListError, RoleCreateData, RoleCreateResponse, RoleCreateError, RoleDeleteData, RoleDeleteError, RoleGetData, RoleGetResponse, RoleGetError, RoleUpdateData, RoleUpdateResponse, RoleUpdateError, TagAdminGetListData, TagAdminGetListResponse, TagAdminGetListError, TagAdminCreateData, TagAdminCreateResponse, TagAdminCreateError, TagAdminDeleteData, TagAdminDeleteError, TagAdminGetData, TagAdminGetResponse, TagAdminGetError, TagAdminUpdateData, TagAdminUpdateResponse, TagAdminUpdateError, TagAdminGetTagDefinitionsData, TagAdminGetTagDefinitionsResponse, TagAdminGetTagDefinitionsError, TagPublicGetAllRelatedTagsData, TagPublicGetAllRelatedTagsResponse, TagPublicGetAllRelatedTagsError, TagPublicGetPopularTagsData, TagPublicGetPopularTagsResponse, TagPublicGetPopularTagsError, TenantGetTenantGuidData, TenantGetTenantGuidResponse, TenantAddHostData, TenantAddHostResponse, TenantGetTenantHostData, TenantGetTenantHostResponse, TenantDeleteData, TenantDeleteError, TenantGetData, TenantGetResponse, TenantGetError, TenantUpdateData, TenantUpdateResponse, TenantUpdateError, TenantGetListData, TenantGetListResponse, TenantGetListError, TenantCreateData, TenantCreateResponse, TenantCreateError, TenantDeleteDefaultConnectionStringData, TenantDeleteDefaultConnectionStringError, TenantGetDefaultConnectionStringData, TenantGetDefaultConnectionStringResponse, TenantGetDefaultConnectionStringError, TenantUpdateDefaultConnectionStringData, TenantUpdateDefaultConnectionStringError, TimeZoneSettingsGetData, TimeZoneSettingsGetResponse, TimeZoneSettingsGetError, TimeZoneSettingsUpdateData, TimeZoneSettingsUpdateError, TimeZoneSettingsGetTimezonesData, TimeZoneSettingsGetTimezonesResponse, TimeZoneSettingsGetTimezonesError, UserDeleteData, UserDeleteError, UserGetData, UserGetResponse, UserGetError, UserUpdateData, UserUpdateResponse, UserUpdateError, UserGetListData, UserGetListResponse, UserGetListError, UserCreateData, UserCreateResponse, UserCreateError, UserGetRolesData, UserGetRolesResponse, UserGetRolesError, UserUpdateRolesData, UserUpdateRolesError, UserGetAssignableRolesData, UserGetAssignableRolesResponse, UserGetAssignableRolesError, UserFindByUsernameData, UserFindByUsernameResponse, UserFindByUsernameError, UserFindByEmailData, UserFindByEmailResponse, UserFindByEmailError, UserLookupFindByIdData, UserLookupFindByIdResponse, UserLookupFindByIdError, UserLookupFindByUserNameData, UserLookupFindByUserNameResponse, UserLookupFindByUserNameError, UserLookupSearchData, UserLookupSearchResponse, UserLookupSearchError, UserLookupGetCountData, UserLookupGetCountResponse, UserLookupGetCountError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const abpApiDefinitionGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApiDefinitionGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApiDefinitionGetResponse, AbpApiDefinitionGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/api-definition',
        ...options
    });
};

export const abpApplicationConfigurationGet = <ThrowOnError extends boolean = false>(options?: Options<AbpApplicationConfigurationGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<AbpApplicationConfigurationGetResponse, AbpApplicationConfigurationGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-configuration',
        ...options
    });
};

export const abpApplicationLocalizationGet = <ThrowOnError extends boolean = false>(options: Options<AbpApplicationLocalizationGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpApplicationLocalizationGetResponse, AbpApplicationLocalizationGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/application-localization',
        ...options
    });
};

export const abpTenantFindTenantByName = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByNameResponse, AbpTenantFindTenantByNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-name/{name}',
        ...options
    });
};

export const abpTenantFindTenantById = <ThrowOnError extends boolean = false>(options: Options<AbpTenantFindTenantByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<AbpTenantFindTenantByIdResponse, AbpTenantFindTenantByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/abp/multi-tenancy/tenants/by-id/{id}',
        ...options
    });
};

export const accountRegister = <ThrowOnError extends boolean = false>(options?: Options<AccountRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountRegisterResponse, AccountRegisterError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountSendPasswordResetCode = <ThrowOnError extends boolean = false>(options?: Options<AccountSendPasswordResetCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AccountSendPasswordResetCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/send-password-reset-code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountVerifyPasswordResetToken = <ThrowOnError extends boolean = false>(options?: Options<AccountVerifyPasswordResetTokenData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<AccountVerifyPasswordResetTokenResponse, AccountVerifyPasswordResetTokenError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/verify-password-reset-token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const accountResetPassword = <ThrowOnError extends boolean = false>(options?: Options<AccountResetPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, AccountResetPasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/reset-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogAdminDelete = <ThrowOnError extends boolean = false>(options: Options<BlogAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, BlogAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}',
        ...options
    });
};

export const blogAdminGet = <ThrowOnError extends boolean = false>(options: Options<BlogAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogAdminGetResponse, BlogAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}',
        ...options
    });
};

export const blogAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogAdminUpdateResponse, BlogAdminUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<BlogAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogAdminGetListResponse, BlogAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs',
        ...options
    });
};

export const blogAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<BlogAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogAdminCreateResponse, BlogAdminCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogAdminGetAllList = <ThrowOnError extends boolean = false>(options?: Options<BlogAdminGetAllListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogAdminGetAllListResponse, BlogAdminGetAllListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/all',
        ...options
    });
};

export const blogAdminMoveAllBlogPosts = <ThrowOnError extends boolean = false>(options: Options<BlogAdminMoveAllBlogPostsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, BlogAdminMoveAllBlogPostsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{id}/move-all-blog-posts',
        ...options
    });
};

export const blogFeatureGetOrDefault = <ThrowOnError extends boolean = false>(options: Options<BlogFeatureGetOrDefaultData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogFeatureGetOrDefaultResponse, BlogFeatureGetOrDefaultError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit/blogs/{blogId}/features/{featureName}',
        ...options
    });
};

export const blogFeatureAdminGetList = <ThrowOnError extends boolean = false>(options: Options<BlogFeatureAdminGetListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogFeatureAdminGetListResponse, BlogFeatureAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{blogId}/features',
        ...options
    });
};

export const blogFeatureAdminSet = <ThrowOnError extends boolean = false>(options: Options<BlogFeatureAdminSetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, BlogFeatureAdminSetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/{blogId}/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogPostAdminGetListResponse, BlogPostAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts',
        ...options
    });
};

export const blogPostAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogPostAdminCreateResponse, BlogPostAdminCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminDelete = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, BlogPostAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}',
        ...options
    });
};

export const blogPostAdminGet = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostAdminGetResponse, BlogPostAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}',
        ...options
    });
};

export const blogPostAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<BlogPostAdminUpdateResponse, BlogPostAdminUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminPublish = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminPublishData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BlogPostAdminPublishError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}/publish',
        ...options
    });
};

export const blogPostAdminDraft = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminDraftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BlogPostAdminDraftError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}/draft',
        ...options
    });
};

export const blogPostAdminCreateAndPublish = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminCreateAndPublishData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogPostAdminCreateAndPublishResponse, BlogPostAdminCreateAndPublishError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/create-and-publish',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminSendToReview = <ThrowOnError extends boolean = false>(options: Options<BlogPostAdminSendToReviewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<unknown, BlogPostAdminSendToReviewError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/{id}/send-to-review',
        ...options
    });
};

export const blogPostAdminCreateAndSendToReview = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminCreateAndSendToReviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<BlogPostAdminCreateAndSendToReviewResponse, BlogPostAdminCreateAndSendToReviewError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/create-and-send-to-review',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const blogPostAdminHasBlogPostWaitingForReview = <ThrowOnError extends boolean = false>(options?: Options<BlogPostAdminHasBlogPostWaitingForReviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogPostAdminHasBlogPostWaitingForReviewResponse, BlogPostAdminHasBlogPostWaitingForReviewError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/blogs/blog-posts/has-blogpost-waiting-for-review',
        ...options
    });
};

export const blogPostPublicGet = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetResponse, BlogPostPublicGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/{blogSlug}/{blogPostSlug}',
        ...options
    });
};

export const blogPostPublicGetList = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetListResponse, BlogPostPublicGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/{blogSlug}',
        ...options
    });
};

export const blogPostPublicGetAuthorsHasBlogPosts = <ThrowOnError extends boolean = false>(options?: Options<BlogPostPublicGetAuthorsHasBlogPostsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<BlogPostPublicGetAuthorsHasBlogPostsResponse, BlogPostPublicGetAuthorsHasBlogPostsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/authors',
        ...options
    });
};

export const blogPostPublicGetAuthorHasBlogPost = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetAuthorHasBlogPostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetAuthorHasBlogPostResponse, BlogPostPublicGetAuthorHasBlogPostError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/authors/{id}',
        ...options
    });
};

export const blogPostPublicDelete = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, BlogPostPublicDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/{id}',
        ...options
    });
};

export const blogPostPublicGetTagName = <ThrowOnError extends boolean = false>(options: Options<BlogPostPublicGetTagNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<BlogPostPublicGetTagNameResponse, BlogPostPublicGetTagNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/blog-posts/tags/{id}',
        ...options
    });
};

export const clientGetList = <ThrowOnError extends boolean = false>(options?: Options<ClientGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ClientGetListResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management',
        ...options
    });
};

export const clientCreate = <ThrowOnError extends boolean = false>(options?: Options<ClientCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ClientCreateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management',
        ...options
    });
};

export const clientDelete = <ThrowOnError extends boolean = false>(options: Options<ClientDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientGet = <ThrowOnError extends boolean = false>(options: Options<ClientGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ClientGetResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientUpdate = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<ClientUpdateResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/{id}',
        ...options
    });
};

export const clientAddRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddRedirectUriData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientAddRedirectUriResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/add-redirect-uri/{id}',
        ...options
    });
};

export const clientAddPostLogoutRedirectUri = <ThrowOnError extends boolean = false>(options: Options<ClientAddPostLogoutRedirectUriData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientAddPostLogoutRedirectUriResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/add-post-logout-redirect-uri/{id}',
        ...options
    });
};

export const clientUpdateClientType = <ThrowOnError extends boolean = false>(options: Options<ClientUpdateClientTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ClientUpdateClientTypeResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/client-management/update-client-type/{id}',
        ...options
    });
};

export const cmsKitPublicGlobalResourcesGetGlobalStyle = <ThrowOnError extends boolean = false>(options?: Options<CmsKitPublicGlobalResourcesGetGlobalStyleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/cms-kit/global-resources/style',
        ...options
    });
};

export const cmsKitPublicGlobalResourcesGetGlobalScript = <ThrowOnError extends boolean = false>(options?: Options<CmsKitPublicGlobalResourcesGetGlobalScriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/cms-kit/global-resources/script',
        ...options
    });
};

export const commentAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<CommentAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CommentAdminGetListResponse, CommentAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments',
        ...options
    });
};

export const commentAdminDelete = <ThrowOnError extends boolean = false>(options: Options<CommentAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, CommentAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/{id}',
        ...options
    });
};

export const commentAdminGet = <ThrowOnError extends boolean = false>(options: Options<CommentAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CommentAdminGetResponse, CommentAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/{id}',
        ...options
    });
};

export const commentAdminUpdateApprovalStatus = <ThrowOnError extends boolean = false>(options: Options<CommentAdminUpdateApprovalStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, CommentAdminUpdateApprovalStatusError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/{id}/approval-status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const commentAdminUpdateSettings = <ThrowOnError extends boolean = false>(options?: Options<CommentAdminUpdateSettingsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, CommentAdminUpdateSettingsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/settings',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const commentAdminGetWaitingCount = <ThrowOnError extends boolean = false>(options?: Options<CommentAdminGetWaitingCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CommentAdminGetWaitingCountResponse, CommentAdminGetWaitingCountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/comments/waiting-count',
        ...options
    });
};

export const commentPublicGetList = <ThrowOnError extends boolean = false>(options: Options<CommentPublicGetListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<CommentPublicGetListResponse, CommentPublicGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{entityType}/{entityId}',
        ...options
    });
};

export const commentPublicCreate = <ThrowOnError extends boolean = false>(options: Options<CommentPublicCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CommentPublicCreateResponse, CommentPublicCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{entityType}/{entityId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const commentPublicDelete = <ThrowOnError extends boolean = false>(options: Options<CommentPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, CommentPublicDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{id}',
        ...options
    });
};

export const commentPublicUpdate = <ThrowOnError extends boolean = false>(options: Options<CommentPublicUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<CommentPublicUpdateResponse, CommentPublicUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/comments/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const dynamicClaimsRefresh = <ThrowOnError extends boolean = false>(options?: Options<DynamicClaimsRefreshData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, DynamicClaimsRefreshError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/dynamic-claims/refresh',
        ...options
    });
};

export const emailSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<EmailSettingsGetResponse, EmailSettingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options
    });
};

export const emailSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, EmailSettingsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const emailSettingsSendTestEmail = <ThrowOnError extends boolean = false>(options?: Options<EmailSettingsSendTestEmailData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, EmailSettingsSendTestEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/emailing/send-test-email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const entityTagAdminRemoveTagFromEntity = <ThrowOnError extends boolean = false>(options: Options<EntityTagAdminRemoveTagFromEntityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, EntityTagAdminRemoveTagFromEntityError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/entity-tags',
        ...options
    });
};

export const entityTagAdminAddTagToEntity = <ThrowOnError extends boolean = false>(options?: Options<EntityTagAdminAddTagToEntityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, EntityTagAdminAddTagToEntityError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/entity-tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const entityTagAdminSetEntityTags = <ThrowOnError extends boolean = false>(options?: Options<EntityTagAdminSetEntityTagsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, EntityTagAdminSetEntityTagsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/entity-tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const featuresDelete = <ThrowOnError extends boolean = false>(options?: Options<FeaturesDeleteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<unknown, FeaturesDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresGet = <ThrowOnError extends boolean = false>(options?: Options<FeaturesGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<FeaturesGetResponse, FeaturesGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options
    });
};

export const featuresUpdate = <ThrowOnError extends boolean = false>(options?: Options<FeaturesUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, FeaturesUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/feature-management/features',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const globalResourceAdminGet = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourceAdminGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalResourceAdminGetResponse, GlobalResourceAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/global-resources',
        ...options
    });
};

export const globalResourceAdminSetGlobalResources = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourceAdminSetGlobalResourcesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, GlobalResourceAdminSetGlobalResourcesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/global-resources',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const globalResourcePublicGetGlobalScript = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourcePublicGetGlobalScriptData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalResourcePublicGetGlobalScriptResponse, GlobalResourcePublicGetGlobalScriptError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/global-resources/script',
        ...options
    });
};

export const globalResourcePublicGetGlobalStyle = <ThrowOnError extends boolean = false>(options?: Options<GlobalResourcePublicGetGlobalStyleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GlobalResourcePublicGetGlobalStyleResponse, GlobalResourcePublicGetGlobalStyleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/global-resources/style',
        ...options
    });
};

export const loginLogin = <ThrowOnError extends boolean = false>(options?: Options<LoginLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginLoginResponse, LoginLoginError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginLogout = <ThrowOnError extends boolean = false>(options?: Options<LoginLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<unknown, LoginLogoutError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/logout',
        ...options
    });
};

export const loginCheckPassword = <ThrowOnError extends boolean = false>(options?: Options<LoginCheckPasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LoginCheckPasswordResponse, LoginCheckPasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/check-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const markedItemPublicGetForUser = <ThrowOnError extends boolean = false>(options: Options<MarkedItemPublicGetForUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MarkedItemPublicGetForUserResponse, MarkedItemPublicGetForUserError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/marked-items/{entityType}/{entityId}',
        ...options
    });
};

export const markedItemPublicToggle = <ThrowOnError extends boolean = false>(options: Options<MarkedItemPublicToggleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MarkedItemPublicToggleResponse, MarkedItemPublicToggleError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/marked-items/{entityType}/{entityId}',
        ...options
    });
};

export const mediaDescriptorDownload = <ThrowOnError extends boolean = false>(options: Options<MediaDescriptorDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MediaDescriptorDownloadResponse, MediaDescriptorDownloadError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit/media/{id}',
        ...options
    });
};

export const mediaDescriptorAdminCreate = <ThrowOnError extends boolean = false>(options: Options<MediaDescriptorAdminCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MediaDescriptorAdminCreateResponse, MediaDescriptorAdminCreateError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/media/{entityType}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const mediaDescriptorAdminDelete = <ThrowOnError extends boolean = false>(options: Options<MediaDescriptorAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, MediaDescriptorAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/media/{id}',
        ...options
    });
};

export const menuItemAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemAdminGetListResponse, MenuItemAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items',
        ...options
    });
};

export const menuItemAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MenuItemAdminCreateResponse, MenuItemAdminCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const menuItemAdminDelete = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, MenuItemAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}',
        ...options
    });
};

export const menuItemAdminGet = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<MenuItemAdminGetResponse, MenuItemAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}',
        ...options
    });
};

export const menuItemAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<MenuItemAdminUpdateResponse, MenuItemAdminUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const menuItemAdminMoveMenuItem = <ThrowOnError extends boolean = false>(options: Options<MenuItemAdminMoveMenuItemData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, MenuItemAdminMoveMenuItemError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/{id}/move',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const menuItemAdminGetPageLookup = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminGetPageLookupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemAdminGetPageLookupResponse, MenuItemAdminGetPageLookupError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/lookup/pages',
        ...options
    });
};

export const menuItemAdminGetPermissionLookup = <ThrowOnError extends boolean = false>(options?: Options<MenuItemAdminGetPermissionLookupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemAdminGetPermissionLookupResponse, MenuItemAdminGetPermissionLookupError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/menu-items/lookup/permissions',
        ...options
    });
};

export const menuItemPublicGetList = <ThrowOnError extends boolean = false>(options?: Options<MenuItemPublicGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<MenuItemPublicGetListResponse, MenuItemPublicGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/menu-items',
        ...options
    });
};

export const pageAdminDelete = <ThrowOnError extends boolean = false>(options: Options<PageAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, PageAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/{id}',
        ...options
    });
};

export const pageAdminGet = <ThrowOnError extends boolean = false>(options: Options<PageAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<PageAdminGetResponse, PageAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/{id}',
        ...options
    });
};

export const pageAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<PageAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PageAdminUpdateResponse, PageAdminUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const pageAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<PageAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PageAdminGetListResponse, PageAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages',
        ...options
    });
};

export const pageAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<PageAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageAdminCreateResponse, PageAdminCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const pageAdminSetAsHomePage = <ThrowOnError extends boolean = false>(options: Options<PageAdminSetAsHomePageData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, PageAdminSetAsHomePageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/pages/setashomepage/{id}',
        ...options
    });
};

export const pagesPublicFindBySlug = <ThrowOnError extends boolean = false>(options?: Options<PagesPublicFindBySlugData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PagesPublicFindBySlugResponse, PagesPublicFindBySlugError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/pages/by-slug',
        ...options
    });
};

export const pagesPublicFindDefaultHomePage = <ThrowOnError extends boolean = false>(options?: Options<PagesPublicFindDefaultHomePageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PagesPublicFindDefaultHomePageResponse, PagesPublicFindDefaultHomePageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/pages/home',
        ...options
    });
};

export const pagesPublicDoesSlugExist = <ThrowOnError extends boolean = false>(options?: Options<PagesPublicDoesSlugExistData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PagesPublicDoesSlugExistResponse, PagesPublicDoesSlugExistError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/pages/exist',
        ...options
    });
};

export const permissionsGet = <ThrowOnError extends boolean = false>(options?: Options<PermissionsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<PermissionsGetResponse, PermissionsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options
    });
};

export const permissionsUpdate = <ThrowOnError extends boolean = false>(options?: Options<PermissionsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<unknown, PermissionsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/permission-management/permissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileGet = <ThrowOnError extends boolean = false>(options?: Options<ProfileGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ProfileGetResponse, ProfileGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options
    });
};

export const profileUpdate = <ThrowOnError extends boolean = false>(options?: Options<ProfileUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<ProfileUpdateResponse, ProfileUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const profileChangePassword = <ThrowOnError extends boolean = false>(options?: Options<ProfileChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, ProfileChangePasswordError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/account/my-profile/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const ratingPublicDelete = <ThrowOnError extends boolean = false>(options: Options<RatingPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RatingPublicDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/ratings/{entityType}/{entityId}',
        ...options
    });
};

export const ratingPublicGetGroupedStarCounts = <ThrowOnError extends boolean = false>(options: Options<RatingPublicGetGroupedStarCountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RatingPublicGetGroupedStarCountsResponse, RatingPublicGetGroupedStarCountsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/ratings/{entityType}/{entityId}',
        ...options
    });
};

export const ratingPublicCreate = <ThrowOnError extends boolean = false>(options: Options<RatingPublicCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RatingPublicCreateResponse, RatingPublicCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/ratings/{entityType}/{entityId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const reactionPublicGetForSelection = <ThrowOnError extends boolean = false>(options: Options<ReactionPublicGetForSelectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReactionPublicGetForSelectionResponse, ReactionPublicGetForSelectionError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/reactions/{entityType}/{entityId}',
        ...options
    });
};

export const reactionPublicDelete = <ThrowOnError extends boolean = false>(options: Options<ReactionPublicDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, ReactionPublicDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/reactions/{entityType}/{entityId}/{reaction}',
        ...options
    });
};

export const reactionPublicCreate = <ThrowOnError extends boolean = false>(options: Options<ReactionPublicCreateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, ReactionPublicCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/reactions/{entityType}/{entityId}/{reaction}',
        ...options
    });
};

export const roleGetAllList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetAllListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetAllListResponse, RoleGetAllListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/all',
        ...options
    });
};

export const roleGetList = <ThrowOnError extends boolean = false>(options?: Options<RoleGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<RoleGetListResponse, RoleGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options
    });
};

export const roleCreate = <ThrowOnError extends boolean = false>(options?: Options<RoleCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<RoleCreateResponse, RoleCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const roleDelete = <ThrowOnError extends boolean = false>(options: Options<RoleDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, RoleDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleGet = <ThrowOnError extends boolean = false>(options: Options<RoleGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<RoleGetResponse, RoleGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options
    });
};

export const roleUpdate = <ThrowOnError extends boolean = false>(options: Options<RoleUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<RoleUpdateResponse, RoleUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/roles/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tagAdminGetList = <ThrowOnError extends boolean = false>(options?: Options<TagAdminGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagAdminGetListResponse, TagAdminGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags',
        ...options
    });
};

export const tagAdminCreate = <ThrowOnError extends boolean = false>(options?: Options<TagAdminCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TagAdminCreateResponse, TagAdminCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tagAdminDelete = <ThrowOnError extends boolean = false>(options: Options<TagAdminDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, TagAdminDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/{id}',
        ...options
    });
};

export const tagAdminGet = <ThrowOnError extends boolean = false>(options: Options<TagAdminGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagAdminGetResponse, TagAdminGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/{id}',
        ...options
    });
};

export const tagAdminUpdate = <ThrowOnError extends boolean = false>(options: Options<TagAdminUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TagAdminUpdateResponse, TagAdminUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tagAdminGetTagDefinitions = <ThrowOnError extends boolean = false>(options?: Options<TagAdminGetTagDefinitionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TagAdminGetTagDefinitionsResponse, TagAdminGetTagDefinitionsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-admin/tags/tag-definitions',
        ...options
    });
};

export const tagPublicGetAllRelatedTags = <ThrowOnError extends boolean = false>(options: Options<TagPublicGetAllRelatedTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagPublicGetAllRelatedTagsResponse, TagPublicGetAllRelatedTagsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/tags/{entityType}/{entityId}',
        ...options
    });
};

export const tagPublicGetPopularTags = <ThrowOnError extends boolean = false>(options: Options<TagPublicGetPopularTagsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TagPublicGetPopularTagsResponse, TagPublicGetPopularTagsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/cms-kit-public/tags/popular/{entityType}/{maxCount}',
        ...options
    });
};

export const tenantGetTenantGuid = <ThrowOnError extends boolean = false>(options?: Options<TenantGetTenantGuidData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetTenantGuidResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy',
        ...options
    });
};

export const tenantAddHost = <ThrowOnError extends boolean = false>(options?: Options<TenantAddHostData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantAddHostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy',
        ...options
    });
};

export const tenantGetTenantHost = <ThrowOnError extends boolean = false>(options: Options<TenantGetTenantHostData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetTenantHostResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/{id}',
        ...options
    });
};

export const tenantDelete = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, TenantDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantGet = <ThrowOnError extends boolean = false>(options: Options<TenantGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetResponse, TenantGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options
    });
};

export const tenantUpdate = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<TenantUpdateResponse, TenantUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantGetList = <ThrowOnError extends boolean = false>(options?: Options<TenantGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TenantGetListResponse, TenantGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options
    });
};

export const tenantCreate = <ThrowOnError extends boolean = false>(options?: Options<TenantCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<TenantCreateResponse, TenantCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const tenantDeleteDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantDeleteDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, TenantDeleteDefaultConnectionStringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantGetDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantGetDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<TenantGetDefaultConnectionStringResponse, TenantGetDefaultConnectionStringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const tenantUpdateDefaultConnectionString = <ThrowOnError extends boolean = false>(options: Options<TenantUpdateDefaultConnectionStringData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, TenantUpdateDefaultConnectionStringError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/multi-tenancy/tenants/{id}/default-connection-string',
        ...options
    });
};

export const timeZoneSettingsGet = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetResponse, TimeZoneSettingsGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsUpdate = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsUpdateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<unknown, TimeZoneSettingsUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone',
        ...options
    });
};

export const timeZoneSettingsGetTimezones = <ThrowOnError extends boolean = false>(options?: Options<TimeZoneSettingsGetTimezonesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<TimeZoneSettingsGetTimezonesResponse, TimeZoneSettingsGetTimezonesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/setting-management/timezone/timezones',
        ...options
    });
};

export const userDelete = <ThrowOnError extends boolean = false>(options: Options<UserDeleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<unknown, UserDeleteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userGet = <ThrowOnError extends boolean = false>(options: Options<UserGetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetResponse, UserGetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options
    });
};

export const userUpdate = <ThrowOnError extends boolean = false>(options: Options<UserUpdateData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UserUpdateResponse, UserUpdateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetList = <ThrowOnError extends boolean = false>(options?: Options<UserGetListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetListResponse, UserGetListError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options
    });
};

export const userCreate = <ThrowOnError extends boolean = false>(options?: Options<UserCreateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<UserCreateResponse, UserCreateError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetRoles = <ThrowOnError extends boolean = false>(options: Options<UserGetRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserGetRolesResponse, UserGetRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options
    });
};

export const userUpdateRoles = <ThrowOnError extends boolean = false>(options: Options<UserUpdateRolesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<unknown, UserUpdateRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/{id}/roles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const userGetAssignableRoles = <ThrowOnError extends boolean = false>(options?: Options<UserGetAssignableRolesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserGetAssignableRolesResponse, UserGetAssignableRolesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/assignable-roles',
        ...options
    });
};

export const userFindByUsername = <ThrowOnError extends boolean = false>(options: Options<UserFindByUsernameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByUsernameResponse, UserFindByUsernameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-username/{userName}',
        ...options
    });
};

export const userFindByEmail = <ThrowOnError extends boolean = false>(options: Options<UserFindByEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserFindByEmailResponse, UserFindByEmailError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/by-email/{email}',
        ...options
    });
};

export const userLookupFindById = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByIdResponse, UserLookupFindByIdError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/{id}',
        ...options
    });
};

export const userLookupFindByUserName = <ThrowOnError extends boolean = false>(options: Options<UserLookupFindByUserNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<UserLookupFindByUserNameResponse, UserLookupFindByUserNameError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/by-username/{userName}',
        ...options
    });
};

export const userLookupSearch = <ThrowOnError extends boolean = false>(options?: Options<UserLookupSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupSearchResponse, UserLookupSearchError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/search',
        ...options
    });
};

export const userLookupGetCount = <ThrowOnError extends boolean = false>(options?: Options<UserLookupGetCountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<UserLookupGetCountResponse, UserLookupGetCountError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/identity/users/lookup/count',
        ...options
    });
};