// This file is auto-generated by @hey-api/openapi-ts

export type AbpLoginResult = {
    result?: LoginResultType;
    readonly description?: (string) | null;
};

export type ActionApiDescriptionModel = {
    uniqueName?: (string) | null;
    name?: (string) | null;
    httpMethod?: (string) | null;
    url?: (string) | null;
    supportedVersions?: Array<(string)> | null;
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    parameters?: Array<ParameterApiDescriptionModel> | null;
    returnValue?: ReturnValueApiDescriptionModel;
    allowAnonymous?: (boolean) | null;
    implementFrom?: (string) | null;
};

export type ApplicationApiDescriptionModel = {
    modules?: {
        [key: string]: ModuleApiDescriptionModel;
    } | null;
    types?: {
        [key: string]: TypeApiDescriptionModel;
    } | null;
};

export type ApplicationAuthConfigurationDto = {
    grantedPolicies?: {
        [key: string]: (boolean);
    } | null;
};

export type ApplicationConfigurationDto = {
    localization?: ApplicationLocalizationConfigurationDto;
    auth?: ApplicationAuthConfigurationDto;
    setting?: ApplicationSettingConfigurationDto;
    currentUser?: CurrentUserDto;
    features?: ApplicationFeatureConfigurationDto;
    globalFeatures?: ApplicationGlobalFeatureConfigurationDto;
    multiTenancy?: MultiTenancyInfoDto;
    currentTenant?: CurrentTenantDto;
    timing?: TimingDto;
    clock?: ClockDto;
    objectExtensions?: ObjectExtensionsDto;
    extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type ApplicationFeatureConfigurationDto = {
    values?: {
        [key: string]: ((string) | null);
    } | null;
};

export type ApplicationGlobalFeatureConfigurationDto = {
    enabledFeatures?: Array<(string)> | null;
};

export type ApplicationLocalizationConfigurationDto = {
    values?: {
        [key: string]: {
            [key: string]: (string);
        };
    } | null;
    resources?: {
        [key: string]: ApplicationLocalizationResourceDto;
    } | null;
    languages?: Array<LanguageInfo> | null;
    currentCulture?: CurrentCultureDto;
    defaultResourceName?: (string) | null;
    languagesMap?: {
        [key: string]: Array<NameValue>;
    } | null;
    languageFilesMap?: {
        [key: string]: Array<NameValue>;
    } | null;
};

export type ApplicationLocalizationDto = {
    resources?: {
        [key: string]: ApplicationLocalizationResourceDto;
    } | null;
    currentCulture?: CurrentCultureDto;
};

export type ApplicationLocalizationResourceDto = {
    texts?: {
        [key: string]: (string);
    } | null;
    baseResources?: Array<(string)> | null;
};

export type ApplicationSettingConfigurationDto = {
    values?: {
        [key: string]: ((string) | null);
    } | null;
};

export type ChangePasswordInput = {
    currentPassword?: (string) | null;
    newPassword: string;
};

export type ClientDto = {
    clientId?: (string) | null;
    displayName?: (string) | null;
    postLogoutRedirectUris?: (string) | null;
    redirectUris?: (string) | null;
    permissions?: (string) | null;
    type?: (string) | null;
};

export type ClockDto = {
    kind?: (string) | null;
};

export type ControllerApiDescriptionModel = {
    controllerName?: (string) | null;
    controllerGroupName?: (string) | null;
    isRemoteService?: boolean;
    isIntegrationService?: boolean;
    apiVersion?: (string) | null;
    type?: (string) | null;
    interfaces?: Array<ControllerInterfaceApiDescriptionModel> | null;
    actions?: {
        [key: string]: ActionApiDescriptionModel;
    } | null;
};

export type ControllerInterfaceApiDescriptionModel = {
    type?: (string) | null;
    name?: (string) | null;
    methods?: Array<InterfaceMethodApiDescriptionModel> | null;
};

export type CurrentCultureDto = {
    displayName?: (string) | null;
    englishName?: (string) | null;
    threeLetterIsoLanguageName?: (string) | null;
    twoLetterIsoLanguageName?: (string) | null;
    isRightToLeft?: boolean;
    cultureName?: (string) | null;
    name?: (string) | null;
    nativeName?: (string) | null;
    dateTimeFormat?: DateTimeFormatDto;
};

export type CurrentTenantDto = {
    id?: (string) | null;
    name?: (string) | null;
    isAvailable?: boolean;
};

export type CurrentUserDto = {
    isAuthenticated?: boolean;
    id?: (string) | null;
    tenantId?: (string) | null;
    impersonatorUserId?: (string) | null;
    impersonatorTenantId?: (string) | null;
    impersonatorUserName?: (string) | null;
    impersonatorTenantName?: (string) | null;
    userName?: (string) | null;
    name?: (string) | null;
    surName?: (string) | null;
    email?: (string) | null;
    emailVerified?: boolean;
    phoneNumber?: (string) | null;
    phoneNumberVerified?: boolean;
    roles?: Array<(string)> | null;
    sessionId?: (string) | null;
};

export type CustomTenantDto = {
    id?: string;
    name?: (string) | null;
    host?: (string) | null;
};

export type DateTimeFormatDto = {
    calendarAlgorithmType?: (string) | null;
    dateTimeFormatLong?: (string) | null;
    shortDatePattern?: (string) | null;
    fullDateTimePattern?: (string) | null;
    dateSeparator?: (string) | null;
    shortTimePattern?: (string) | null;
    longTimePattern?: (string) | null;
};

export type EmailSettingsDto = {
    smtpHost?: (string) | null;
    smtpPort?: number;
    smtpUserName?: (string) | null;
    smtpPassword?: (string) | null;
    smtpDomain?: (string) | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress?: (string) | null;
    defaultFromDisplayName?: (string) | null;
};

export type EntityExtensionDto = {
    properties?: {
        [key: string]: ExtensionPropertyDto;
    } | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
};

export type ExtensionEnumDto = {
    fields?: Array<ExtensionEnumFieldDto> | null;
    localizationResource?: (string) | null;
};

export type ExtensionEnumFieldDto = {
    name?: (string) | null;
    value?: unknown;
};

export type ExtensionPropertyApiCreateDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyApiDto = {
    onGet?: ExtensionPropertyApiGetDto;
    onCreate?: ExtensionPropertyApiCreateDto;
    onUpdate?: ExtensionPropertyApiUpdateDto;
};

export type ExtensionPropertyApiGetDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyApiUpdateDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyAttributeDto = {
    typeSimple?: (string) | null;
    config?: {
        [key: string]: unknown;
    } | null;
};

export type ExtensionPropertyDto = {
    type?: (string) | null;
    typeSimple?: (string) | null;
    displayName?: LocalizableStringDto;
    api?: ExtensionPropertyApiDto;
    ui?: ExtensionPropertyUiDto;
    attributes?: Array<ExtensionPropertyAttributeDto> | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
    defaultValue?: unknown;
};

export type ExtensionPropertyUiDto = {
    onTable?: ExtensionPropertyUiTableDto;
    onCreateForm?: ExtensionPropertyUiFormDto;
    onEditForm?: ExtensionPropertyUiFormDto;
    lookup?: ExtensionPropertyUiLookupDto;
};

export type ExtensionPropertyUiFormDto = {
    isVisible?: boolean;
};

export type ExtensionPropertyUiLookupDto = {
    url?: (string) | null;
    resultListPropertyName?: (string) | null;
    displayPropertyName?: (string) | null;
    valuePropertyName?: (string) | null;
    filterParamName?: (string) | null;
};

export type ExtensionPropertyUiTableDto = {
    isVisible?: boolean;
};

export type FeatureDto = {
    name?: (string) | null;
    displayName?: (string) | null;
    value?: (string) | null;
    provider?: FeatureProviderDto;
    description?: (string) | null;
    valueType?: IStringValueType;
    depth?: number;
    parentName?: (string) | null;
};

export type FeatureGroupDto = {
    name?: (string) | null;
    displayName?: (string) | null;
    features?: Array<FeatureDto> | null;
};

export type FeatureProviderDto = {
    name?: (string) | null;
    key?: (string) | null;
};

export type FindTenantResultDto = {
    success?: boolean;
    tenantId?: (string) | null;
    name?: (string) | null;
    normalizedName?: (string) | null;
    isActive?: boolean;
};

export type GetFeatureListResultDto = {
    groups?: Array<FeatureGroupDto> | null;
};

export type GetPermissionListResultDto = {
    entityDisplayName?: (string) | null;
    groups?: Array<PermissionGroupDto> | null;
};

export type IanaTimeZone = {
    timeZoneName?: (string) | null;
};

export type IdentityRoleCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
};

export type IdentityRoleDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: (string) | null;
    isDefault?: boolean;
    isStatic?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: (string) | null;
};

export type IdentityRoleUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: (string) | null;
};

export type IdentityUserCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    name?: (string) | null;
    surname?: (string) | null;
    email: string;
    phoneNumber?: (string) | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<(string)> | null;
    password: string;
};

export type IdentityUserDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: (string) | null;
    lastModificationTime?: (string) | null;
    lastModifierId?: (string) | null;
    isDeleted?: boolean;
    deleterId?: (string) | null;
    deletionTime?: (string) | null;
    tenantId?: (string) | null;
    userName?: (string) | null;
    name?: (string) | null;
    surname?: (string) | null;
    email?: (string) | null;
    emailConfirmed?: boolean;
    phoneNumber?: (string) | null;
    phoneNumberConfirmed?: boolean;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    lockoutEnd?: (string) | null;
    concurrencyStamp?: (string) | null;
    entityVersion?: number;
    lastPasswordChangeTime?: (string) | null;
};

export type IdentityUserUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    name?: (string) | null;
    surname?: (string) | null;
    email: string;
    phoneNumber?: (string) | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<(string)> | null;
    password?: (string) | null;
    concurrencyStamp?: (string) | null;
};

export type IdentityUserUpdateRolesDto = {
    roleNames: Array<(string)>;
};

export type InterfaceMethodApiDescriptionModel = {
    name?: (string) | null;
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    returnValue?: ReturnValueApiDescriptionModel;
};

export type IStringValueType = {
    readonly name?: (string) | null;
    readonly properties?: {
        [key: string]: unknown;
    } | null;
    validator?: IValueValidator;
};

export type IValueValidator = {
    readonly name?: (string) | null;
    readonly properties?: {
        [key: string]: unknown;
    } | null;
};

export type LanguageInfo = {
    cultureName?: (string) | null;
    uiCultureName?: (string) | null;
    displayName?: (string) | null;
    readonly twoLetterISOLanguageName?: (string) | null;
};

export type ListResultDtoOfIdentityRoleDto = {
    items?: Array<IdentityRoleDto> | null;
};

export type ListResultDtoOfUserData = {
    items?: Array<UserData> | null;
};

export type LocalizableStringDto = {
    name?: (string) | null;
    resource?: (string) | null;
};

export type LoginResultType = 1 | 2 | 3 | 4 | 5;

export type MethodParameterApiDescriptionModel = {
    name?: (string) | null;
    typeAsString?: (string) | null;
    type?: (string) | null;
    typeSimple?: (string) | null;
    isOptional?: boolean;
    defaultValue?: unknown;
};

export type ModuleApiDescriptionModel = {
    rootPath?: (string) | null;
    remoteServiceName?: (string) | null;
    controllers?: {
        [key: string]: ControllerApiDescriptionModel;
    } | null;
};

export type ModuleExtensionDto = {
    entities?: {
        [key: string]: EntityExtensionDto;
    } | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
};

export type MultiTenancyInfoDto = {
    isEnabled?: boolean;
};

export type NameValue = {
    name?: (string) | null;
    value?: (string) | null;
};

export type ObjectExtensionsDto = {
    modules?: {
        [key: string]: ModuleExtensionDto;
    } | null;
    enums?: {
        [key: string]: ExtensionEnumDto;
    } | null;
};

export type PagedResultDtoOfIdentityRoleDto = {
    items?: Array<IdentityRoleDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfIdentityUserDto = {
    items?: Array<IdentityUserDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfTenantDto = {
    items?: Array<TenantDto> | null;
    totalCount?: number;
};

export type ParameterApiDescriptionModel = {
    nameOnMethod?: (string) | null;
    name?: (string) | null;
    jsonName?: (string) | null;
    type?: (string) | null;
    typeSimple?: (string) | null;
    isOptional?: boolean;
    defaultValue?: unknown;
    constraintTypes?: Array<(string)> | null;
    bindingSourceId?: (string) | null;
    descriptorName?: (string) | null;
};

export type PermissionGrantInfoDto = {
    name?: (string) | null;
    displayName?: (string) | null;
    parentName?: (string) | null;
    isGranted?: boolean;
    allowedProviders?: Array<(string)> | null;
    grantedProviders?: Array<ProviderInfoDto> | null;
};

export type PermissionGroupDto = {
    name?: (string) | null;
    displayName?: (string) | null;
    displayNameKey?: (string) | null;
    displayNameResource?: (string) | null;
    permissions?: Array<PermissionGrantInfoDto> | null;
};

export type ProfileDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName?: (string) | null;
    email?: (string) | null;
    name?: (string) | null;
    surname?: (string) | null;
    phoneNumber?: (string) | null;
    isExternal?: boolean;
    hasPassword?: boolean;
    concurrencyStamp?: (string) | null;
};

export type PropertyApiDescriptionModel = {
    name?: (string) | null;
    jsonName?: (string) | null;
    type?: (string) | null;
    typeSimple?: (string) | null;
    isRequired?: boolean;
    minLength?: (number) | null;
    maxLength?: (number) | null;
    minimum?: (string) | null;
    maximum?: (string) | null;
    regex?: (string) | null;
};

export type ProviderInfoDto = {
    providerName?: (string) | null;
    providerKey?: (string) | null;
};

export type RegisterDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    emailAddress: string;
    password: string;
    appName: string;
};

export type RemoteServiceErrorInfo = {
    code?: (string) | null;
    message?: (string) | null;
    details?: (string) | null;
    data?: {
        [key: string]: unknown;
    } | null;
    validationErrors?: Array<RemoteServiceValidationErrorInfo> | null;
};

export type RemoteServiceErrorResponse = {
    error?: RemoteServiceErrorInfo;
};

export type RemoteServiceValidationErrorInfo = {
    message?: (string) | null;
    members?: Array<(string)> | null;
};

export type ResetPasswordDto = {
    userId?: string;
    resetToken: string;
    password: string;
};

export type ReturnValueApiDescriptionModel = {
    type?: (string) | null;
    typeSimple?: (string) | null;
};

export type SendPasswordResetCodeDto = {
    email: string;
    appName: string;
    returnUrl?: (string) | null;
    returnUrlHash?: (string) | null;
};

export type SendTestEmailInput = {
    senderEmailAddress: string;
    targetEmailAddress: string;
    subject: string;
    body?: (string) | null;
};

export type TenantCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
};

export type TenantDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: (string) | null;
    concurrencyStamp?: (string) | null;
};

export type TenantUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    concurrencyStamp?: (string) | null;
};

export type TimeZone = {
    iana?: IanaTimeZone;
    windows?: WindowsTimeZone;
};

export type TimingDto = {
    timeZone?: TimeZone;
};

export type TypeApiDescriptionModel = {
    baseType?: (string) | null;
    isEnum?: boolean;
    enumNames?: Array<(string)> | null;
    enumValues?: Array<unknown> | null;
    genericArguments?: Array<(string)> | null;
    properties?: Array<PropertyApiDescriptionModel> | null;
};

export type UpdateEmailSettingsDto = {
    smtpHost?: (string) | null;
    smtpPort?: number;
    smtpUserName?: (string) | null;
    smtpPassword?: (string) | null;
    smtpDomain?: (string) | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress: string;
    defaultFromDisplayName: string;
};

export type UpdateFeatureDto = {
    name?: (string) | null;
    value?: (string) | null;
};

export type UpdateFeaturesDto = {
    features?: Array<UpdateFeatureDto> | null;
};

export type UpdatePermissionDto = {
    name?: (string) | null;
    isGranted?: boolean;
};

export type UpdatePermissionsDto = {
    permissions?: Array<UpdatePermissionDto> | null;
};

export type UpdateProfileDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName?: (string) | null;
    email?: (string) | null;
    name?: (string) | null;
    surname?: (string) | null;
    phoneNumber?: (string) | null;
    concurrencyStamp?: (string) | null;
};

export type UserData = {
    id?: string;
    tenantId?: (string) | null;
    userName?: (string) | null;
    name?: (string) | null;
    surname?: (string) | null;
    isActive?: boolean;
    email?: (string) | null;
    emailConfirmed?: boolean;
    phoneNumber?: (string) | null;
    phoneNumberConfirmed?: boolean;
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type UserLoginInfo = {
    userNameOrEmailAddress: string;
    password: string;
    rememberMe?: boolean;
};

export type VerifyPasswordResetTokenInput = {
    userId?: string;
    resetToken: string;
};

export type WindowsTimeZone = {
    timeZoneId?: (string) | null;
};

export type AbpApiDefinitionGetData = {
    query?: {
        IncludeTypes?: boolean;
    };
};

export type AbpApiDefinitionGetResponse = (ApplicationApiDescriptionModel);

export type AbpApiDefinitionGetError = (RemoteServiceErrorResponse);

export type AbpApplicationConfigurationGetData = {
    query?: {
        IncludeLocalizationResources?: boolean;
    };
};

export type AbpApplicationConfigurationGetResponse = (ApplicationConfigurationDto);

export type AbpApplicationConfigurationGetError = (RemoteServiceErrorResponse);

export type AbpApplicationLocalizationGetData = {
    query: {
        CultureName: string;
        OnlyDynamics?: boolean;
    };
};

export type AbpApplicationLocalizationGetResponse = (ApplicationLocalizationDto);

export type AbpApplicationLocalizationGetError = (RemoteServiceErrorResponse);

export type AbpTenantFindTenantByNameData = {
    path: {
        name: string;
    };
};

export type AbpTenantFindTenantByNameResponse = (FindTenantResultDto);

export type AbpTenantFindTenantByNameError = (RemoteServiceErrorResponse);

export type AbpTenantFindTenantByIdData = {
    path: {
        id: string;
    };
};

export type AbpTenantFindTenantByIdResponse = (FindTenantResultDto);

export type AbpTenantFindTenantByIdError = (RemoteServiceErrorResponse);

export type AccountRegisterData = {
    body?: RegisterDto;
};

export type AccountRegisterResponse = (IdentityUserDto);

export type AccountRegisterError = (RemoteServiceErrorResponse);

export type AccountSendPasswordResetCodeData = {
    body?: SendPasswordResetCodeDto;
};

export type AccountSendPasswordResetCodeResponse = (unknown);

export type AccountSendPasswordResetCodeError = (RemoteServiceErrorResponse);

export type AccountVerifyPasswordResetTokenData = {
    body?: VerifyPasswordResetTokenInput;
};

export type AccountVerifyPasswordResetTokenResponse = (boolean);

export type AccountVerifyPasswordResetTokenError = (RemoteServiceErrorResponse);

export type AccountResetPasswordData = {
    body?: ResetPasswordDto;
};

export type AccountResetPasswordResponse = (unknown);

export type AccountResetPasswordError = (RemoteServiceErrorResponse);

export type ClientGetListResponse = (Array<ClientDto>);

export type ClientGetListError = unknown;

export type ClientCreateData = {
    query?: {
        ClientId?: string;
        DisplayName?: string;
        Permissions?: string;
        PostLogoutRedirectUris?: string;
        RedirectUris?: string;
        Type?: string;
    };
};

export type ClientCreateResponse = (ClientDto);

export type ClientCreateError = unknown;

export type ClientGetData = {
    path: {
        id: string;
    };
};

export type ClientGetResponse = (ClientDto);

export type ClientGetError = unknown;

export type ClientUpdateData = {
    path: {
        id: string;
    };
    query?: {
        ClientId?: string;
        DisplayName?: string;
        Permissions?: string;
        PostLogoutRedirectUris?: string;
        RedirectUris?: string;
        Type?: string;
    };
};

export type ClientUpdateResponse = (ClientDto);

export type ClientUpdateError = unknown;

export type ClientDeleteData = {
    path: {
        id: string;
    };
};

export type ClientDeleteResponse = (unknown);

export type ClientDeleteError = unknown;

export type ClientAddRedirectUriData = {
    path: {
        id: string;
    };
    query?: {
        redirectUri?: string;
    };
};

export type ClientAddRedirectUriResponse = (ClientDto);

export type ClientAddRedirectUriError = unknown;

export type ClientAddPostLogoutRedirectUriData = {
    path: {
        id: string;
    };
    query?: {
        redirectUri?: string;
    };
};

export type ClientAddPostLogoutRedirectUriResponse = (ClientDto);

export type ClientAddPostLogoutRedirectUriError = unknown;

export type ClientUpdateClientTypeData = {
    path: {
        id: string;
    };
    query?: {
        clientType?: string;
    };
};

export type ClientUpdateClientTypeResponse = (ClientDto);

export type ClientUpdateClientTypeError = unknown;

export type DynamicClaimsRefreshResponse = (unknown);

export type DynamicClaimsRefreshError = (RemoteServiceErrorResponse);

export type EmailSettingsGetResponse = (EmailSettingsDto);

export type EmailSettingsGetError = (RemoteServiceErrorResponse);

export type EmailSettingsUpdateData = {
    body?: UpdateEmailSettingsDto;
};

export type EmailSettingsUpdateResponse = (unknown);

export type EmailSettingsUpdateError = (RemoteServiceErrorResponse);

export type EmailSettingsSendTestEmailData = {
    body?: SendTestEmailInput;
};

export type EmailSettingsSendTestEmailResponse = (unknown);

export type EmailSettingsSendTestEmailError = (RemoteServiceErrorResponse);

export type FeaturesGetData = {
    query?: {
        providerKey?: string;
        providerName?: string;
    };
};

export type FeaturesGetResponse = (GetFeatureListResultDto);

export type FeaturesGetError = (RemoteServiceErrorResponse);

export type FeaturesUpdateData = {
    body?: UpdateFeaturesDto;
    query?: {
        providerKey?: string;
        providerName?: string;
    };
};

export type FeaturesUpdateResponse = (unknown);

export type FeaturesUpdateError = (RemoteServiceErrorResponse);

export type FeaturesDeleteData = {
    query?: {
        providerKey?: string;
        providerName?: string;
    };
};

export type FeaturesDeleteResponse = (unknown);

export type FeaturesDeleteError = (RemoteServiceErrorResponse);

export type LoginLoginData = {
    body?: UserLoginInfo;
};

export type LoginLoginResponse = (AbpLoginResult);

export type LoginLoginError = (RemoteServiceErrorResponse);

export type LoginLogoutResponse = (unknown);

export type LoginLogoutError = (RemoteServiceErrorResponse);

export type LoginCheckPasswordData = {
    body?: UserLoginInfo;
};

export type LoginCheckPasswordResponse = (AbpLoginResult);

export type LoginCheckPasswordError = (RemoteServiceErrorResponse);

export type PermissionsGetData = {
    query?: {
        providerKey?: string;
        providerName?: string;
    };
};

export type PermissionsGetResponse = (GetPermissionListResultDto);

export type PermissionsGetError = (RemoteServiceErrorResponse);

export type PermissionsUpdateData = {
    body?: UpdatePermissionsDto;
    query?: {
        providerKey?: string;
        providerName?: string;
    };
};

export type PermissionsUpdateResponse = (unknown);

export type PermissionsUpdateError = (RemoteServiceErrorResponse);

export type ProfileGetResponse = (ProfileDto);

export type ProfileGetError = (RemoteServiceErrorResponse);

export type ProfileUpdateData = {
    body?: UpdateProfileDto;
};

export type ProfileUpdateResponse = (ProfileDto);

export type ProfileUpdateError = (RemoteServiceErrorResponse);

export type ProfileChangePasswordData = {
    body?: ChangePasswordInput;
};

export type ProfileChangePasswordResponse = (unknown);

export type ProfileChangePasswordError = (RemoteServiceErrorResponse);

export type RoleGetAllListResponse = (ListResultDtoOfIdentityRoleDto);

export type RoleGetAllListError = (RemoteServiceErrorResponse);

export type RoleGetListData = {
    query?: {
        ExtraProperties?: {
            [key: string]: unknown;
        };
        Filter?: string;
        MaxResultCount?: number;
        SkipCount?: number;
        Sorting?: string;
    };
};

export type RoleGetListResponse = (PagedResultDtoOfIdentityRoleDto);

export type RoleGetListError = (RemoteServiceErrorResponse);

export type RoleCreateData = {
    body?: IdentityRoleCreateDto;
};

export type RoleCreateResponse = (IdentityRoleDto);

export type RoleCreateError = (RemoteServiceErrorResponse);

export type RoleGetData = {
    path: {
        id: string;
    };
};

export type RoleGetResponse = (IdentityRoleDto);

export type RoleGetError = (RemoteServiceErrorResponse);

export type RoleUpdateData = {
    body?: IdentityRoleUpdateDto;
    path: {
        id: string;
    };
};

export type RoleUpdateResponse = (IdentityRoleDto);

export type RoleUpdateError = (RemoteServiceErrorResponse);

export type RoleDeleteData = {
    path: {
        id: string;
    };
};

export type RoleDeleteResponse = (unknown);

export type RoleDeleteError = (RemoteServiceErrorResponse);

export type TenantGetTenantGuidData = {
    query?: {
        host?: string;
    };
};

export type TenantGetTenantGuidResponse = (string);

export type TenantGetTenantGuidError = unknown;

export type TenantAddHostData = {
    query?: {
        Host?: string;
        Id?: string;
    };
};

export type TenantAddHostResponse = (CustomTenantDto);

export type TenantAddHostError = unknown;

export type TenantGetTenantHostData = {
    path: {
        id: string;
    };
};

export type TenantGetTenantHostResponse = (CustomTenantDto);

export type TenantGetTenantHostError = unknown;

export type TenantGetData = {
    path: {
        id: string;
    };
};

export type TenantGetResponse = (TenantDto);

export type TenantGetError = (RemoteServiceErrorResponse);

export type TenantUpdateData = {
    body?: TenantUpdateDto;
    path: {
        id: string;
    };
};

export type TenantUpdateResponse = (TenantDto);

export type TenantUpdateError = (RemoteServiceErrorResponse);

export type TenantDeleteData = {
    path: {
        id: string;
    };
};

export type TenantDeleteResponse = (unknown);

export type TenantDeleteError = (RemoteServiceErrorResponse);

export type TenantGetListData = {
    query?: {
        Filter?: string;
        MaxResultCount?: number;
        SkipCount?: number;
        Sorting?: string;
    };
};

export type TenantGetListResponse = (PagedResultDtoOfTenantDto);

export type TenantGetListError = (RemoteServiceErrorResponse);

export type TenantCreateData = {
    body?: TenantCreateDto;
};

export type TenantCreateResponse = (TenantDto);

export type TenantCreateError = (RemoteServiceErrorResponse);

export type TenantGetDefaultConnectionStringData = {
    path: {
        id: string;
    };
};

export type TenantGetDefaultConnectionStringResponse = (string);

export type TenantGetDefaultConnectionStringError = (RemoteServiceErrorResponse);

export type TenantUpdateDefaultConnectionStringData = {
    path: {
        id: string;
    };
    query?: {
        defaultConnectionString?: string;
    };
};

export type TenantUpdateDefaultConnectionStringResponse = (unknown);

export type TenantUpdateDefaultConnectionStringError = (RemoteServiceErrorResponse);

export type TenantDeleteDefaultConnectionStringData = {
    path: {
        id: string;
    };
};

export type TenantDeleteDefaultConnectionStringResponse = (unknown);

export type TenantDeleteDefaultConnectionStringError = (RemoteServiceErrorResponse);

export type TimeZoneSettingsGetResponse = (string);

export type TimeZoneSettingsGetError = (RemoteServiceErrorResponse);

export type TimeZoneSettingsUpdateData = {
    query?: {
        timezone?: string;
    };
};

export type TimeZoneSettingsUpdateResponse = (unknown);

export type TimeZoneSettingsUpdateError = (RemoteServiceErrorResponse);

export type TimeZoneSettingsGetTimezonesResponse = (Array<NameValue>);

export type TimeZoneSettingsGetTimezonesError = (RemoteServiceErrorResponse);

export type UserGetData = {
    path: {
        id: string;
    };
};

export type UserGetResponse = (IdentityUserDto);

export type UserGetError = (RemoteServiceErrorResponse);

export type UserUpdateData = {
    body?: IdentityUserUpdateDto;
    path: {
        id: string;
    };
};

export type UserUpdateResponse = (IdentityUserDto);

export type UserUpdateError = (RemoteServiceErrorResponse);

export type UserDeleteData = {
    path: {
        id: string;
    };
};

export type UserDeleteResponse = (unknown);

export type UserDeleteError = (RemoteServiceErrorResponse);

export type UserGetListData = {
    query?: {
        ExtraProperties?: {
            [key: string]: unknown;
        };
        Filter?: string;
        MaxResultCount?: number;
        SkipCount?: number;
        Sorting?: string;
    };
};

export type UserGetListResponse = (PagedResultDtoOfIdentityUserDto);

export type UserGetListError = (RemoteServiceErrorResponse);

export type UserCreateData = {
    body?: IdentityUserCreateDto;
};

export type UserCreateResponse = (IdentityUserDto);

export type UserCreateError = (RemoteServiceErrorResponse);

export type UserGetRolesData = {
    path: {
        id: string;
    };
};

export type UserGetRolesResponse = (ListResultDtoOfIdentityRoleDto);

export type UserGetRolesError = (RemoteServiceErrorResponse);

export type UserUpdateRolesData = {
    body?: IdentityUserUpdateRolesDto;
    path: {
        id: string;
    };
};

export type UserUpdateRolesResponse = (unknown);

export type UserUpdateRolesError = (RemoteServiceErrorResponse);

export type UserGetAssignableRolesResponse = (ListResultDtoOfIdentityRoleDto);

export type UserGetAssignableRolesError = (RemoteServiceErrorResponse);

export type UserFindByUsernameData = {
    path: {
        userName: string;
    };
};

export type UserFindByUsernameResponse = (IdentityUserDto);

export type UserFindByUsernameError = (RemoteServiceErrorResponse);

export type UserFindByEmailData = {
    path: {
        email: string;
    };
};

export type UserFindByEmailResponse = (IdentityUserDto);

export type UserFindByEmailError = (RemoteServiceErrorResponse);

export type UserLookupFindByIdData = {
    path: {
        id: string;
    };
};

export type UserLookupFindByIdResponse = (UserData);

export type UserLookupFindByIdError = (RemoteServiceErrorResponse);

export type UserLookupFindByUserNameData = {
    path: {
        userName: string;
    };
};

export type UserLookupFindByUserNameResponse = (UserData);

export type UserLookupFindByUserNameError = (RemoteServiceErrorResponse);

export type UserLookupSearchData = {
    query?: {
        ExtraProperties?: {
            [key: string]: unknown;
        };
        Filter?: string;
        MaxResultCount?: number;
        SkipCount?: number;
        Sorting?: string;
    };
};

export type UserLookupSearchResponse = (ListResultDtoOfUserData);

export type UserLookupSearchError = (RemoteServiceErrorResponse);

export type UserLookupGetCountData = {
    query?: {
        Filter?: string;
    };
};

export type UserLookupGetCountResponse = (number);

export type UserLookupGetCountError = (RemoteServiceErrorResponse);