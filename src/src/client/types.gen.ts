// This file is auto-generated by @hey-api/openapi-ts

export type AbpLoginResult = {
    result?: LoginResultType;
    readonly description?: string | null;
};

export type ActionApiDescriptionModel = {
    uniqueName?: string | null;
    name?: string | null;
    httpMethod?: string | null;
    url?: string | null;
    supportedVersions?: Array<string> | null;
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    parameters?: Array<ParameterApiDescriptionModel> | null;
    returnValue?: ReturnValueApiDescriptionModel;
    allowAnonymous?: boolean | null;
    implementFrom?: string | null;
};

export type ApplicationApiDescriptionModel = {
    modules?: {
        [key: string]: ModuleApiDescriptionModel;
    } | null;
    types?: {
        [key: string]: TypeApiDescriptionModel;
    } | null;
};

export type ApplicationAuthConfigurationDto = {
    grantedPolicies?: {
        [key: string]: boolean;
    } | null;
};

export type ApplicationConfigurationDto = {
    localization?: ApplicationLocalizationConfigurationDto;
    auth?: ApplicationAuthConfigurationDto;
    setting?: ApplicationSettingConfigurationDto;
    currentUser?: CurrentUserDto;
    features?: ApplicationFeatureConfigurationDto;
    globalFeatures?: ApplicationGlobalFeatureConfigurationDto;
    multiTenancy?: MultiTenancyInfoDto;
    currentTenant?: CurrentTenantDto;
    timing?: TimingDto;
    clock?: ClockDto;
    objectExtensions?: ObjectExtensionsDto;
    extraProperties?: {} | null;
};

export type ApplicationFeatureConfigurationDto = {
    values?: {
        [key: string]: string | null;
    } | null;
};

export type ApplicationGlobalFeatureConfigurationDto = {
    enabledFeatures?: Array<string> | null;
};

export type ApplicationLocalizationConfigurationDto = {
    values?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    resources?: {
        [key: string]: ApplicationLocalizationResourceDto;
    } | null;
    languages?: Array<LanguageInfo> | null;
    currentCulture?: CurrentCultureDto;
    defaultResourceName?: string | null;
    languagesMap?: {
        [key: string]: Array<NameValue>;
    } | null;
    languageFilesMap?: {
        [key: string]: Array<NameValue>;
    } | null;
};

export type ApplicationLocalizationDto = {
    resources?: {
        [key: string]: ApplicationLocalizationResourceDto;
    } | null;
    currentCulture?: CurrentCultureDto;
};

export type ApplicationLocalizationResourceDto = {
    texts?: {
        [key: string]: string;
    } | null;
    baseResources?: Array<string> | null;
};

export type ApplicationSettingConfigurationDto = {
    values?: {
        [key: string]: string | null;
    } | null;
};

export type ChangePasswordInput = {
    currentPassword?: string | null;
    newPassword: string;
};

export type ClientDto = {
    clientId?: string | null;
    displayName?: string | null;
    postLogoutRedirectUris?: string | null;
    redirectUris?: string | null;
    permissions?: string | null;
    type?: string | null;
};

export type ClockDto = {
    kind?: string | null;
};

export type ControllerApiDescriptionModel = {
    controllerName?: string | null;
    controllerGroupName?: string | null;
    isRemoteService?: boolean;
    isIntegrationService?: boolean;
    apiVersion?: string | null;
    type?: string | null;
    interfaces?: Array<ControllerInterfaceApiDescriptionModel> | null;
    actions?: {
        [key: string]: ActionApiDescriptionModel;
    } | null;
};

export type ControllerInterfaceApiDescriptionModel = {
    type?: string | null;
    name?: string | null;
    methods?: Array<InterfaceMethodApiDescriptionModel> | null;
};

export type CurrentCultureDto = {
    displayName?: string | null;
    englishName?: string | null;
    threeLetterIsoLanguageName?: string | null;
    twoLetterIsoLanguageName?: string | null;
    isRightToLeft?: boolean;
    cultureName?: string | null;
    name?: string | null;
    nativeName?: string | null;
    dateTimeFormat?: DateTimeFormatDto;
};

export type CurrentTenantDto = {
    id?: string | null;
    name?: string | null;
    isAvailable?: boolean;
};

export type CurrentUserDto = {
    isAuthenticated?: boolean;
    id?: string | null;
    tenantId?: string | null;
    impersonatorUserId?: string | null;
    impersonatorTenantId?: string | null;
    impersonatorUserName?: string | null;
    impersonatorTenantName?: string | null;
    userName?: string | null;
    name?: string | null;
    surName?: string | null;
    email?: string | null;
    emailVerified?: boolean;
    phoneNumber?: string | null;
    phoneNumberVerified?: boolean;
    roles?: Array<string> | null;
    sessionId?: string | null;
};

export type CustomTenantDto = {
    id?: string;
    name?: string | null;
    host?: string | null;
};

export type DateTimeFormatDto = {
    calendarAlgorithmType?: string | null;
    dateTimeFormatLong?: string | null;
    shortDatePattern?: string | null;
    fullDateTimePattern?: string | null;
    dateSeparator?: string | null;
    shortTimePattern?: string | null;
    longTimePattern?: string | null;
};

export type EmailSettingsDto = {
    smtpHost?: string | null;
    smtpPort?: number;
    smtpUserName?: string | null;
    smtpPassword?: string | null;
    smtpDomain?: string | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress?: string | null;
    defaultFromDisplayName?: string | null;
};

export type EntityExtensionDto = {
    properties?: {
        [key: string]: ExtensionPropertyDto;
    } | null;
    configuration?: {} | null;
};

export type ExtensionEnumDto = {
    fields?: Array<ExtensionEnumFieldDto> | null;
    localizationResource?: string | null;
};

export type ExtensionEnumFieldDto = {
    name?: string | null;
    value?: unknown;
};

export type ExtensionPropertyApiCreateDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyApiDto = {
    onGet?: ExtensionPropertyApiGetDto;
    onCreate?: ExtensionPropertyApiCreateDto;
    onUpdate?: ExtensionPropertyApiUpdateDto;
};

export type ExtensionPropertyApiGetDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyApiUpdateDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyAttributeDto = {
    typeSimple?: string | null;
    config?: {} | null;
};

export type ExtensionPropertyDto = {
    type?: string | null;
    typeSimple?: string | null;
    displayName?: LocalizableStringDto;
    api?: ExtensionPropertyApiDto;
    ui?: ExtensionPropertyUiDto;
    policy?: ExtensionPropertyPolicyDto;
    attributes?: Array<ExtensionPropertyAttributeDto> | null;
    configuration?: {} | null;
    defaultValue?: unknown;
};

export type ExtensionPropertyFeaturePolicyDto = {
    features?: Array<string> | null;
    requiresAll?: boolean;
};

export type ExtensionPropertyGlobalFeaturePolicyDto = {
    features?: Array<string> | null;
    requiresAll?: boolean;
};

export type ExtensionPropertyPermissionPolicyDto = {
    permissionNames?: Array<string> | null;
    requiresAll?: boolean;
};

export type ExtensionPropertyPolicyDto = {
    globalFeatures?: ExtensionPropertyGlobalFeaturePolicyDto;
    features?: ExtensionPropertyFeaturePolicyDto;
    permissions?: ExtensionPropertyPermissionPolicyDto;
};

export type ExtensionPropertyUiDto = {
    onTable?: ExtensionPropertyUiTableDto;
    onCreateForm?: ExtensionPropertyUiFormDto;
    onEditForm?: ExtensionPropertyUiFormDto;
    lookup?: ExtensionPropertyUiLookupDto;
};

export type ExtensionPropertyUiFormDto = {
    isVisible?: boolean;
};

export type ExtensionPropertyUiLookupDto = {
    url?: string | null;
    resultListPropertyName?: string | null;
    displayPropertyName?: string | null;
    valuePropertyName?: string | null;
    filterParamName?: string | null;
};

export type ExtensionPropertyUiTableDto = {
    isVisible?: boolean;
};

export type FeatureDto = {
    name?: string | null;
    displayName?: string | null;
    value?: string | null;
    provider?: FeatureProviderDto;
    description?: string | null;
    valueType?: IStringValueType;
    depth?: number;
    parentName?: string | null;
};

export type FeatureGroupDto = {
    name?: string | null;
    displayName?: string | null;
    features?: Array<FeatureDto> | null;
};

export type FeatureProviderDto = {
    name?: string | null;
    key?: string | null;
};

export type FindTenantResultDto = {
    success?: boolean;
    tenantId?: string | null;
    name?: string | null;
    normalizedName?: string | null;
    isActive?: boolean;
};

export type GetFeatureListResultDto = {
    groups?: Array<FeatureGroupDto> | null;
};

export type GetPermissionListResultDto = {
    entityDisplayName?: string | null;
    groups?: Array<PermissionGroupDto> | null;
};

export type IStringValueType = {
    readonly name?: string | null;
    readonly properties?: {} | null;
    validator?: IValueValidator;
};

export type IValueValidator = {
    readonly name?: string | null;
    readonly properties?: {} | null;
};

export type IanaTimeZone = {
    timeZoneName?: string | null;
};

export type IdentityRoleCreateDto = {
    readonly extraProperties?: {} | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
};

export type IdentityRoleDto = {
    readonly extraProperties?: {} | null;
    id?: string;
    name?: string | null;
    isDefault?: boolean;
    isStatic?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: string | null;
    creationTime?: string;
};

export type IdentityRoleUpdateDto = {
    readonly extraProperties?: {} | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: string | null;
};

export type IdentityUserCreateDto = {
    readonly extraProperties?: {} | null;
    userName: string;
    name?: string | null;
    surname?: string | null;
    email: string;
    phoneNumber?: string | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<string> | null;
    password: string;
};

export type IdentityUserDto = {
    readonly extraProperties?: {} | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    isDeleted?: boolean;
    deleterId?: string | null;
    deletionTime?: string | null;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
    email?: string | null;
    emailConfirmed?: boolean;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    lockoutEnd?: string | null;
    concurrencyStamp?: string | null;
    entityVersion?: number;
    lastPasswordChangeTime?: string | null;
};

export type IdentityUserUpdateDto = {
    readonly extraProperties?: {} | null;
    userName: string;
    name?: string | null;
    surname?: string | null;
    email: string;
    phoneNumber?: string | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<string> | null;
    password?: string | null;
    concurrencyStamp?: string | null;
};

export type IdentityUserUpdateRolesDto = {
    roleNames: Array<string>;
};

export type InterfaceMethodApiDescriptionModel = {
    name?: string | null;
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    returnValue?: ReturnValueApiDescriptionModel;
};

export type LanguageInfo = {
    cultureName?: string | null;
    uiCultureName?: string | null;
    displayName?: string | null;
    readonly twoLetterISOLanguageName?: string | null;
};

export type ListResultDtoOfIdentityRoleDto = {
    items?: Array<IdentityRoleDto> | null;
};

export type ListResultDtoOfUserData = {
    items?: Array<UserData> | null;
};

export type LocalizableStringDto = {
    name?: string | null;
    resource?: string | null;
};

export type LoginResultType = 1 | 2 | 3 | 4 | 5;

export type MethodParameterApiDescriptionModel = {
    name?: string | null;
    typeAsString?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isOptional?: boolean;
    defaultValue?: unknown;
};

export type ModuleApiDescriptionModel = {
    rootPath?: string | null;
    remoteServiceName?: string | null;
    controllers?: {
        [key: string]: ControllerApiDescriptionModel;
    } | null;
};

export type ModuleExtensionDto = {
    entities?: {
        [key: string]: EntityExtensionDto;
    } | null;
    configuration?: {} | null;
};

export type MultiTenancyInfoDto = {
    isEnabled?: boolean;
};

export type NameValue = {
    name?: string | null;
    value?: string | null;
};

export type ObjectExtensionsDto = {
    modules?: {
        [key: string]: ModuleExtensionDto;
    } | null;
    enums?: {
        [key: string]: ExtensionEnumDto;
    } | null;
};

export type PagedResultDtoOfIdentityRoleDto = {
    items?: Array<IdentityRoleDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfIdentityUserDto = {
    items?: Array<IdentityUserDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfTenantDto = {
    items?: Array<TenantDto> | null;
    totalCount?: number;
};

export type ParameterApiDescriptionModel = {
    nameOnMethod?: string | null;
    name?: string | null;
    jsonName?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isOptional?: boolean;
    defaultValue?: unknown;
    constraintTypes?: Array<string> | null;
    bindingSourceId?: string | null;
    descriptorName?: string | null;
};

export type PermissionGrantInfoDto = {
    name?: string | null;
    displayName?: string | null;
    parentName?: string | null;
    isGranted?: boolean;
    allowedProviders?: Array<string> | null;
    grantedProviders?: Array<ProviderInfoDto> | null;
};

export type PermissionGroupDto = {
    name?: string | null;
    displayName?: string | null;
    displayNameKey?: string | null;
    displayNameResource?: string | null;
    permissions?: Array<PermissionGrantInfoDto> | null;
};

export type ProfileDto = {
    readonly extraProperties?: {} | null;
    userName?: string | null;
    email?: string | null;
    name?: string | null;
    surname?: string | null;
    phoneNumber?: string | null;
    isExternal?: boolean;
    hasPassword?: boolean;
    concurrencyStamp?: string | null;
};

export type PropertyApiDescriptionModel = {
    name?: string | null;
    jsonName?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isRequired?: boolean;
    minLength?: number | null;
    maxLength?: number | null;
    minimum?: string | null;
    maximum?: string | null;
    regex?: string | null;
};

export type ProviderInfoDto = {
    providerName?: string | null;
    providerKey?: string | null;
};

export type RegisterDto = {
    readonly extraProperties?: {} | null;
    userName: string;
    emailAddress: string;
    password: string;
    appName: string;
};

export type RemoteServiceErrorInfo = {
    code?: string | null;
    message?: string | null;
    details?: string | null;
    data?: {} | null;
    validationErrors?: Array<RemoteServiceValidationErrorInfo> | null;
};

export type RemoteServiceErrorResponse = {
    error?: RemoteServiceErrorInfo;
};

export type RemoteServiceValidationErrorInfo = {
    message?: string | null;
    members?: Array<string> | null;
};

export type ResetPasswordDto = {
    userId?: string;
    resetToken: string;
    password: string;
};

export type ReturnValueApiDescriptionModel = {
    type?: string | null;
    typeSimple?: string | null;
};

export type SendPasswordResetCodeDto = {
    email: string;
    appName: string;
    returnUrl?: string | null;
    returnUrlHash?: string | null;
};

export type SendTestEmailInput = {
    senderEmailAddress: string;
    targetEmailAddress: string;
    subject: string;
    body?: string | null;
};

export type TenantCreateDto = {
    readonly extraProperties?: {} | null;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
};

export type TenantDto = {
    readonly extraProperties?: {} | null;
    id?: string;
    name?: string | null;
    concurrencyStamp?: string | null;
};

export type TenantUpdateDto = {
    readonly extraProperties?: {} | null;
    name: string;
    concurrencyStamp?: string | null;
};

export type TimeZone = {
    iana?: IanaTimeZone;
    windows?: WindowsTimeZone;
};

export type TimingDto = {
    timeZone?: TimeZone;
};

export type TypeApiDescriptionModel = {
    baseType?: string | null;
    isEnum?: boolean;
    enumNames?: Array<string> | null;
    enumValues?: Array<unknown> | null;
    genericArguments?: Array<string> | null;
    properties?: Array<PropertyApiDescriptionModel> | null;
};

export type UpdateEmailSettingsDto = {
    smtpHost?: string | null;
    smtpPort?: number;
    smtpUserName?: string | null;
    smtpPassword?: string | null;
    smtpDomain?: string | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress: string;
    defaultFromDisplayName: string;
};

export type UpdateFeatureDto = {
    name?: string | null;
    value?: string | null;
};

export type UpdateFeaturesDto = {
    features?: Array<UpdateFeatureDto> | null;
};

export type UpdatePermissionDto = {
    name?: string | null;
    isGranted?: boolean;
};

export type UpdatePermissionsDto = {
    permissions?: Array<UpdatePermissionDto> | null;
};

export type UpdateProfileDto = {
    readonly extraProperties?: {} | null;
    userName?: string | null;
    email?: string | null;
    name?: string | null;
    surname?: string | null;
    phoneNumber?: string | null;
    concurrencyStamp?: string | null;
};

export type UserData = {
    id?: string;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
    isActive?: boolean;
    email?: string | null;
    emailConfirmed?: boolean;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    readonly extraProperties?: {} | null;
};

export type UserLoginInfo = {
    userNameOrEmailAddress: string;
    password: string;
    rememberMe?: boolean;
};

export type VerifyPasswordResetTokenInput = {
    userId?: string;
    resetToken: string;
};

export type WindowsTimeZone = {
    timeZoneId?: string | null;
};

export type AbpApiDefinitionGetData = {
    body?: never;
    path?: never;
    query?: {
        IncludeTypes?: boolean;
    };
    url: '/api/abp/api-definition';
};

export type AbpApiDefinitionGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpApiDefinitionGetError = AbpApiDefinitionGetErrors[keyof AbpApiDefinitionGetErrors];

export type AbpApiDefinitionGetResponses = {
    /**
     * OK
     */
    200: ApplicationApiDescriptionModel;
};

export type AbpApiDefinitionGetResponse = AbpApiDefinitionGetResponses[keyof AbpApiDefinitionGetResponses];

export type AbpApplicationConfigurationGetData = {
    body?: never;
    path?: never;
    query?: {
        IncludeLocalizationResources?: boolean;
    };
    url: '/api/abp/application-configuration';
};

export type AbpApplicationConfigurationGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpApplicationConfigurationGetError = AbpApplicationConfigurationGetErrors[keyof AbpApplicationConfigurationGetErrors];

export type AbpApplicationConfigurationGetResponses = {
    /**
     * OK
     */
    200: ApplicationConfigurationDto;
};

export type AbpApplicationConfigurationGetResponse = AbpApplicationConfigurationGetResponses[keyof AbpApplicationConfigurationGetResponses];

export type AbpApplicationLocalizationGetData = {
    body?: never;
    path?: never;
    query: {
        CultureName: string;
        OnlyDynamics?: boolean;
    };
    url: '/api/abp/application-localization';
};

export type AbpApplicationLocalizationGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpApplicationLocalizationGetError = AbpApplicationLocalizationGetErrors[keyof AbpApplicationLocalizationGetErrors];

export type AbpApplicationLocalizationGetResponses = {
    /**
     * OK
     */
    200: ApplicationLocalizationDto;
};

export type AbpApplicationLocalizationGetResponse = AbpApplicationLocalizationGetResponses[keyof AbpApplicationLocalizationGetResponses];

export type AbpTenantFindTenantByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/abp/multi-tenancy/tenants/by-name/{name}';
};

export type AbpTenantFindTenantByNameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpTenantFindTenantByNameError = AbpTenantFindTenantByNameErrors[keyof AbpTenantFindTenantByNameErrors];

export type AbpTenantFindTenantByNameResponses = {
    /**
     * OK
     */
    200: FindTenantResultDto;
};

export type AbpTenantFindTenantByNameResponse = AbpTenantFindTenantByNameResponses[keyof AbpTenantFindTenantByNameResponses];

export type AbpTenantFindTenantByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/abp/multi-tenancy/tenants/by-id/{id}';
};

export type AbpTenantFindTenantByIdErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpTenantFindTenantByIdError = AbpTenantFindTenantByIdErrors[keyof AbpTenantFindTenantByIdErrors];

export type AbpTenantFindTenantByIdResponses = {
    /**
     * OK
     */
    200: FindTenantResultDto;
};

export type AbpTenantFindTenantByIdResponse = AbpTenantFindTenantByIdResponses[keyof AbpTenantFindTenantByIdResponses];

export type AccountRegisterData = {
    body?: RegisterDto;
    path?: never;
    query?: never;
    url: '/api/account/register';
};

export type AccountRegisterErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountRegisterError = AccountRegisterErrors[keyof AccountRegisterErrors];

export type AccountRegisterResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type AccountRegisterResponse = AccountRegisterResponses[keyof AccountRegisterResponses];

export type AccountSendPasswordResetCodeData = {
    body?: SendPasswordResetCodeDto;
    path?: never;
    query?: never;
    url: '/api/account/send-password-reset-code';
};

export type AccountSendPasswordResetCodeErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountSendPasswordResetCodeError = AccountSendPasswordResetCodeErrors[keyof AccountSendPasswordResetCodeErrors];

export type AccountSendPasswordResetCodeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AccountVerifyPasswordResetTokenData = {
    body?: VerifyPasswordResetTokenInput;
    path?: never;
    query?: never;
    url: '/api/account/verify-password-reset-token';
};

export type AccountVerifyPasswordResetTokenErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountVerifyPasswordResetTokenError = AccountVerifyPasswordResetTokenErrors[keyof AccountVerifyPasswordResetTokenErrors];

export type AccountVerifyPasswordResetTokenResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type AccountVerifyPasswordResetTokenResponse = AccountVerifyPasswordResetTokenResponses[keyof AccountVerifyPasswordResetTokenResponses];

export type AccountResetPasswordData = {
    body?: ResetPasswordDto;
    path?: never;
    query?: never;
    url: '/api/account/reset-password';
};

export type AccountResetPasswordErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountResetPasswordError = AccountResetPasswordErrors[keyof AccountResetPasswordErrors];

export type AccountResetPasswordResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ClientGetListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/client-management';
};

export type ClientGetListResponses = {
    /**
     * OK
     */
    200: Array<ClientDto>;
};

export type ClientGetListResponse = ClientGetListResponses[keyof ClientGetListResponses];

export type ClientCreateData = {
    body?: never;
    path?: never;
    query?: {
        ClientId?: string;
        DisplayName?: string;
        PostLogoutRedirectUris?: string;
        RedirectUris?: string;
        Permissions?: string;
        Type?: string;
    };
    url: '/api/client-management';
};

export type ClientCreateResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientCreateResponse = ClientCreateResponses[keyof ClientCreateResponses];

export type ClientDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/client-management/{id}';
};

export type ClientDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ClientGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/client-management/{id}';
};

export type ClientGetResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientGetResponse = ClientGetResponses[keyof ClientGetResponses];

export type ClientUpdateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        ClientId?: string;
        DisplayName?: string;
        PostLogoutRedirectUris?: string;
        RedirectUris?: string;
        Permissions?: string;
        Type?: string;
    };
    url: '/api/client-management/{id}';
};

export type ClientUpdateResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientUpdateResponse = ClientUpdateResponses[keyof ClientUpdateResponses];

export type ClientAddRedirectUriData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        redirectUri?: string;
    };
    url: '/api/client-management/add-redirect-uri/{id}';
};

export type ClientAddRedirectUriResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientAddRedirectUriResponse = ClientAddRedirectUriResponses[keyof ClientAddRedirectUriResponses];

export type ClientAddPostLogoutRedirectUriData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        redirectUri?: string;
    };
    url: '/api/client-management/add-post-logout-redirect-uri/{id}';
};

export type ClientAddPostLogoutRedirectUriResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientAddPostLogoutRedirectUriResponse = ClientAddPostLogoutRedirectUriResponses[keyof ClientAddPostLogoutRedirectUriResponses];

export type ClientUpdateClientTypeData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        clientType?: string;
    };
    url: '/api/client-management/update-client-type/{id}';
};

export type ClientUpdateClientTypeResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientUpdateClientTypeResponse = ClientUpdateClientTypeResponses[keyof ClientUpdateClientTypeResponses];

export type DynamicClaimsRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/dynamic-claims/refresh';
};

export type DynamicClaimsRefreshErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type DynamicClaimsRefreshError = DynamicClaimsRefreshErrors[keyof DynamicClaimsRefreshErrors];

export type DynamicClaimsRefreshResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EmailSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing';
};

export type EmailSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EmailSettingsGetError = EmailSettingsGetErrors[keyof EmailSettingsGetErrors];

export type EmailSettingsGetResponses = {
    /**
     * OK
     */
    200: EmailSettingsDto;
};

export type EmailSettingsGetResponse = EmailSettingsGetResponses[keyof EmailSettingsGetResponses];

export type EmailSettingsUpdateData = {
    body?: UpdateEmailSettingsDto;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing';
};

export type EmailSettingsUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EmailSettingsUpdateError = EmailSettingsUpdateErrors[keyof EmailSettingsUpdateErrors];

export type EmailSettingsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EmailSettingsSendTestEmailData = {
    body?: SendTestEmailInput;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing/send-test-email';
};

export type EmailSettingsSendTestEmailErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EmailSettingsSendTestEmailError = EmailSettingsSendTestEmailErrors[keyof EmailSettingsSendTestEmailErrors];

export type EmailSettingsSendTestEmailResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type FeaturesDeleteData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type FeaturesDeleteError = FeaturesDeleteErrors[keyof FeaturesDeleteErrors];

export type FeaturesDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type FeaturesGetData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type FeaturesGetError = FeaturesGetErrors[keyof FeaturesGetErrors];

export type FeaturesGetResponses = {
    /**
     * OK
     */
    200: GetFeatureListResultDto;
};

export type FeaturesGetResponse = FeaturesGetResponses[keyof FeaturesGetResponses];

export type FeaturesUpdateData = {
    body?: UpdateFeaturesDto;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type FeaturesUpdateError = FeaturesUpdateErrors[keyof FeaturesUpdateErrors];

export type FeaturesUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LoginLoginData = {
    body?: UserLoginInfo;
    path?: never;
    query?: never;
    url: '/api/account/login';
};

export type LoginLoginErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type LoginLoginError = LoginLoginErrors[keyof LoginLoginErrors];

export type LoginLoginResponses = {
    /**
     * OK
     */
    200: AbpLoginResult;
};

export type LoginLoginResponse = LoginLoginResponses[keyof LoginLoginResponses];

export type LoginLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/logout';
};

export type LoginLogoutErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type LoginLogoutError = LoginLogoutErrors[keyof LoginLogoutErrors];

export type LoginLogoutResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LoginCheckPasswordData = {
    body?: UserLoginInfo;
    path?: never;
    query?: never;
    url: '/api/account/check-password';
};

export type LoginCheckPasswordErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type LoginCheckPasswordError = LoginCheckPasswordErrors[keyof LoginCheckPasswordErrors];

export type LoginCheckPasswordResponses = {
    /**
     * OK
     */
    200: AbpLoginResult;
};

export type LoginCheckPasswordResponse = LoginCheckPasswordResponses[keyof LoginCheckPasswordResponses];

export type PermissionsGetData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/permission-management/permissions';
};

export type PermissionsGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PermissionsGetError = PermissionsGetErrors[keyof PermissionsGetErrors];

export type PermissionsGetResponses = {
    /**
     * OK
     */
    200: GetPermissionListResultDto;
};

export type PermissionsGetResponse = PermissionsGetResponses[keyof PermissionsGetResponses];

export type PermissionsUpdateData = {
    body?: UpdatePermissionsDto;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/permission-management/permissions';
};

export type PermissionsUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PermissionsUpdateError = PermissionsUpdateErrors[keyof PermissionsUpdateErrors];

export type PermissionsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ProfileGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/my-profile';
};

export type ProfileGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ProfileGetError = ProfileGetErrors[keyof ProfileGetErrors];

export type ProfileGetResponses = {
    /**
     * OK
     */
    200: ProfileDto;
};

export type ProfileGetResponse = ProfileGetResponses[keyof ProfileGetResponses];

export type ProfileUpdateData = {
    body?: UpdateProfileDto;
    path?: never;
    query?: never;
    url: '/api/account/my-profile';
};

export type ProfileUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ProfileUpdateError = ProfileUpdateErrors[keyof ProfileUpdateErrors];

export type ProfileUpdateResponses = {
    /**
     * OK
     */
    200: ProfileDto;
};

export type ProfileUpdateResponse = ProfileUpdateResponses[keyof ProfileUpdateResponses];

export type ProfileChangePasswordData = {
    body?: ChangePasswordInput;
    path?: never;
    query?: never;
    url: '/api/account/my-profile/change-password';
};

export type ProfileChangePasswordErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ProfileChangePasswordError = ProfileChangePasswordErrors[keyof ProfileChangePasswordErrors];

export type ProfileChangePasswordResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleGetAllListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/identity/roles/all';
};

export type RoleGetAllListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleGetAllListError = RoleGetAllListErrors[keyof RoleGetAllListErrors];

export type RoleGetAllListResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfIdentityRoleDto;
};

export type RoleGetAllListResponse = RoleGetAllListResponses[keyof RoleGetAllListResponses];

export type RoleGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {};
    };
    url: '/api/identity/roles';
};

export type RoleGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleGetListError = RoleGetListErrors[keyof RoleGetListErrors];

export type RoleGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfIdentityRoleDto;
};

export type RoleGetListResponse = RoleGetListResponses[keyof RoleGetListResponses];

export type RoleCreateData = {
    body?: IdentityRoleCreateDto;
    path?: never;
    query?: never;
    url: '/api/identity/roles';
};

export type RoleCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleCreateError = RoleCreateErrors[keyof RoleCreateErrors];

export type RoleCreateResponses = {
    /**
     * OK
     */
    200: IdentityRoleDto;
};

export type RoleCreateResponse = RoleCreateResponses[keyof RoleCreateResponses];

export type RoleDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleDeleteError = RoleDeleteErrors[keyof RoleDeleteErrors];

export type RoleDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleGetError = RoleGetErrors[keyof RoleGetErrors];

export type RoleGetResponses = {
    /**
     * OK
     */
    200: IdentityRoleDto;
};

export type RoleGetResponse = RoleGetResponses[keyof RoleGetResponses];

export type RoleUpdateData = {
    body?: IdentityRoleUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleUpdateError = RoleUpdateErrors[keyof RoleUpdateErrors];

export type RoleUpdateResponses = {
    /**
     * OK
     */
    200: IdentityRoleDto;
};

export type RoleUpdateResponse = RoleUpdateResponses[keyof RoleUpdateResponses];

export type TenantGetTenantGuidData = {
    body?: never;
    path?: never;
    query?: {
        host?: string;
    };
    url: '/api/multi-tenancy';
};

export type TenantGetTenantGuidResponses = {
    /**
     * OK
     */
    200: string;
};

export type TenantGetTenantGuidResponse = TenantGetTenantGuidResponses[keyof TenantGetTenantGuidResponses];

export type TenantAddHostData = {
    body?: never;
    path?: never;
    query?: {
        Id?: string;
        Host?: string;
    };
    url: '/api/multi-tenancy';
};

export type TenantAddHostResponses = {
    /**
     * OK
     */
    200: CustomTenantDto;
};

export type TenantAddHostResponse = TenantAddHostResponses[keyof TenantAddHostResponses];

export type TenantGetTenantHostData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/{id}';
};

export type TenantGetTenantHostResponses = {
    /**
     * OK
     */
    200: CustomTenantDto;
};

export type TenantGetTenantHostResponse = TenantGetTenantHostResponses[keyof TenantGetTenantHostResponses];

export type TenantDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantDeleteError = TenantDeleteErrors[keyof TenantDeleteErrors];

export type TenantDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TenantGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantGetError = TenantGetErrors[keyof TenantGetErrors];

export type TenantGetResponses = {
    /**
     * OK
     */
    200: TenantDto;
};

export type TenantGetResponse = TenantGetResponses[keyof TenantGetResponses];

export type TenantUpdateData = {
    body?: TenantUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantUpdateError = TenantUpdateErrors[keyof TenantUpdateErrors];

export type TenantUpdateResponses = {
    /**
     * OK
     */
    200: TenantDto;
};

export type TenantUpdateResponse = TenantUpdateResponses[keyof TenantUpdateResponses];

export type TenantGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/multi-tenancy/tenants';
};

export type TenantGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantGetListError = TenantGetListErrors[keyof TenantGetListErrors];

export type TenantGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfTenantDto;
};

export type TenantGetListResponse = TenantGetListResponses[keyof TenantGetListResponses];

export type TenantCreateData = {
    body?: TenantCreateDto;
    path?: never;
    query?: never;
    url: '/api/multi-tenancy/tenants';
};

export type TenantCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantCreateError = TenantCreateErrors[keyof TenantCreateErrors];

export type TenantCreateResponses = {
    /**
     * OK
     */
    200: TenantDto;
};

export type TenantCreateResponse = TenantCreateResponses[keyof TenantCreateResponses];

export type TenantDeleteDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantDeleteDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantDeleteDefaultConnectionStringError = TenantDeleteDefaultConnectionStringErrors[keyof TenantDeleteDefaultConnectionStringErrors];

export type TenantDeleteDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TenantGetDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantGetDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantGetDefaultConnectionStringError = TenantGetDefaultConnectionStringErrors[keyof TenantGetDefaultConnectionStringErrors];

export type TenantGetDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: string;
};

export type TenantGetDefaultConnectionStringResponse = TenantGetDefaultConnectionStringResponses[keyof TenantGetDefaultConnectionStringResponses];

export type TenantUpdateDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        defaultConnectionString?: string;
    };
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantUpdateDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantUpdateDefaultConnectionStringError = TenantUpdateDefaultConnectionStringErrors[keyof TenantUpdateDefaultConnectionStringErrors];

export type TenantUpdateDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TimeZoneSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/timezone';
};

export type TimeZoneSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TimeZoneSettingsGetError = TimeZoneSettingsGetErrors[keyof TimeZoneSettingsGetErrors];

export type TimeZoneSettingsGetResponses = {
    /**
     * OK
     */
    200: string;
};

export type TimeZoneSettingsGetResponse = TimeZoneSettingsGetResponses[keyof TimeZoneSettingsGetResponses];

export type TimeZoneSettingsUpdateData = {
    body?: never;
    path?: never;
    query?: {
        timezone?: string;
    };
    url: '/api/setting-management/timezone';
};

export type TimeZoneSettingsUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TimeZoneSettingsUpdateError = TimeZoneSettingsUpdateErrors[keyof TimeZoneSettingsUpdateErrors];

export type TimeZoneSettingsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TimeZoneSettingsGetTimezonesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/timezone/timezones';
};

export type TimeZoneSettingsGetTimezonesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TimeZoneSettingsGetTimezonesError = TimeZoneSettingsGetTimezonesErrors[keyof TimeZoneSettingsGetTimezonesErrors];

export type TimeZoneSettingsGetTimezonesResponses = {
    /**
     * OK
     */
    200: Array<NameValue>;
};

export type TimeZoneSettingsGetTimezonesResponse = TimeZoneSettingsGetTimezonesResponses[keyof TimeZoneSettingsGetTimezonesResponses];

export type UserDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserDeleteError = UserDeleteErrors[keyof UserDeleteErrors];

export type UserDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetError = UserGetErrors[keyof UserGetErrors];

export type UserGetResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserGetResponse = UserGetResponses[keyof UserGetResponses];

export type UserUpdateData = {
    body?: IdentityUserUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserUpdateError = UserUpdateErrors[keyof UserUpdateErrors];

export type UserUpdateResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserUpdateResponse = UserUpdateResponses[keyof UserUpdateResponses];

export type UserGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {};
    };
    url: '/api/identity/users';
};

export type UserGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetListError = UserGetListErrors[keyof UserGetListErrors];

export type UserGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfIdentityUserDto;
};

export type UserGetListResponse = UserGetListResponses[keyof UserGetListResponses];

export type UserCreateData = {
    body?: IdentityUserCreateDto;
    path?: never;
    query?: never;
    url: '/api/identity/users';
};

export type UserCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserCreateError = UserCreateErrors[keyof UserCreateErrors];

export type UserCreateResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserGetRolesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}/roles';
};

export type UserGetRolesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetRolesError = UserGetRolesErrors[keyof UserGetRolesErrors];

export type UserGetRolesResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfIdentityRoleDto;
};

export type UserGetRolesResponse = UserGetRolesResponses[keyof UserGetRolesResponses];

export type UserUpdateRolesData = {
    body?: IdentityUserUpdateRolesDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}/roles';
};

export type UserUpdateRolesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserUpdateRolesError = UserUpdateRolesErrors[keyof UserUpdateRolesErrors];

export type UserUpdateRolesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserGetAssignableRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/identity/users/assignable-roles';
};

export type UserGetAssignableRolesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetAssignableRolesError = UserGetAssignableRolesErrors[keyof UserGetAssignableRolesErrors];

export type UserGetAssignableRolesResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfIdentityRoleDto;
};

export type UserGetAssignableRolesResponse = UserGetAssignableRolesResponses[keyof UserGetAssignableRolesResponses];

export type UserFindByUsernameData = {
    body?: never;
    path: {
        userName: string;
    };
    query?: never;
    url: '/api/identity/users/by-username/{userName}';
};

export type UserFindByUsernameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserFindByUsernameError = UserFindByUsernameErrors[keyof UserFindByUsernameErrors];

export type UserFindByUsernameResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserFindByUsernameResponse = UserFindByUsernameResponses[keyof UserFindByUsernameResponses];

export type UserFindByEmailData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/api/identity/users/by-email/{email}';
};

export type UserFindByEmailErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserFindByEmailError = UserFindByEmailErrors[keyof UserFindByEmailErrors];

export type UserFindByEmailResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserFindByEmailResponse = UserFindByEmailResponses[keyof UserFindByEmailResponses];

export type UserLookupFindByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/lookup/{id}';
};

export type UserLookupFindByIdErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupFindByIdError = UserLookupFindByIdErrors[keyof UserLookupFindByIdErrors];

export type UserLookupFindByIdResponses = {
    /**
     * OK
     */
    200: UserData;
};

export type UserLookupFindByIdResponse = UserLookupFindByIdResponses[keyof UserLookupFindByIdResponses];

export type UserLookupFindByUserNameData = {
    body?: never;
    path: {
        userName: string;
    };
    query?: never;
    url: '/api/identity/users/lookup/by-username/{userName}';
};

export type UserLookupFindByUserNameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupFindByUserNameError = UserLookupFindByUserNameErrors[keyof UserLookupFindByUserNameErrors];

export type UserLookupFindByUserNameResponses = {
    /**
     * OK
     */
    200: UserData;
};

export type UserLookupFindByUserNameResponse = UserLookupFindByUserNameResponses[keyof UserLookupFindByUserNameResponses];

export type UserLookupSearchData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {};
    };
    url: '/api/identity/users/lookup/search';
};

export type UserLookupSearchErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupSearchError = UserLookupSearchErrors[keyof UserLookupSearchErrors];

export type UserLookupSearchResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfUserData;
};

export type UserLookupSearchResponse = UserLookupSearchResponses[keyof UserLookupSearchResponses];

export type UserLookupGetCountData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
    };
    url: '/api/identity/users/lookup/count';
};

export type UserLookupGetCountErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupGetCountError = UserLookupGetCountErrors[keyof UserLookupGetCountErrors];

export type UserLookupGetCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type UserLookupGetCountResponse = UserLookupGetCountResponses[keyof UserLookupGetCountResponses];

export type ClientOptions = {
    baseUrl: 'https://abp.antosubash.com' | (string & {});
};