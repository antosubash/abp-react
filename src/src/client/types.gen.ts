// This file is auto-generated by @hey-api/openapi-ts

export type AbpLoginResult = {
    result?: LoginResultType;
    readonly description?: string | null;
};

export type ActionApiDescriptionModel = {
    uniqueName?: string | null;
    name?: string | null;
    httpMethod?: string | null;
    url?: string | null;
    supportedVersions?: Array<string> | null;
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    parameters?: Array<ParameterApiDescriptionModel> | null;
    returnValue?: ReturnValueApiDescriptionModel;
    allowAnonymous?: boolean | null;
    implementFrom?: string | null;
};

export type ApplicationApiDescriptionModel = {
    modules?: {
        [key: string]: ModuleApiDescriptionModel;
    } | null;
    types?: {
        [key: string]: TypeApiDescriptionModel;
    } | null;
};

export type ApplicationAuthConfigurationDto = {
    grantedPolicies?: {
        [key: string]: boolean;
    } | null;
};

export type ApplicationConfigurationDto = {
    localization?: ApplicationLocalizationConfigurationDto;
    auth?: ApplicationAuthConfigurationDto;
    setting?: ApplicationSettingConfigurationDto;
    currentUser?: CurrentUserDto;
    features?: ApplicationFeatureConfigurationDto;
    globalFeatures?: ApplicationGlobalFeatureConfigurationDto;
    multiTenancy?: MultiTenancyInfoDto;
    currentTenant?: CurrentTenantDto;
    timing?: TimingDto;
    clock?: ClockDto;
    objectExtensions?: ObjectExtensionsDto;
    extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type ApplicationFeatureConfigurationDto = {
    values?: {
        [key: string]: string | null;
    } | null;
};

export type ApplicationGlobalFeatureConfigurationDto = {
    enabledFeatures?: Array<string> | null;
};

export type ApplicationLocalizationConfigurationDto = {
    values?: {
        [key: string]: {
            [key: string]: string;
        };
    } | null;
    resources?: {
        [key: string]: ApplicationLocalizationResourceDto;
    } | null;
    languages?: Array<LanguageInfo> | null;
    currentCulture?: CurrentCultureDto;
    defaultResourceName?: string | null;
    languagesMap?: {
        [key: string]: Array<NameValue>;
    } | null;
    languageFilesMap?: {
        [key: string]: Array<NameValue>;
    } | null;
};

export type ApplicationLocalizationDto = {
    resources?: {
        [key: string]: ApplicationLocalizationResourceDto;
    } | null;
    currentCulture?: CurrentCultureDto;
};

export type ApplicationLocalizationResourceDto = {
    texts?: {
        [key: string]: string;
    } | null;
    baseResources?: Array<string> | null;
};

export type ApplicationSettingConfigurationDto = {
    values?: {
        [key: string]: string | null;
    } | null;
};

export type BlogDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: string | null;
    slug?: string | null;
    concurrencyStamp?: string | null;
    blogPostCount?: number;
};

export type BlogFeatureDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    featureName?: string | null;
    isEnabled?: boolean;
};

export type BlogFeatureInputDto = {
    featureName: string;
    isEnabled?: boolean;
};

export type BlogPostCommonDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    blogId?: string;
    title?: string | null;
    slug?: string | null;
    shortDescription?: string | null;
    content?: string | null;
    coverImageMediaId?: string | null;
    author?: VoloCmsKitUsersCmsUserDto;
};

export type BlogPostDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    blogId?: string;
    title?: string | null;
    slug?: string | null;
    shortDescription?: string | null;
    content?: string | null;
    coverImageMediaId?: string | null;
    creationTime?: string;
    lastModificationTime?: string | null;
    concurrencyStamp?: string | null;
    status?: BlogPostStatus;
};

export type BlogPostListDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    blogId?: string;
    blogName?: string | null;
    title?: string | null;
    slug?: string | null;
    shortDescription?: string | null;
    content?: string | null;
    coverImageMediaId?: string | null;
    creationTime?: string;
    lastModificationTime?: string | null;
    status?: BlogPostStatus;
};

export type BlogPostStatus = 0 | 1 | 2;

export type ChangePasswordInput = {
    currentPassword?: string | null;
    newPassword: string;
};

export type ClientDto = {
    clientId?: string | null;
    displayName?: string | null;
    postLogoutRedirectUris?: string | null;
    redirectUris?: string | null;
    permissions?: string | null;
    type?: string | null;
};

export type ClockDto = {
    kind?: string | null;
};

export type CommentApprovalDto = {
    isApproved?: boolean;
};

export type CommentApproveState = 0 | 1 | 2 | 4;

export type CommentSettingsDto = {
    commentRequireApprovement?: boolean;
};

export type CommentWithAuthorDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    entityType?: string | null;
    entityId?: string | null;
    text?: string | null;
    repliedCommentId?: string | null;
    creatorId?: string;
    creationTime?: string;
    author?: VoloCmsKitAdminCommentsCmsUserDto;
    url?: string | null;
    isApproved?: boolean | null;
};

export type CommentWithDetailsDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    entityType?: string | null;
    entityId?: string | null;
    text?: string | null;
    creatorId?: string;
    creationTime?: string;
    replies?: Array<VoloCmsKitPublicCommentsCommentDto> | null;
    author?: VoloCmsKitPublicCommentsCmsUserDto;
    concurrencyStamp?: string | null;
};

export type ControllerApiDescriptionModel = {
    controllerName?: string | null;
    controllerGroupName?: string | null;
    isRemoteService?: boolean;
    isIntegrationService?: boolean;
    apiVersion?: string | null;
    type?: string | null;
    interfaces?: Array<ControllerInterfaceApiDescriptionModel> | null;
    actions?: {
        [key: string]: ActionApiDescriptionModel;
    } | null;
};

export type ControllerInterfaceApiDescriptionModel = {
    type?: string | null;
    name?: string | null;
    methods?: Array<InterfaceMethodApiDescriptionModel> | null;
};

export type CreateBlogDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    slug: string;
};

export type CreateBlogPostDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    blogId: string;
    title: string;
    slug: string;
    shortDescription?: string | null;
    content?: string | null;
    coverImageMediaId?: string | null;
};

export type CreateCommentInput = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    text: string;
    repliedCommentId?: string | null;
    captchaToken?: string | null;
    captchaAnswer?: number;
    url?: string | null;
    idempotencyToken: string;
};

export type CreatePageInputDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    title: string;
    slug: string;
    layoutName?: string | null;
    content?: string | null;
    script?: string | null;
    style?: string | null;
};

export type CreateUpdateRatingInput = {
    starCount: number;
};

export type CurrentCultureDto = {
    displayName?: string | null;
    englishName?: string | null;
    threeLetterIsoLanguageName?: string | null;
    twoLetterIsoLanguageName?: string | null;
    isRightToLeft?: boolean;
    cultureName?: string | null;
    name?: string | null;
    nativeName?: string | null;
    dateTimeFormat?: DateTimeFormatDto;
};

export type CurrentTenantDto = {
    id?: string | null;
    name?: string | null;
    isAvailable?: boolean;
};

export type CurrentUserDto = {
    isAuthenticated?: boolean;
    id?: string | null;
    tenantId?: string | null;
    impersonatorUserId?: string | null;
    impersonatorTenantId?: string | null;
    impersonatorUserName?: string | null;
    impersonatorTenantName?: string | null;
    userName?: string | null;
    name?: string | null;
    surName?: string | null;
    email?: string | null;
    emailVerified?: boolean;
    phoneNumber?: string | null;
    phoneNumberVerified?: boolean;
    roles?: Array<string> | null;
    sessionId?: string | null;
};

export type CustomTenantDto = {
    id?: string;
    name?: string | null;
    host?: string | null;
};

export type DateTimeFormatDto = {
    calendarAlgorithmType?: string | null;
    dateTimeFormatLong?: string | null;
    shortDatePattern?: string | null;
    fullDateTimePattern?: string | null;
    dateSeparator?: string | null;
    shortTimePattern?: string | null;
    longTimePattern?: string | null;
};

export type EmailSettingsDto = {
    smtpHost?: string | null;
    smtpPort?: number;
    smtpUserName?: string | null;
    smtpPassword?: string | null;
    smtpDomain?: string | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress?: string | null;
    defaultFromDisplayName?: string | null;
};

export type EntityExtensionDto = {
    properties?: {
        [key: string]: ExtensionPropertyDto;
    } | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
};

export type EntityTagCreateDto = {
    tagName: string;
    entityType: string;
    entityId: string;
};

export type EntityTagSetDto = {
    entityId?: string | null;
    entityType?: string | null;
    tags: Array<string>;
};

export type ExtensionEnumDto = {
    fields?: Array<ExtensionEnumFieldDto> | null;
    localizationResource?: string | null;
};

export type ExtensionEnumFieldDto = {
    name?: string | null;
    value?: unknown;
};

export type ExtensionPropertyApiCreateDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyApiDto = {
    onGet?: ExtensionPropertyApiGetDto;
    onCreate?: ExtensionPropertyApiCreateDto;
    onUpdate?: ExtensionPropertyApiUpdateDto;
};

export type ExtensionPropertyApiGetDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyApiUpdateDto = {
    isAvailable?: boolean;
};

export type ExtensionPropertyAttributeDto = {
    typeSimple?: string | null;
    config?: {
        [key: string]: unknown;
    } | null;
};

export type ExtensionPropertyDto = {
    type?: string | null;
    typeSimple?: string | null;
    displayName?: LocalizableStringDto;
    api?: ExtensionPropertyApiDto;
    ui?: ExtensionPropertyUiDto;
    policy?: ExtensionPropertyPolicyDto;
    attributes?: Array<ExtensionPropertyAttributeDto> | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
    defaultValue?: unknown;
};

export type ExtensionPropertyFeaturePolicyDto = {
    features?: Array<string> | null;
    requiresAll?: boolean;
};

export type ExtensionPropertyGlobalFeaturePolicyDto = {
    features?: Array<string> | null;
    requiresAll?: boolean;
};

export type ExtensionPropertyPermissionPolicyDto = {
    permissionNames?: Array<string> | null;
    requiresAll?: boolean;
};

export type ExtensionPropertyPolicyDto = {
    globalFeatures?: ExtensionPropertyGlobalFeaturePolicyDto;
    features?: ExtensionPropertyFeaturePolicyDto;
    permissions?: ExtensionPropertyPermissionPolicyDto;
};

export type ExtensionPropertyUiDto = {
    onTable?: ExtensionPropertyUiTableDto;
    onCreateForm?: ExtensionPropertyUiFormDto;
    onEditForm?: ExtensionPropertyUiFormDto;
    lookup?: ExtensionPropertyUiLookupDto;
};

export type ExtensionPropertyUiFormDto = {
    isVisible?: boolean;
};

export type ExtensionPropertyUiLookupDto = {
    url?: string | null;
    resultListPropertyName?: string | null;
    displayPropertyName?: string | null;
    valuePropertyName?: string | null;
    filterParamName?: string | null;
};

export type ExtensionPropertyUiTableDto = {
    isVisible?: boolean;
};

export type FeatureDto = {
    name?: string | null;
    displayName?: string | null;
    value?: string | null;
    provider?: FeatureProviderDto;
    description?: string | null;
    valueType?: VoloAbpValidationStringValuesIStringValueType;
    depth?: number;
    parentName?: string | null;
};

export type FeatureGroupDto = {
    name?: string | null;
    displayName?: string | null;
    features?: Array<FeatureDto> | null;
};

export type FeatureProviderDto = {
    name?: string | null;
    key?: string | null;
};

export type FindTenantResultDto = {
    success?: boolean;
    tenantId?: string | null;
    name?: string | null;
    normalizedName?: string | null;
    isActive?: boolean;
};

export type GetFeatureListResultDto = {
    groups?: Array<FeatureGroupDto> | null;
};

export type GetPermissionListResultDto = {
    entityDisplayName?: string | null;
    groups?: Array<PermissionGroupDto> | null;
};

export type GlobalResourceDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    name?: string | null;
    value?: string | null;
};

export type GlobalResourcesDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    styleContent?: string | null;
    scriptContent?: string | null;
};

export type GlobalResourcesUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    style?: string | null;
    script?: string | null;
};

export type IanaTimeZone = {
    timeZoneName?: string | null;
};

export type IdentityRoleCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
};

export type IdentityRoleDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: string | null;
    isDefault?: boolean;
    isStatic?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: string | null;
    creationTime?: string;
};

export type IdentityRoleUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    isDefault?: boolean;
    isPublic?: boolean;
    concurrencyStamp?: string | null;
};

export type IdentityUserCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    name?: string | null;
    surname?: string | null;
    email: string;
    phoneNumber?: string | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<string> | null;
    password: string;
};

export type IdentityUserDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    isDeleted?: boolean;
    deleterId?: string | null;
    deletionTime?: string | null;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
    email?: string | null;
    emailConfirmed?: boolean;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    accessFailedCount?: number;
    lockoutEnd?: string | null;
    concurrencyStamp?: string | null;
    entityVersion?: number;
    lastPasswordChangeTime?: string | null;
};

export type IdentityUserUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    name?: string | null;
    surname?: string | null;
    email: string;
    phoneNumber?: string | null;
    isActive?: boolean;
    lockoutEnabled?: boolean;
    roleNames?: Array<string> | null;
    password?: string | null;
    concurrencyStamp?: string | null;
};

export type IdentityUserUpdateRolesDto = {
    roleNames: Array<string>;
};

export type InterfaceMethodApiDescriptionModel = {
    name?: string | null;
    parametersOnMethod?: Array<MethodParameterApiDescriptionModel> | null;
    returnValue?: ReturnValueApiDescriptionModel;
};

export type LanguageInfo = {
    cultureName?: string | null;
    uiCultureName?: string | null;
    displayName?: string | null;
    readonly twoLetterISOLanguageName?: string | null;
};

export type ListResultDtoOfBlogDto = {
    items?: Array<BlogDto> | null;
};

export type ListResultDtoOfCommentWithDetailsDto = {
    items?: Array<CommentWithDetailsDto> | null;
};

export type ListResultDtoOfIdentityRoleDto = {
    items?: Array<IdentityRoleDto> | null;
};

export type ListResultDtoOfMenuItemDto = {
    items?: Array<MenuItemDto> | null;
};

export type ListResultDtoOfPermissionLookupDto = {
    items?: Array<PermissionLookupDto> | null;
};

export type ListResultDtoOfReactionWithSelectionDto = {
    items?: Array<ReactionWithSelectionDto> | null;
};

export type ListResultDtoOfUserData = {
    items?: Array<UserData> | null;
};

export type LocalizableStringDto = {
    name?: string | null;
    resource?: string | null;
};

export type LoginResultType = 1 | 2 | 3 | 4 | 5;

export type MarkedItemDto = {
    iconName?: string | null;
};

export type MarkedItemWithToggleDto = {
    markedItem?: MarkedItemDto;
    isMarkedByCurrentUser?: boolean;
};

export type MediaDescriptorDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: string | null;
    mimeType?: string | null;
    size?: number;
};

export type MenuItemCreateInput = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    parentId?: string | null;
    displayName: string;
    isActive?: boolean;
    url?: string | null;
    icon?: string | null;
    order?: number;
    target?: string | null;
    elementId?: string | null;
    cssClass?: string | null;
    pageId?: string | null;
    requiredPermissionName?: string | null;
};

export type MenuItemDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    parentId?: string | null;
    displayName?: string | null;
    isActive?: boolean;
    url?: string | null;
    icon?: string | null;
    order?: number;
    target?: string | null;
    elementId?: string | null;
    cssClass?: string | null;
    pageId?: string | null;
    requiredPermissionName?: string | null;
    concurrencyStamp?: string | null;
};

export type MenuItemMoveInput = {
    newParentId?: string | null;
    position?: number;
};

export type MenuItemUpdateInput = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    displayName: string;
    isActive?: boolean;
    url?: string | null;
    icon?: string | null;
    target?: string | null;
    elementId?: string | null;
    cssClass?: string | null;
    pageId?: string | null;
    requiredPermissionName?: string | null;
    concurrencyStamp?: string | null;
};

export type MenuItemWithDetailsDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    parentId?: string | null;
    displayName?: string | null;
    isActive?: boolean;
    url?: string | null;
    icon?: string | null;
    order?: number;
    target?: string | null;
    elementId?: string | null;
    cssClass?: string | null;
    pageId?: string | null;
    requiredPermissionName?: string | null;
    concurrencyStamp?: string | null;
    pageTitle?: string | null;
};

export type MethodParameterApiDescriptionModel = {
    name?: string | null;
    typeAsString?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isOptional?: boolean;
    defaultValue?: unknown;
};

export type ModuleApiDescriptionModel = {
    rootPath?: string | null;
    remoteServiceName?: string | null;
    controllers?: {
        [key: string]: ControllerApiDescriptionModel;
    } | null;
};

export type ModuleExtensionDto = {
    entities?: {
        [key: string]: EntityExtensionDto;
    } | null;
    configuration?: {
        [key: string]: unknown;
    } | null;
};

export type MultiTenancyInfoDto = {
    isEnabled?: boolean;
};

export type NameValue = {
    name?: string | null;
    value?: string | null;
};

export type ObjectExtensionsDto = {
    modules?: {
        [key: string]: ModuleExtensionDto;
    } | null;
    enums?: {
        [key: string]: ExtensionEnumDto;
    } | null;
};

export type PageLookupDto = {
    id?: string;
    title?: string | null;
    slug?: string | null;
};

export type PagedResultDtoOfBlogDto = {
    items?: Array<BlogDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfBlogPostCommonDto = {
    items?: Array<BlogPostCommonDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfBlogPostListDto = {
    items?: Array<BlogPostListDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfCommentWithAuthorDto = {
    items?: Array<CommentWithAuthorDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfIdentityRoleDto = {
    items?: Array<IdentityRoleDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfIdentityUserDto = {
    items?: Array<IdentityUserDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfPageLookupDto = {
    items?: Array<PageLookupDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfTagDto = {
    items?: Array<TagDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfTenantDto = {
    items?: Array<TenantDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfVoloCmsKitAdminPagesPageDto = {
    items?: Array<VoloCmsKitAdminPagesPageDto> | null;
    totalCount?: number;
};

export type PagedResultDtoOfVoloCmsKitUsersCmsUserDto = {
    items?: Array<VoloCmsKitUsersCmsUserDto> | null;
    totalCount?: number;
};

export type ParameterApiDescriptionModel = {
    nameOnMethod?: string | null;
    name?: string | null;
    jsonName?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isOptional?: boolean;
    defaultValue?: unknown;
    constraintTypes?: Array<string> | null;
    bindingSourceId?: string | null;
    descriptorName?: string | null;
};

export type PermissionGrantInfoDto = {
    name?: string | null;
    displayName?: string | null;
    parentName?: string | null;
    isGranted?: boolean;
    allowedProviders?: Array<string> | null;
    grantedProviders?: Array<ProviderInfoDto> | null;
};

export type PermissionGroupDto = {
    name?: string | null;
    displayName?: string | null;
    displayNameKey?: string | null;
    displayNameResource?: string | null;
    permissions?: Array<PermissionGrantInfoDto> | null;
};

export type PermissionLookupDto = {
    name?: string | null;
    displayName?: string | null;
};

export type PopularTagDto = {
    id?: string;
    name?: string | null;
    count?: number;
};

export type ProfileDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName?: string | null;
    email?: string | null;
    name?: string | null;
    surname?: string | null;
    phoneNumber?: string | null;
    isExternal?: boolean;
    hasPassword?: boolean;
    concurrencyStamp?: string | null;
};

export type PropertyApiDescriptionModel = {
    name?: string | null;
    jsonName?: string | null;
    type?: string | null;
    typeSimple?: string | null;
    isRequired?: boolean;
    minLength?: number | null;
    maxLength?: number | null;
    minimum?: string | null;
    maximum?: string | null;
    regex?: string | null;
};

export type ProviderInfoDto = {
    providerName?: string | null;
    providerKey?: string | null;
};

export type RatingDto = {
    id?: string;
    entityType?: string | null;
    entityId?: string | null;
    starCount?: number;
    creatorId?: string;
    creationTime?: string;
};

export type RatingWithStarCountDto = {
    starCount?: number;
    count?: number;
    isSelectedByCurrentUser?: boolean;
};

export type ReactionDto = {
    name?: string | null;
    displayName?: string | null;
};

export type ReactionWithSelectionDto = {
    reaction?: ReactionDto;
    count?: number;
    isSelectedByCurrentUser?: boolean;
};

export type RegisterDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName: string;
    emailAddress: string;
    password: string;
    appName: string;
};

export type RemoteServiceErrorInfo = {
    code?: string | null;
    message?: string | null;
    details?: string | null;
    data?: {
        [key: string]: unknown;
    } | null;
    validationErrors?: Array<RemoteServiceValidationErrorInfo> | null;
};

export type RemoteServiceErrorResponse = {
    error?: RemoteServiceErrorInfo;
};

export type RemoteServiceValidationErrorInfo = {
    message?: string | null;
    members?: Array<string> | null;
};

export type ResetPasswordDto = {
    userId?: string;
    resetToken: string;
    password: string;
};

export type ReturnValueApiDescriptionModel = {
    type?: string | null;
    typeSimple?: string | null;
};

export type SendPasswordResetCodeDto = {
    email: string;
    appName: string;
    returnUrl?: string | null;
    returnUrlHash?: string | null;
};

export type SendTestEmailInput = {
    senderEmailAddress: string;
    targetEmailAddress: string;
    subject: string;
    body?: string | null;
};

export type TagCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    entityType: string;
    name: string;
};

export type TagDefinitionDto = {
    entityType?: string | null;
    displayName?: string | null;
};

export type TagDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    entityType?: string | null;
    name?: string | null;
    concurrencyStamp?: string | null;
};

export type TagUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    concurrencyStamp?: string | null;
};

export type TenantCreateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    adminEmailAddress: string;
    adminPassword: string;
};

export type TenantDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    name?: string | null;
    concurrencyStamp?: string | null;
};

export type TenantUpdateDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    concurrencyStamp?: string | null;
};

export type TimingDto = {
    timeZone?: VoloAbpAspNetCoreMvcApplicationConfigurationsTimeZone;
};

export type TypeApiDescriptionModel = {
    baseType?: string | null;
    isEnum?: boolean;
    enumNames?: Array<string> | null;
    enumValues?: Array<unknown> | null;
    genericArguments?: Array<string> | null;
    properties?: Array<PropertyApiDescriptionModel> | null;
};

export type UpdateBlogDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    name: string;
    slug: string;
    concurrencyStamp?: string | null;
};

export type UpdateBlogPostDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    title: string;
    slug: string;
    shortDescription?: string | null;
    content?: string | null;
    coverImageMediaId?: string | null;
    concurrencyStamp?: string | null;
};

export type UpdateCommentInput = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    text: string;
    concurrencyStamp?: string | null;
    captchaToken?: string | null;
    captchaAnswer?: number;
};

export type UpdateEmailSettingsDto = {
    smtpHost?: string | null;
    smtpPort?: number;
    smtpUserName?: string | null;
    smtpPassword?: string | null;
    smtpDomain?: string | null;
    smtpEnableSsl?: boolean;
    smtpUseDefaultCredentials?: boolean;
    defaultFromAddress: string;
    defaultFromDisplayName: string;
};

export type UpdateFeatureDto = {
    name?: string | null;
    value?: string | null;
};

export type UpdateFeaturesDto = {
    features?: Array<UpdateFeatureDto> | null;
};

export type UpdatePageInputDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    title: string;
    slug: string;
    layoutName?: string | null;
    content?: string | null;
    script?: string | null;
    style?: string | null;
    concurrencyStamp?: string | null;
};

export type UpdatePermissionDto = {
    name?: string | null;
    isGranted?: boolean;
};

export type UpdatePermissionsDto = {
    permissions?: Array<UpdatePermissionDto> | null;
};

export type UpdateProfileDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    userName?: string | null;
    email?: string | null;
    name?: string | null;
    surname?: string | null;
    phoneNumber?: string | null;
    concurrencyStamp?: string | null;
};

export type UserData = {
    id?: string;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
    isActive?: boolean;
    email?: string | null;
    emailConfirmed?: boolean;
    phoneNumber?: string | null;
    phoneNumberConfirmed?: boolean;
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
};

export type VerifyPasswordResetTokenInput = {
    userId?: string;
    resetToken: string;
};

export type VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo = {
    userNameOrEmailAddress: string;
    password: string;
    rememberMe?: boolean;
};

export type VoloAbpAspNetCoreMvcApplicationConfigurationsTimeZone = {
    iana?: IanaTimeZone;
    windows?: WindowsTimeZone;
};

export type VoloAbpValidationStringValuesIStringValueType = {
    readonly name?: string | null;
    readonly properties?: {
        [key: string]: unknown;
    } | null;
    validator?: VoloAbpValidationStringValuesIValueValidator;
};

export type VoloAbpValidationStringValuesIValueValidator = {
    readonly name?: string | null;
    readonly properties?: {
        [key: string]: unknown;
    } | null;
};

export type VoloCmsKitAdminCommentsCmsUserDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
};

export type VoloCmsKitAdminPagesPageDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    creationTime?: string;
    creatorId?: string | null;
    lastModificationTime?: string | null;
    lastModifierId?: string | null;
    title?: string | null;
    slug?: string | null;
    layoutName?: string | null;
    content?: string | null;
    script?: string | null;
    style?: string | null;
    isHomePage?: boolean;
    concurrencyStamp?: string | null;
};

export type VoloCmsKitContentsPageDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    title?: string | null;
    slug?: string | null;
    layoutName?: string | null;
    content?: string | null;
    script?: string | null;
    style?: string | null;
};

export type VoloCmsKitPublicCommentsCmsUserDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
};

export type VoloCmsKitPublicCommentsCommentDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    entityType?: string | null;
    entityId?: string | null;
    text?: string | null;
    repliedCommentId?: string | null;
    creatorId?: string;
    creationTime?: string;
    author?: VoloCmsKitPublicCommentsCmsUserDto;
    concurrencyStamp?: string | null;
    url?: string | null;
};

export type VoloCmsKitUsersCmsUserDto = {
    readonly extraProperties?: {
        [key: string]: unknown;
    } | null;
    id?: string;
    tenantId?: string | null;
    userName?: string | null;
    name?: string | null;
    surname?: string | null;
};

export type WindowsTimeZone = {
    timeZoneId?: string | null;
};

export type AbpApiDefinitionGetData = {
    body?: never;
    path?: never;
    query?: {
        IncludeTypes?: boolean;
    };
    url: '/api/abp/api-definition';
};

export type AbpApiDefinitionGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpApiDefinitionGetError = AbpApiDefinitionGetErrors[keyof AbpApiDefinitionGetErrors];

export type AbpApiDefinitionGetResponses = {
    /**
     * OK
     */
    200: ApplicationApiDescriptionModel;
};

export type AbpApiDefinitionGetResponse = AbpApiDefinitionGetResponses[keyof AbpApiDefinitionGetResponses];

export type AbpApplicationConfigurationGetData = {
    body?: never;
    path?: never;
    query?: {
        IncludeLocalizationResources?: boolean;
    };
    url: '/api/abp/application-configuration';
};

export type AbpApplicationConfigurationGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpApplicationConfigurationGetError = AbpApplicationConfigurationGetErrors[keyof AbpApplicationConfigurationGetErrors];

export type AbpApplicationConfigurationGetResponses = {
    /**
     * OK
     */
    200: ApplicationConfigurationDto;
};

export type AbpApplicationConfigurationGetResponse = AbpApplicationConfigurationGetResponses[keyof AbpApplicationConfigurationGetResponses];

export type AbpApplicationLocalizationGetData = {
    body?: never;
    path?: never;
    query: {
        CultureName: string;
        OnlyDynamics?: boolean;
    };
    url: '/api/abp/application-localization';
};

export type AbpApplicationLocalizationGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpApplicationLocalizationGetError = AbpApplicationLocalizationGetErrors[keyof AbpApplicationLocalizationGetErrors];

export type AbpApplicationLocalizationGetResponses = {
    /**
     * OK
     */
    200: ApplicationLocalizationDto;
};

export type AbpApplicationLocalizationGetResponse = AbpApplicationLocalizationGetResponses[keyof AbpApplicationLocalizationGetResponses];

export type AbpTenantFindTenantByNameData = {
    body?: never;
    path: {
        name: string;
    };
    query?: never;
    url: '/api/abp/multi-tenancy/tenants/by-name/{name}';
};

export type AbpTenantFindTenantByNameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpTenantFindTenantByNameError = AbpTenantFindTenantByNameErrors[keyof AbpTenantFindTenantByNameErrors];

export type AbpTenantFindTenantByNameResponses = {
    /**
     * OK
     */
    200: FindTenantResultDto;
};

export type AbpTenantFindTenantByNameResponse = AbpTenantFindTenantByNameResponses[keyof AbpTenantFindTenantByNameResponses];

export type AbpTenantFindTenantByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/abp/multi-tenancy/tenants/by-id/{id}';
};

export type AbpTenantFindTenantByIdErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AbpTenantFindTenantByIdError = AbpTenantFindTenantByIdErrors[keyof AbpTenantFindTenantByIdErrors];

export type AbpTenantFindTenantByIdResponses = {
    /**
     * OK
     */
    200: FindTenantResultDto;
};

export type AbpTenantFindTenantByIdResponse = AbpTenantFindTenantByIdResponses[keyof AbpTenantFindTenantByIdResponses];

export type AccountRegisterData = {
    body?: RegisterDto;
    path?: never;
    query?: never;
    url: '/api/account/register';
};

export type AccountRegisterErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountRegisterError = AccountRegisterErrors[keyof AccountRegisterErrors];

export type AccountRegisterResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type AccountRegisterResponse = AccountRegisterResponses[keyof AccountRegisterResponses];

export type AccountSendPasswordResetCodeData = {
    body?: SendPasswordResetCodeDto;
    path?: never;
    query?: never;
    url: '/api/account/send-password-reset-code';
};

export type AccountSendPasswordResetCodeErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountSendPasswordResetCodeError = AccountSendPasswordResetCodeErrors[keyof AccountSendPasswordResetCodeErrors];

export type AccountSendPasswordResetCodeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type AccountVerifyPasswordResetTokenData = {
    body?: VerifyPasswordResetTokenInput;
    path?: never;
    query?: never;
    url: '/api/account/verify-password-reset-token';
};

export type AccountVerifyPasswordResetTokenErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountVerifyPasswordResetTokenError = AccountVerifyPasswordResetTokenErrors[keyof AccountVerifyPasswordResetTokenErrors];

export type AccountVerifyPasswordResetTokenResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type AccountVerifyPasswordResetTokenResponse = AccountVerifyPasswordResetTokenResponses[keyof AccountVerifyPasswordResetTokenResponses];

export type AccountResetPasswordData = {
    body?: ResetPasswordDto;
    path?: never;
    query?: never;
    url: '/api/account/reset-password';
};

export type AccountResetPasswordErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type AccountResetPasswordError = AccountResetPasswordErrors[keyof AccountResetPasswordErrors];

export type AccountResetPasswordResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/{id}';
};

export type BlogAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminDeleteError = BlogAdminDeleteErrors[keyof BlogAdminDeleteErrors];

export type BlogAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogAdminGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/{id}';
};

export type BlogAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminGetError = BlogAdminGetErrors[keyof BlogAdminGetErrors];

export type BlogAdminGetResponses = {
    /**
     * OK
     */
    200: BlogDto;
};

export type BlogAdminGetResponse = BlogAdminGetResponses[keyof BlogAdminGetResponses];

export type BlogAdminUpdateData = {
    body?: UpdateBlogDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/{id}';
};

export type BlogAdminUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminUpdateError = BlogAdminUpdateErrors[keyof BlogAdminUpdateErrors];

export type BlogAdminUpdateResponses = {
    /**
     * OK
     */
    200: BlogDto;
};

export type BlogAdminUpdateResponse = BlogAdminUpdateResponses[keyof BlogAdminUpdateResponses];

export type BlogAdminGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-admin/blogs';
};

export type BlogAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminGetListError = BlogAdminGetListErrors[keyof BlogAdminGetListErrors];

export type BlogAdminGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfBlogDto;
};

export type BlogAdminGetListResponse = BlogAdminGetListResponses[keyof BlogAdminGetListResponses];

export type BlogAdminCreateData = {
    body?: CreateBlogDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/blogs';
};

export type BlogAdminCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminCreateError = BlogAdminCreateErrors[keyof BlogAdminCreateErrors];

export type BlogAdminCreateResponses = {
    /**
     * OK
     */
    200: BlogDto;
};

export type BlogAdminCreateResponse = BlogAdminCreateResponses[keyof BlogAdminCreateResponses];

export type BlogAdminGetAllListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/blogs/all';
};

export type BlogAdminGetAllListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminGetAllListError = BlogAdminGetAllListErrors[keyof BlogAdminGetAllListErrors];

export type BlogAdminGetAllListResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfBlogDto;
};

export type BlogAdminGetAllListResponse = BlogAdminGetAllListResponses[keyof BlogAdminGetAllListResponses];

export type BlogAdminMoveAllBlogPostsData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        blogId?: string;
        assignToBlogId?: string;
    };
    url: '/api/cms-kit-admin/blogs/{id}/move-all-blog-posts';
};

export type BlogAdminMoveAllBlogPostsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogAdminMoveAllBlogPostsError = BlogAdminMoveAllBlogPostsErrors[keyof BlogAdminMoveAllBlogPostsErrors];

export type BlogAdminMoveAllBlogPostsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogFeatureGetOrDefaultData = {
    body?: never;
    path: {
        blogId: string;
        featureName: string;
    };
    query?: never;
    url: '/api/cms-kit/blogs/{blogId}/features/{featureName}';
};

export type BlogFeatureGetOrDefaultErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogFeatureGetOrDefaultError = BlogFeatureGetOrDefaultErrors[keyof BlogFeatureGetOrDefaultErrors];

export type BlogFeatureGetOrDefaultResponses = {
    /**
     * OK
     */
    200: BlogFeatureDto;
};

export type BlogFeatureGetOrDefaultResponse = BlogFeatureGetOrDefaultResponses[keyof BlogFeatureGetOrDefaultResponses];

export type BlogFeatureAdminGetListData = {
    body?: never;
    path: {
        blogId: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/{blogId}/features';
};

export type BlogFeatureAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogFeatureAdminGetListError = BlogFeatureAdminGetListErrors[keyof BlogFeatureAdminGetListErrors];

export type BlogFeatureAdminGetListResponses = {
    /**
     * OK
     */
    200: Array<BlogFeatureDto>;
};

export type BlogFeatureAdminGetListResponse = BlogFeatureAdminGetListResponses[keyof BlogFeatureAdminGetListResponses];

export type BlogFeatureAdminSetData = {
    body?: BlogFeatureInputDto;
    path: {
        blogId: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/{blogId}/features';
};

export type BlogFeatureAdminSetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogFeatureAdminSetError = BlogFeatureAdminSetErrors[keyof BlogFeatureAdminSetErrors];

export type BlogFeatureAdminSetResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogPostAdminGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        BlogId?: string;
        AuthorId?: string;
        TagId?: string;
        Status?: BlogPostStatus;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-admin/blogs/blog-posts';
};

export type BlogPostAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminGetListError = BlogPostAdminGetListErrors[keyof BlogPostAdminGetListErrors];

export type BlogPostAdminGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfBlogPostListDto;
};

export type BlogPostAdminGetListResponse = BlogPostAdminGetListResponses[keyof BlogPostAdminGetListResponses];

export type BlogPostAdminCreateData = {
    body?: CreateBlogPostDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts';
};

export type BlogPostAdminCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminCreateError = BlogPostAdminCreateErrors[keyof BlogPostAdminCreateErrors];

export type BlogPostAdminCreateResponses = {
    /**
     * OK
     */
    200: BlogPostDto;
};

export type BlogPostAdminCreateResponse = BlogPostAdminCreateResponses[keyof BlogPostAdminCreateResponses];

export type BlogPostAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/{id}';
};

export type BlogPostAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminDeleteError = BlogPostAdminDeleteErrors[keyof BlogPostAdminDeleteErrors];

export type BlogPostAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogPostAdminGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/{id}';
};

export type BlogPostAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminGetError = BlogPostAdminGetErrors[keyof BlogPostAdminGetErrors];

export type BlogPostAdminGetResponses = {
    /**
     * OK
     */
    200: BlogPostDto;
};

export type BlogPostAdminGetResponse = BlogPostAdminGetResponses[keyof BlogPostAdminGetResponses];

export type BlogPostAdminUpdateData = {
    body?: UpdateBlogPostDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/{id}';
};

export type BlogPostAdminUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminUpdateError = BlogPostAdminUpdateErrors[keyof BlogPostAdminUpdateErrors];

export type BlogPostAdminUpdateResponses = {
    /**
     * OK
     */
    200: BlogPostDto;
};

export type BlogPostAdminUpdateResponse = BlogPostAdminUpdateResponses[keyof BlogPostAdminUpdateResponses];

export type BlogPostAdminPublishData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/{id}/publish';
};

export type BlogPostAdminPublishErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminPublishError = BlogPostAdminPublishErrors[keyof BlogPostAdminPublishErrors];

export type BlogPostAdminPublishResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogPostAdminDraftData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/{id}/draft';
};

export type BlogPostAdminDraftErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminDraftError = BlogPostAdminDraftErrors[keyof BlogPostAdminDraftErrors];

export type BlogPostAdminDraftResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogPostAdminCreateAndPublishData = {
    body?: CreateBlogPostDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/create-and-publish';
};

export type BlogPostAdminCreateAndPublishErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminCreateAndPublishError = BlogPostAdminCreateAndPublishErrors[keyof BlogPostAdminCreateAndPublishErrors];

export type BlogPostAdminCreateAndPublishResponses = {
    /**
     * OK
     */
    200: BlogPostDto;
};

export type BlogPostAdminCreateAndPublishResponse = BlogPostAdminCreateAndPublishResponses[keyof BlogPostAdminCreateAndPublishResponses];

export type BlogPostAdminSendToReviewData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/{id}/send-to-review';
};

export type BlogPostAdminSendToReviewErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminSendToReviewError = BlogPostAdminSendToReviewErrors[keyof BlogPostAdminSendToReviewErrors];

export type BlogPostAdminSendToReviewResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogPostAdminCreateAndSendToReviewData = {
    body?: CreateBlogPostDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/create-and-send-to-review';
};

export type BlogPostAdminCreateAndSendToReviewErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminCreateAndSendToReviewError = BlogPostAdminCreateAndSendToReviewErrors[keyof BlogPostAdminCreateAndSendToReviewErrors];

export type BlogPostAdminCreateAndSendToReviewResponses = {
    /**
     * OK
     */
    200: BlogPostDto;
};

export type BlogPostAdminCreateAndSendToReviewResponse = BlogPostAdminCreateAndSendToReviewResponses[keyof BlogPostAdminCreateAndSendToReviewResponses];

export type BlogPostAdminHasBlogPostWaitingForReviewData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/blogs/blog-posts/has-blogpost-waiting-for-review';
};

export type BlogPostAdminHasBlogPostWaitingForReviewErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostAdminHasBlogPostWaitingForReviewError = BlogPostAdminHasBlogPostWaitingForReviewErrors[keyof BlogPostAdminHasBlogPostWaitingForReviewErrors];

export type BlogPostAdminHasBlogPostWaitingForReviewResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type BlogPostAdminHasBlogPostWaitingForReviewResponse = BlogPostAdminHasBlogPostWaitingForReviewResponses[keyof BlogPostAdminHasBlogPostWaitingForReviewResponses];

export type BlogPostPublicGetData = {
    body?: never;
    path: {
        blogSlug: string;
        blogPostSlug: string;
    };
    query?: never;
    url: '/api/cms-kit-public/blog-posts/{blogSlug}/{blogPostSlug}';
};

export type BlogPostPublicGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostPublicGetError = BlogPostPublicGetErrors[keyof BlogPostPublicGetErrors];

export type BlogPostPublicGetResponses = {
    /**
     * OK
     */
    200: BlogPostCommonDto;
};

export type BlogPostPublicGetResponse = BlogPostPublicGetResponses[keyof BlogPostPublicGetResponses];

export type BlogPostPublicGetListData = {
    body?: never;
    path: {
        blogSlug: string;
    };
    query?: {
        AuthorId?: string;
        TagId?: string;
        FilterOnFavorites?: boolean;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-public/blog-posts/{blogSlug}';
};

export type BlogPostPublicGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostPublicGetListError = BlogPostPublicGetListErrors[keyof BlogPostPublicGetListErrors];

export type BlogPostPublicGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfBlogPostCommonDto;
};

export type BlogPostPublicGetListResponse = BlogPostPublicGetListResponses[keyof BlogPostPublicGetListResponses];

export type BlogPostPublicGetAuthorsHasBlogPostsData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-public/blog-posts/authors';
};

export type BlogPostPublicGetAuthorsHasBlogPostsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostPublicGetAuthorsHasBlogPostsError = BlogPostPublicGetAuthorsHasBlogPostsErrors[keyof BlogPostPublicGetAuthorsHasBlogPostsErrors];

export type BlogPostPublicGetAuthorsHasBlogPostsResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfVoloCmsKitUsersCmsUserDto;
};

export type BlogPostPublicGetAuthorsHasBlogPostsResponse = BlogPostPublicGetAuthorsHasBlogPostsResponses[keyof BlogPostPublicGetAuthorsHasBlogPostsResponses];

export type BlogPostPublicGetAuthorHasBlogPostData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-public/blog-posts/authors/{id}';
};

export type BlogPostPublicGetAuthorHasBlogPostErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostPublicGetAuthorHasBlogPostError = BlogPostPublicGetAuthorHasBlogPostErrors[keyof BlogPostPublicGetAuthorHasBlogPostErrors];

export type BlogPostPublicGetAuthorHasBlogPostResponses = {
    /**
     * OK
     */
    200: VoloCmsKitUsersCmsUserDto;
};

export type BlogPostPublicGetAuthorHasBlogPostResponse = BlogPostPublicGetAuthorHasBlogPostResponses[keyof BlogPostPublicGetAuthorHasBlogPostResponses];

export type BlogPostPublicDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-public/blog-posts/{id}';
};

export type BlogPostPublicDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostPublicDeleteError = BlogPostPublicDeleteErrors[keyof BlogPostPublicDeleteErrors];

export type BlogPostPublicDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type BlogPostPublicGetTagNameData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        tagId?: string;
    };
    url: '/api/cms-kit-public/blog-posts/tags/{id}';
};

export type BlogPostPublicGetTagNameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type BlogPostPublicGetTagNameError = BlogPostPublicGetTagNameErrors[keyof BlogPostPublicGetTagNameErrors];

export type BlogPostPublicGetTagNameResponses = {
    /**
     * OK
     */
    200: string;
};

export type BlogPostPublicGetTagNameResponse = BlogPostPublicGetTagNameResponses[keyof BlogPostPublicGetTagNameResponses];

export type ClientGetListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/client-management';
};

export type ClientGetListResponses = {
    /**
     * OK
     */
    200: Array<ClientDto>;
};

export type ClientGetListResponse = ClientGetListResponses[keyof ClientGetListResponses];

export type ClientCreateData = {
    body?: never;
    path?: never;
    query?: {
        ClientId?: string;
        DisplayName?: string;
        PostLogoutRedirectUris?: string;
        RedirectUris?: string;
        Permissions?: string;
        Type?: string;
    };
    url: '/api/client-management';
};

export type ClientCreateResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientCreateResponse = ClientCreateResponses[keyof ClientCreateResponses];

export type ClientDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/client-management/{id}';
};

export type ClientDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ClientGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/client-management/{id}';
};

export type ClientGetResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientGetResponse = ClientGetResponses[keyof ClientGetResponses];

export type ClientUpdateData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        ClientId?: string;
        DisplayName?: string;
        PostLogoutRedirectUris?: string;
        RedirectUris?: string;
        Permissions?: string;
        Type?: string;
    };
    url: '/api/client-management/{id}';
};

export type ClientUpdateResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientUpdateResponse = ClientUpdateResponses[keyof ClientUpdateResponses];

export type ClientAddRedirectUriData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        redirectUri?: string;
    };
    url: '/api/client-management/add-redirect-uri/{id}';
};

export type ClientAddRedirectUriResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientAddRedirectUriResponse = ClientAddRedirectUriResponses[keyof ClientAddRedirectUriResponses];

export type ClientAddPostLogoutRedirectUriData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        redirectUri?: string;
    };
    url: '/api/client-management/add-post-logout-redirect-uri/{id}';
};

export type ClientAddPostLogoutRedirectUriResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientAddPostLogoutRedirectUriResponse = ClientAddPostLogoutRedirectUriResponses[keyof ClientAddPostLogoutRedirectUriResponses];

export type ClientUpdateClientTypeData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        clientType?: string;
    };
    url: '/api/client-management/update-client-type/{id}';
};

export type ClientUpdateClientTypeResponses = {
    /**
     * OK
     */
    200: ClientDto;
};

export type ClientUpdateClientTypeResponse = ClientUpdateClientTypeResponses[keyof ClientUpdateClientTypeResponses];

export type CmsKitPublicGlobalResourcesGetGlobalStyleData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cms-kit/global-resources/style';
};

export type CmsKitPublicGlobalResourcesGetGlobalStyleResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CmsKitPublicGlobalResourcesGetGlobalScriptData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/cms-kit/global-resources/script';
};

export type CmsKitPublicGlobalResourcesGetGlobalScriptResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CommentAdminGetListData = {
    body?: never;
    path?: never;
    query?: {
        EntityType?: string;
        Text?: string;
        RepliedCommentId?: string;
        Author?: string;
        CreationStartDate?: string;
        CreationEndDate?: string;
        CommentApproveState?: CommentApproveState;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-admin/comments';
};

export type CommentAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentAdminGetListError = CommentAdminGetListErrors[keyof CommentAdminGetListErrors];

export type CommentAdminGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfCommentWithAuthorDto;
};

export type CommentAdminGetListResponse = CommentAdminGetListResponses[keyof CommentAdminGetListResponses];

export type CommentAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/comments/{id}';
};

export type CommentAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentAdminDeleteError = CommentAdminDeleteErrors[keyof CommentAdminDeleteErrors];

export type CommentAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CommentAdminGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/comments/{id}';
};

export type CommentAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentAdminGetError = CommentAdminGetErrors[keyof CommentAdminGetErrors];

export type CommentAdminGetResponses = {
    /**
     * OK
     */
    200: CommentWithAuthorDto;
};

export type CommentAdminGetResponse = CommentAdminGetResponses[keyof CommentAdminGetResponses];

export type CommentAdminUpdateApprovalStatusData = {
    body?: CommentApprovalDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/comments/{id}/approval-status';
};

export type CommentAdminUpdateApprovalStatusErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentAdminUpdateApprovalStatusError = CommentAdminUpdateApprovalStatusErrors[keyof CommentAdminUpdateApprovalStatusErrors];

export type CommentAdminUpdateApprovalStatusResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CommentAdminUpdateSettingsData = {
    body?: CommentSettingsDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/comments/settings';
};

export type CommentAdminUpdateSettingsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentAdminUpdateSettingsError = CommentAdminUpdateSettingsErrors[keyof CommentAdminUpdateSettingsErrors];

export type CommentAdminUpdateSettingsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CommentAdminGetWaitingCountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/comments/waiting-count';
};

export type CommentAdminGetWaitingCountErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentAdminGetWaitingCountError = CommentAdminGetWaitingCountErrors[keyof CommentAdminGetWaitingCountErrors];

export type CommentAdminGetWaitingCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type CommentAdminGetWaitingCountResponse = CommentAdminGetWaitingCountResponses[keyof CommentAdminGetWaitingCountResponses];

export type CommentPublicGetListData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/comments/{entityType}/{entityId}';
};

export type CommentPublicGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentPublicGetListError = CommentPublicGetListErrors[keyof CommentPublicGetListErrors];

export type CommentPublicGetListResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfCommentWithDetailsDto;
};

export type CommentPublicGetListResponse = CommentPublicGetListResponses[keyof CommentPublicGetListResponses];

export type CommentPublicCreateData = {
    body?: CreateCommentInput;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/comments/{entityType}/{entityId}';
};

export type CommentPublicCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentPublicCreateError = CommentPublicCreateErrors[keyof CommentPublicCreateErrors];

export type CommentPublicCreateResponses = {
    /**
     * OK
     */
    200: VoloCmsKitPublicCommentsCommentDto;
};

export type CommentPublicCreateResponse = CommentPublicCreateResponses[keyof CommentPublicCreateResponses];

export type CommentPublicDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-public/comments/{id}';
};

export type CommentPublicDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentPublicDeleteError = CommentPublicDeleteErrors[keyof CommentPublicDeleteErrors];

export type CommentPublicDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type CommentPublicUpdateData = {
    body?: UpdateCommentInput;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-public/comments/{id}';
};

export type CommentPublicUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type CommentPublicUpdateError = CommentPublicUpdateErrors[keyof CommentPublicUpdateErrors];

export type CommentPublicUpdateResponses = {
    /**
     * OK
     */
    200: VoloCmsKitPublicCommentsCommentDto;
};

export type CommentPublicUpdateResponse = CommentPublicUpdateResponses[keyof CommentPublicUpdateResponses];

export type DynamicClaimsRefreshData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/dynamic-claims/refresh';
};

export type DynamicClaimsRefreshErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type DynamicClaimsRefreshError = DynamicClaimsRefreshErrors[keyof DynamicClaimsRefreshErrors];

export type DynamicClaimsRefreshResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EmailSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing';
};

export type EmailSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EmailSettingsGetError = EmailSettingsGetErrors[keyof EmailSettingsGetErrors];

export type EmailSettingsGetResponses = {
    /**
     * OK
     */
    200: EmailSettingsDto;
};

export type EmailSettingsGetResponse = EmailSettingsGetResponses[keyof EmailSettingsGetResponses];

export type EmailSettingsUpdateData = {
    body?: UpdateEmailSettingsDto;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing';
};

export type EmailSettingsUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EmailSettingsUpdateError = EmailSettingsUpdateErrors[keyof EmailSettingsUpdateErrors];

export type EmailSettingsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EmailSettingsSendTestEmailData = {
    body?: SendTestEmailInput;
    path?: never;
    query?: never;
    url: '/api/setting-management/emailing/send-test-email';
};

export type EmailSettingsSendTestEmailErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EmailSettingsSendTestEmailError = EmailSettingsSendTestEmailErrors[keyof EmailSettingsSendTestEmailErrors];

export type EmailSettingsSendTestEmailResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EntityTagAdminRemoveTagFromEntityData = {
    body?: never;
    path?: never;
    query: {
        TagId: string;
        EntityType: string;
        EntityId: string;
    };
    url: '/api/cms-kit-admin/entity-tags';
};

export type EntityTagAdminRemoveTagFromEntityErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EntityTagAdminRemoveTagFromEntityError = EntityTagAdminRemoveTagFromEntityErrors[keyof EntityTagAdminRemoveTagFromEntityErrors];

export type EntityTagAdminRemoveTagFromEntityResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EntityTagAdminAddTagToEntityData = {
    body?: EntityTagCreateDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/entity-tags';
};

export type EntityTagAdminAddTagToEntityErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EntityTagAdminAddTagToEntityError = EntityTagAdminAddTagToEntityErrors[keyof EntityTagAdminAddTagToEntityErrors];

export type EntityTagAdminAddTagToEntityResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type EntityTagAdminSetEntityTagsData = {
    body?: EntityTagSetDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/entity-tags';
};

export type EntityTagAdminSetEntityTagsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type EntityTagAdminSetEntityTagsError = EntityTagAdminSetEntityTagsErrors[keyof EntityTagAdminSetEntityTagsErrors];

export type EntityTagAdminSetEntityTagsResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type FeaturesDeleteData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type FeaturesDeleteError = FeaturesDeleteErrors[keyof FeaturesDeleteErrors];

export type FeaturesDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type FeaturesGetData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type FeaturesGetError = FeaturesGetErrors[keyof FeaturesGetErrors];

export type FeaturesGetResponses = {
    /**
     * OK
     */
    200: GetFeatureListResultDto;
};

export type FeaturesGetResponse = FeaturesGetResponses[keyof FeaturesGetResponses];

export type FeaturesUpdateData = {
    body?: UpdateFeaturesDto;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/feature-management/features';
};

export type FeaturesUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type FeaturesUpdateError = FeaturesUpdateErrors[keyof FeaturesUpdateErrors];

export type FeaturesUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GlobalResourceAdminGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/global-resources';
};

export type GlobalResourceAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type GlobalResourceAdminGetError = GlobalResourceAdminGetErrors[keyof GlobalResourceAdminGetErrors];

export type GlobalResourceAdminGetResponses = {
    /**
     * OK
     */
    200: GlobalResourcesDto;
};

export type GlobalResourceAdminGetResponse = GlobalResourceAdminGetResponses[keyof GlobalResourceAdminGetResponses];

export type GlobalResourceAdminSetGlobalResourcesData = {
    body?: GlobalResourcesUpdateDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/global-resources';
};

export type GlobalResourceAdminSetGlobalResourcesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type GlobalResourceAdminSetGlobalResourcesError = GlobalResourceAdminSetGlobalResourcesErrors[keyof GlobalResourceAdminSetGlobalResourcesErrors];

export type GlobalResourceAdminSetGlobalResourcesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GlobalResourcePublicGetGlobalScriptData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-public/global-resources/script';
};

export type GlobalResourcePublicGetGlobalScriptErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type GlobalResourcePublicGetGlobalScriptError = GlobalResourcePublicGetGlobalScriptErrors[keyof GlobalResourcePublicGetGlobalScriptErrors];

export type GlobalResourcePublicGetGlobalScriptResponses = {
    /**
     * OK
     */
    200: GlobalResourceDto;
};

export type GlobalResourcePublicGetGlobalScriptResponse = GlobalResourcePublicGetGlobalScriptResponses[keyof GlobalResourcePublicGetGlobalScriptResponses];

export type GlobalResourcePublicGetGlobalStyleData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-public/global-resources/style';
};

export type GlobalResourcePublicGetGlobalStyleErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type GlobalResourcePublicGetGlobalStyleError = GlobalResourcePublicGetGlobalStyleErrors[keyof GlobalResourcePublicGetGlobalStyleErrors];

export type GlobalResourcePublicGetGlobalStyleResponses = {
    /**
     * OK
     */
    200: GlobalResourceDto;
};

export type GlobalResourcePublicGetGlobalStyleResponse = GlobalResourcePublicGetGlobalStyleResponses[keyof GlobalResourcePublicGetGlobalStyleResponses];

export type LoginLoginData = {
    body?: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo;
    path?: never;
    query?: never;
    url: '/api/account/login';
};

export type LoginLoginErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type LoginLoginError = LoginLoginErrors[keyof LoginLoginErrors];

export type LoginLoginResponses = {
    /**
     * OK
     */
    200: AbpLoginResult;
};

export type LoginLoginResponse = LoginLoginResponses[keyof LoginLoginResponses];

export type LoginLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/logout';
};

export type LoginLogoutErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type LoginLogoutError = LoginLogoutErrors[keyof LoginLogoutErrors];

export type LoginLogoutResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type LoginCheckPasswordData = {
    body?: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo;
    path?: never;
    query?: never;
    url: '/api/account/check-password';
};

export type LoginCheckPasswordErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type LoginCheckPasswordError = LoginCheckPasswordErrors[keyof LoginCheckPasswordErrors];

export type LoginCheckPasswordResponses = {
    /**
     * OK
     */
    200: AbpLoginResult;
};

export type LoginCheckPasswordResponse = LoginCheckPasswordResponses[keyof LoginCheckPasswordResponses];

export type MarkedItemPublicGetForUserData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/marked-items/{entityType}/{entityId}';
};

export type MarkedItemPublicGetForUserErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MarkedItemPublicGetForUserError = MarkedItemPublicGetForUserErrors[keyof MarkedItemPublicGetForUserErrors];

export type MarkedItemPublicGetForUserResponses = {
    /**
     * OK
     */
    200: MarkedItemWithToggleDto;
};

export type MarkedItemPublicGetForUserResponse = MarkedItemPublicGetForUserResponses[keyof MarkedItemPublicGetForUserResponses];

export type MarkedItemPublicToggleData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/marked-items/{entityType}/{entityId}';
};

export type MarkedItemPublicToggleErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MarkedItemPublicToggleError = MarkedItemPublicToggleErrors[keyof MarkedItemPublicToggleErrors];

export type MarkedItemPublicToggleResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type MarkedItemPublicToggleResponse = MarkedItemPublicToggleResponses[keyof MarkedItemPublicToggleResponses];

export type MediaDescriptorDownloadData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit/media/{id}';
};

export type MediaDescriptorDownloadErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MediaDescriptorDownloadError = MediaDescriptorDownloadErrors[keyof MediaDescriptorDownloadErrors];

export type MediaDescriptorDownloadResponses = {
    /**
     * OK
     */
    200: Blob | File;
};

export type MediaDescriptorDownloadResponse = MediaDescriptorDownloadResponses[keyof MediaDescriptorDownloadResponses];

export type MediaDescriptorAdminCreateData = {
    body?: {
        File?: Blob | File;
    };
    path: {
        entityType: string;
    };
    query: {
        Name: string;
    };
    url: '/api/cms-kit-admin/media/{entityType}';
};

export type MediaDescriptorAdminCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MediaDescriptorAdminCreateError = MediaDescriptorAdminCreateErrors[keyof MediaDescriptorAdminCreateErrors];

export type MediaDescriptorAdminCreateResponses = {
    /**
     * OK
     */
    200: MediaDescriptorDto;
};

export type MediaDescriptorAdminCreateResponse = MediaDescriptorAdminCreateResponses[keyof MediaDescriptorAdminCreateResponses];

export type MediaDescriptorAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/media/{id}';
};

export type MediaDescriptorAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MediaDescriptorAdminDeleteError = MediaDescriptorAdminDeleteErrors[keyof MediaDescriptorAdminDeleteErrors];

export type MediaDescriptorAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type MenuItemAdminGetListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/menu-items';
};

export type MenuItemAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminGetListError = MenuItemAdminGetListErrors[keyof MenuItemAdminGetListErrors];

export type MenuItemAdminGetListResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfMenuItemDto;
};

export type MenuItemAdminGetListResponse = MenuItemAdminGetListResponses[keyof MenuItemAdminGetListResponses];

export type MenuItemAdminCreateData = {
    body?: MenuItemCreateInput;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/menu-items';
};

export type MenuItemAdminCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminCreateError = MenuItemAdminCreateErrors[keyof MenuItemAdminCreateErrors];

export type MenuItemAdminCreateResponses = {
    /**
     * OK
     */
    200: MenuItemDto;
};

export type MenuItemAdminCreateResponse = MenuItemAdminCreateResponses[keyof MenuItemAdminCreateResponses];

export type MenuItemAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/menu-items/{id}';
};

export type MenuItemAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminDeleteError = MenuItemAdminDeleteErrors[keyof MenuItemAdminDeleteErrors];

export type MenuItemAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type MenuItemAdminGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/menu-items/{id}';
};

export type MenuItemAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminGetError = MenuItemAdminGetErrors[keyof MenuItemAdminGetErrors];

export type MenuItemAdminGetResponses = {
    /**
     * OK
     */
    200: MenuItemWithDetailsDto;
};

export type MenuItemAdminGetResponse = MenuItemAdminGetResponses[keyof MenuItemAdminGetResponses];

export type MenuItemAdminUpdateData = {
    body?: MenuItemUpdateInput;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/menu-items/{id}';
};

export type MenuItemAdminUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminUpdateError = MenuItemAdminUpdateErrors[keyof MenuItemAdminUpdateErrors];

export type MenuItemAdminUpdateResponses = {
    /**
     * OK
     */
    200: MenuItemDto;
};

export type MenuItemAdminUpdateResponse = MenuItemAdminUpdateResponses[keyof MenuItemAdminUpdateResponses];

export type MenuItemAdminMoveMenuItemData = {
    body?: MenuItemMoveInput;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/menu-items/{id}/move';
};

export type MenuItemAdminMoveMenuItemErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminMoveMenuItemError = MenuItemAdminMoveMenuItemErrors[keyof MenuItemAdminMoveMenuItemErrors];

export type MenuItemAdminMoveMenuItemResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type MenuItemAdminGetPageLookupData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-admin/menu-items/lookup/pages';
};

export type MenuItemAdminGetPageLookupErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminGetPageLookupError = MenuItemAdminGetPageLookupErrors[keyof MenuItemAdminGetPageLookupErrors];

export type MenuItemAdminGetPageLookupResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfPageLookupDto;
};

export type MenuItemAdminGetPageLookupResponse = MenuItemAdminGetPageLookupResponses[keyof MenuItemAdminGetPageLookupResponses];

export type MenuItemAdminGetPermissionLookupData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
    };
    url: '/api/cms-kit-admin/menu-items/lookup/permissions';
};

export type MenuItemAdminGetPermissionLookupErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemAdminGetPermissionLookupError = MenuItemAdminGetPermissionLookupErrors[keyof MenuItemAdminGetPermissionLookupErrors];

export type MenuItemAdminGetPermissionLookupResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfPermissionLookupDto;
};

export type MenuItemAdminGetPermissionLookupResponse = MenuItemAdminGetPermissionLookupResponses[keyof MenuItemAdminGetPermissionLookupResponses];

export type MenuItemPublicGetListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-public/menu-items';
};

export type MenuItemPublicGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type MenuItemPublicGetListError = MenuItemPublicGetListErrors[keyof MenuItemPublicGetListErrors];

export type MenuItemPublicGetListResponses = {
    /**
     * OK
     */
    200: Array<MenuItemDto>;
};

export type MenuItemPublicGetListResponse = MenuItemPublicGetListResponses[keyof MenuItemPublicGetListResponses];

export type PageAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/pages/{id}';
};

export type PageAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PageAdminDeleteError = PageAdminDeleteErrors[keyof PageAdminDeleteErrors];

export type PageAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PageAdminGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/pages/{id}';
};

export type PageAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PageAdminGetError = PageAdminGetErrors[keyof PageAdminGetErrors];

export type PageAdminGetResponses = {
    /**
     * OK
     */
    200: VoloCmsKitAdminPagesPageDto;
};

export type PageAdminGetResponse = PageAdminGetResponses[keyof PageAdminGetResponses];

export type PageAdminUpdateData = {
    body?: UpdatePageInputDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/pages/{id}';
};

export type PageAdminUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PageAdminUpdateError = PageAdminUpdateErrors[keyof PageAdminUpdateErrors];

export type PageAdminUpdateResponses = {
    /**
     * OK
     */
    200: VoloCmsKitAdminPagesPageDto;
};

export type PageAdminUpdateResponse = PageAdminUpdateResponses[keyof PageAdminUpdateResponses];

export type PageAdminGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-admin/pages';
};

export type PageAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PageAdminGetListError = PageAdminGetListErrors[keyof PageAdminGetListErrors];

export type PageAdminGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfVoloCmsKitAdminPagesPageDto;
};

export type PageAdminGetListResponse = PageAdminGetListResponses[keyof PageAdminGetListResponses];

export type PageAdminCreateData = {
    body?: CreatePageInputDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/pages';
};

export type PageAdminCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PageAdminCreateError = PageAdminCreateErrors[keyof PageAdminCreateErrors];

export type PageAdminCreateResponses = {
    /**
     * OK
     */
    200: VoloCmsKitAdminPagesPageDto;
};

export type PageAdminCreateResponse = PageAdminCreateResponses[keyof PageAdminCreateResponses];

export type PageAdminSetAsHomePageData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/pages/setashomepage/{id}';
};

export type PageAdminSetAsHomePageErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PageAdminSetAsHomePageError = PageAdminSetAsHomePageErrors[keyof PageAdminSetAsHomePageErrors];

export type PageAdminSetAsHomePageResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PagesPublicFindBySlugData = {
    body?: never;
    path?: never;
    query?: {
        slug?: string;
    };
    url: '/api/cms-kit-public/pages/by-slug';
};

export type PagesPublicFindBySlugErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PagesPublicFindBySlugError = PagesPublicFindBySlugErrors[keyof PagesPublicFindBySlugErrors];

export type PagesPublicFindBySlugResponses = {
    /**
     * OK
     */
    200: VoloCmsKitContentsPageDto;
};

export type PagesPublicFindBySlugResponse = PagesPublicFindBySlugResponses[keyof PagesPublicFindBySlugResponses];

export type PagesPublicFindDefaultHomePageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-public/pages/home';
};

export type PagesPublicFindDefaultHomePageErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PagesPublicFindDefaultHomePageError = PagesPublicFindDefaultHomePageErrors[keyof PagesPublicFindDefaultHomePageErrors];

export type PagesPublicFindDefaultHomePageResponses = {
    /**
     * OK
     */
    200: VoloCmsKitContentsPageDto;
};

export type PagesPublicFindDefaultHomePageResponse = PagesPublicFindDefaultHomePageResponses[keyof PagesPublicFindDefaultHomePageResponses];

export type PagesPublicDoesSlugExistData = {
    body?: never;
    path?: never;
    query?: {
        slug?: string;
    };
    url: '/api/cms-kit-public/pages/exist';
};

export type PagesPublicDoesSlugExistErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PagesPublicDoesSlugExistError = PagesPublicDoesSlugExistErrors[keyof PagesPublicDoesSlugExistErrors];

export type PagesPublicDoesSlugExistResponses = {
    /**
     * OK
     */
    200: boolean;
};

export type PagesPublicDoesSlugExistResponse = PagesPublicDoesSlugExistResponses[keyof PagesPublicDoesSlugExistResponses];

export type PermissionsGetData = {
    body?: never;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/permission-management/permissions';
};

export type PermissionsGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PermissionsGetError = PermissionsGetErrors[keyof PermissionsGetErrors];

export type PermissionsGetResponses = {
    /**
     * OK
     */
    200: GetPermissionListResultDto;
};

export type PermissionsGetResponse = PermissionsGetResponses[keyof PermissionsGetResponses];

export type PermissionsUpdateData = {
    body?: UpdatePermissionsDto;
    path?: never;
    query?: {
        providerName?: string;
        providerKey?: string;
    };
    url: '/api/permission-management/permissions';
};

export type PermissionsUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type PermissionsUpdateError = PermissionsUpdateErrors[keyof PermissionsUpdateErrors];

export type PermissionsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ProfileGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/account/my-profile';
};

export type ProfileGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ProfileGetError = ProfileGetErrors[keyof ProfileGetErrors];

export type ProfileGetResponses = {
    /**
     * OK
     */
    200: ProfileDto;
};

export type ProfileGetResponse = ProfileGetResponses[keyof ProfileGetResponses];

export type ProfileUpdateData = {
    body?: UpdateProfileDto;
    path?: never;
    query?: never;
    url: '/api/account/my-profile';
};

export type ProfileUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ProfileUpdateError = ProfileUpdateErrors[keyof ProfileUpdateErrors];

export type ProfileUpdateResponses = {
    /**
     * OK
     */
    200: ProfileDto;
};

export type ProfileUpdateResponse = ProfileUpdateResponses[keyof ProfileUpdateResponses];

export type ProfileChangePasswordData = {
    body?: ChangePasswordInput;
    path?: never;
    query?: never;
    url: '/api/account/my-profile/change-password';
};

export type ProfileChangePasswordErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ProfileChangePasswordError = ProfileChangePasswordErrors[keyof ProfileChangePasswordErrors];

export type ProfileChangePasswordResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RatingPublicDeleteData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/ratings/{entityType}/{entityId}';
};

export type RatingPublicDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RatingPublicDeleteError = RatingPublicDeleteErrors[keyof RatingPublicDeleteErrors];

export type RatingPublicDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RatingPublicGetGroupedStarCountsData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/ratings/{entityType}/{entityId}';
};

export type RatingPublicGetGroupedStarCountsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RatingPublicGetGroupedStarCountsError = RatingPublicGetGroupedStarCountsErrors[keyof RatingPublicGetGroupedStarCountsErrors];

export type RatingPublicGetGroupedStarCountsResponses = {
    /**
     * OK
     */
    200: Array<RatingWithStarCountDto>;
};

export type RatingPublicGetGroupedStarCountsResponse = RatingPublicGetGroupedStarCountsResponses[keyof RatingPublicGetGroupedStarCountsResponses];

export type RatingPublicCreateData = {
    body?: CreateUpdateRatingInput;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/ratings/{entityType}/{entityId}';
};

export type RatingPublicCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RatingPublicCreateError = RatingPublicCreateErrors[keyof RatingPublicCreateErrors];

export type RatingPublicCreateResponses = {
    /**
     * OK
     */
    200: RatingDto;
};

export type RatingPublicCreateResponse = RatingPublicCreateResponses[keyof RatingPublicCreateResponses];

export type ReactionPublicGetForSelectionData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/reactions/{entityType}/{entityId}';
};

export type ReactionPublicGetForSelectionErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ReactionPublicGetForSelectionError = ReactionPublicGetForSelectionErrors[keyof ReactionPublicGetForSelectionErrors];

export type ReactionPublicGetForSelectionResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfReactionWithSelectionDto;
};

export type ReactionPublicGetForSelectionResponse = ReactionPublicGetForSelectionResponses[keyof ReactionPublicGetForSelectionResponses];

export type ReactionPublicDeleteData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
        reaction: string;
    };
    query?: never;
    url: '/api/cms-kit-public/reactions/{entityType}/{entityId}/{reaction}';
};

export type ReactionPublicDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ReactionPublicDeleteError = ReactionPublicDeleteErrors[keyof ReactionPublicDeleteErrors];

export type ReactionPublicDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ReactionPublicCreateData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
        reaction: string;
    };
    query?: never;
    url: '/api/cms-kit-public/reactions/{entityType}/{entityId}/{reaction}';
};

export type ReactionPublicCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type ReactionPublicCreateError = ReactionPublicCreateErrors[keyof ReactionPublicCreateErrors];

export type ReactionPublicCreateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleGetAllListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/identity/roles/all';
};

export type RoleGetAllListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleGetAllListError = RoleGetAllListErrors[keyof RoleGetAllListErrors];

export type RoleGetAllListResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfIdentityRoleDto;
};

export type RoleGetAllListResponse = RoleGetAllListResponses[keyof RoleGetAllListResponses];

export type RoleGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {
            [key: string]: unknown;
        };
    };
    url: '/api/identity/roles';
};

export type RoleGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleGetListError = RoleGetListErrors[keyof RoleGetListErrors];

export type RoleGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfIdentityRoleDto;
};

export type RoleGetListResponse = RoleGetListResponses[keyof RoleGetListResponses];

export type RoleCreateData = {
    body?: IdentityRoleCreateDto;
    path?: never;
    query?: never;
    url: '/api/identity/roles';
};

export type RoleCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleCreateError = RoleCreateErrors[keyof RoleCreateErrors];

export type RoleCreateResponses = {
    /**
     * OK
     */
    200: IdentityRoleDto;
};

export type RoleCreateResponse = RoleCreateResponses[keyof RoleCreateResponses];

export type RoleDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleDeleteError = RoleDeleteErrors[keyof RoleDeleteErrors];

export type RoleDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type RoleGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleGetError = RoleGetErrors[keyof RoleGetErrors];

export type RoleGetResponses = {
    /**
     * OK
     */
    200: IdentityRoleDto;
};

export type RoleGetResponse = RoleGetResponses[keyof RoleGetResponses];

export type RoleUpdateData = {
    body?: IdentityRoleUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/roles/{id}';
};

export type RoleUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type RoleUpdateError = RoleUpdateErrors[keyof RoleUpdateErrors];

export type RoleUpdateResponses = {
    /**
     * OK
     */
    200: IdentityRoleDto;
};

export type RoleUpdateResponse = RoleUpdateResponses[keyof RoleUpdateResponses];

export type TagAdminGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/cms-kit-admin/tags';
};

export type TagAdminGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagAdminGetListError = TagAdminGetListErrors[keyof TagAdminGetListErrors];

export type TagAdminGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfTagDto;
};

export type TagAdminGetListResponse = TagAdminGetListResponses[keyof TagAdminGetListResponses];

export type TagAdminCreateData = {
    body?: TagCreateDto;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/tags';
};

export type TagAdminCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagAdminCreateError = TagAdminCreateErrors[keyof TagAdminCreateErrors];

export type TagAdminCreateResponses = {
    /**
     * OK
     */
    200: TagDto;
};

export type TagAdminCreateResponse = TagAdminCreateResponses[keyof TagAdminCreateResponses];

export type TagAdminDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/tags/{id}';
};

export type TagAdminDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagAdminDeleteError = TagAdminDeleteErrors[keyof TagAdminDeleteErrors];

export type TagAdminDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TagAdminGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/tags/{id}';
};

export type TagAdminGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagAdminGetError = TagAdminGetErrors[keyof TagAdminGetErrors];

export type TagAdminGetResponses = {
    /**
     * OK
     */
    200: TagDto;
};

export type TagAdminGetResponse = TagAdminGetResponses[keyof TagAdminGetResponses];

export type TagAdminUpdateData = {
    body?: TagUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/cms-kit-admin/tags/{id}';
};

export type TagAdminUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagAdminUpdateError = TagAdminUpdateErrors[keyof TagAdminUpdateErrors];

export type TagAdminUpdateResponses = {
    /**
     * OK
     */
    200: TagDto;
};

export type TagAdminUpdateResponse = TagAdminUpdateResponses[keyof TagAdminUpdateResponses];

export type TagAdminGetTagDefinitionsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/cms-kit-admin/tags/tag-definitions';
};

export type TagAdminGetTagDefinitionsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagAdminGetTagDefinitionsError = TagAdminGetTagDefinitionsErrors[keyof TagAdminGetTagDefinitionsErrors];

export type TagAdminGetTagDefinitionsResponses = {
    /**
     * OK
     */
    200: Array<TagDefinitionDto>;
};

export type TagAdminGetTagDefinitionsResponse = TagAdminGetTagDefinitionsResponses[keyof TagAdminGetTagDefinitionsResponses];

export type TagPublicGetAllRelatedTagsData = {
    body?: never;
    path: {
        entityType: string;
        entityId: string;
    };
    query?: never;
    url: '/api/cms-kit-public/tags/{entityType}/{entityId}';
};

export type TagPublicGetAllRelatedTagsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagPublicGetAllRelatedTagsError = TagPublicGetAllRelatedTagsErrors[keyof TagPublicGetAllRelatedTagsErrors];

export type TagPublicGetAllRelatedTagsResponses = {
    /**
     * OK
     */
    200: Array<TagDto>;
};

export type TagPublicGetAllRelatedTagsResponse = TagPublicGetAllRelatedTagsResponses[keyof TagPublicGetAllRelatedTagsResponses];

export type TagPublicGetPopularTagsData = {
    body?: never;
    path: {
        entityType: string;
        maxCount: number;
    };
    query?: never;
    url: '/api/cms-kit-public/tags/popular/{entityType}/{maxCount}';
};

export type TagPublicGetPopularTagsErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TagPublicGetPopularTagsError = TagPublicGetPopularTagsErrors[keyof TagPublicGetPopularTagsErrors];

export type TagPublicGetPopularTagsResponses = {
    /**
     * OK
     */
    200: Array<PopularTagDto>;
};

export type TagPublicGetPopularTagsResponse = TagPublicGetPopularTagsResponses[keyof TagPublicGetPopularTagsResponses];

export type TenantGetTenantGuidData = {
    body?: never;
    path?: never;
    query?: {
        host?: string;
    };
    url: '/api/multi-tenancy';
};

export type TenantGetTenantGuidResponses = {
    /**
     * OK
     */
    200: string;
};

export type TenantGetTenantGuidResponse = TenantGetTenantGuidResponses[keyof TenantGetTenantGuidResponses];

export type TenantAddHostData = {
    body?: never;
    path?: never;
    query?: {
        Id?: string;
        Host?: string;
    };
    url: '/api/multi-tenancy';
};

export type TenantAddHostResponses = {
    /**
     * OK
     */
    200: CustomTenantDto;
};

export type TenantAddHostResponse = TenantAddHostResponses[keyof TenantAddHostResponses];

export type TenantGetTenantHostData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/{id}';
};

export type TenantGetTenantHostResponses = {
    /**
     * OK
     */
    200: CustomTenantDto;
};

export type TenantGetTenantHostResponse = TenantGetTenantHostResponses[keyof TenantGetTenantHostResponses];

export type TenantDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantDeleteError = TenantDeleteErrors[keyof TenantDeleteErrors];

export type TenantDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TenantGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantGetError = TenantGetErrors[keyof TenantGetErrors];

export type TenantGetResponses = {
    /**
     * OK
     */
    200: TenantDto;
};

export type TenantGetResponse = TenantGetResponses[keyof TenantGetResponses];

export type TenantUpdateData = {
    body?: TenantUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}';
};

export type TenantUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantUpdateError = TenantUpdateErrors[keyof TenantUpdateErrors];

export type TenantUpdateResponses = {
    /**
     * OK
     */
    200: TenantDto;
};

export type TenantUpdateResponse = TenantUpdateResponses[keyof TenantUpdateResponses];

export type TenantGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
    };
    url: '/api/multi-tenancy/tenants';
};

export type TenantGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantGetListError = TenantGetListErrors[keyof TenantGetListErrors];

export type TenantGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfTenantDto;
};

export type TenantGetListResponse = TenantGetListResponses[keyof TenantGetListResponses];

export type TenantCreateData = {
    body?: TenantCreateDto;
    path?: never;
    query?: never;
    url: '/api/multi-tenancy/tenants';
};

export type TenantCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantCreateError = TenantCreateErrors[keyof TenantCreateErrors];

export type TenantCreateResponses = {
    /**
     * OK
     */
    200: TenantDto;
};

export type TenantCreateResponse = TenantCreateResponses[keyof TenantCreateResponses];

export type TenantDeleteDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantDeleteDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantDeleteDefaultConnectionStringError = TenantDeleteDefaultConnectionStringErrors[keyof TenantDeleteDefaultConnectionStringErrors];

export type TenantDeleteDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TenantGetDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantGetDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantGetDefaultConnectionStringError = TenantGetDefaultConnectionStringErrors[keyof TenantGetDefaultConnectionStringErrors];

export type TenantGetDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: string;
};

export type TenantGetDefaultConnectionStringResponse = TenantGetDefaultConnectionStringResponses[keyof TenantGetDefaultConnectionStringResponses];

export type TenantUpdateDefaultConnectionStringData = {
    body?: never;
    path: {
        id: string;
    };
    query?: {
        defaultConnectionString?: string;
    };
    url: '/api/multi-tenancy/tenants/{id}/default-connection-string';
};

export type TenantUpdateDefaultConnectionStringErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TenantUpdateDefaultConnectionStringError = TenantUpdateDefaultConnectionStringErrors[keyof TenantUpdateDefaultConnectionStringErrors];

export type TenantUpdateDefaultConnectionStringResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TimeZoneSettingsGetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/timezone';
};

export type TimeZoneSettingsGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TimeZoneSettingsGetError = TimeZoneSettingsGetErrors[keyof TimeZoneSettingsGetErrors];

export type TimeZoneSettingsGetResponses = {
    /**
     * OK
     */
    200: string;
};

export type TimeZoneSettingsGetResponse = TimeZoneSettingsGetResponses[keyof TimeZoneSettingsGetResponses];

export type TimeZoneSettingsUpdateData = {
    body?: never;
    path?: never;
    query?: {
        timezone?: string;
    };
    url: '/api/setting-management/timezone';
};

export type TimeZoneSettingsUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TimeZoneSettingsUpdateError = TimeZoneSettingsUpdateErrors[keyof TimeZoneSettingsUpdateErrors];

export type TimeZoneSettingsUpdateResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type TimeZoneSettingsGetTimezonesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/setting-management/timezone/timezones';
};

export type TimeZoneSettingsGetTimezonesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type TimeZoneSettingsGetTimezonesError = TimeZoneSettingsGetTimezonesErrors[keyof TimeZoneSettingsGetTimezonesErrors];

export type TimeZoneSettingsGetTimezonesResponses = {
    /**
     * OK
     */
    200: Array<NameValue>;
};

export type TimeZoneSettingsGetTimezonesResponse = TimeZoneSettingsGetTimezonesResponses[keyof TimeZoneSettingsGetTimezonesResponses];

export type UserDeleteData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserDeleteErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserDeleteError = UserDeleteErrors[keyof UserDeleteErrors];

export type UserDeleteResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserGetData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserGetErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetError = UserGetErrors[keyof UserGetErrors];

export type UserGetResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserGetResponse = UserGetResponses[keyof UserGetResponses];

export type UserUpdateData = {
    body?: IdentityUserUpdateDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}';
};

export type UserUpdateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserUpdateError = UserUpdateErrors[keyof UserUpdateErrors];

export type UserUpdateResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserUpdateResponse = UserUpdateResponses[keyof UserUpdateResponses];

export type UserGetListData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {
            [key: string]: unknown;
        };
    };
    url: '/api/identity/users';
};

export type UserGetListErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetListError = UserGetListErrors[keyof UserGetListErrors];

export type UserGetListResponses = {
    /**
     * OK
     */
    200: PagedResultDtoOfIdentityUserDto;
};

export type UserGetListResponse = UserGetListResponses[keyof UserGetListResponses];

export type UserCreateData = {
    body?: IdentityUserCreateDto;
    path?: never;
    query?: never;
    url: '/api/identity/users';
};

export type UserCreateErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserCreateError = UserCreateErrors[keyof UserCreateErrors];

export type UserCreateResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserCreateResponse = UserCreateResponses[keyof UserCreateResponses];

export type UserGetRolesData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}/roles';
};

export type UserGetRolesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetRolesError = UserGetRolesErrors[keyof UserGetRolesErrors];

export type UserGetRolesResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfIdentityRoleDto;
};

export type UserGetRolesResponse = UserGetRolesResponses[keyof UserGetRolesResponses];

export type UserUpdateRolesData = {
    body?: IdentityUserUpdateRolesDto;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/{id}/roles';
};

export type UserUpdateRolesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserUpdateRolesError = UserUpdateRolesErrors[keyof UserUpdateRolesErrors];

export type UserUpdateRolesResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type UserGetAssignableRolesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/api/identity/users/assignable-roles';
};

export type UserGetAssignableRolesErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserGetAssignableRolesError = UserGetAssignableRolesErrors[keyof UserGetAssignableRolesErrors];

export type UserGetAssignableRolesResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfIdentityRoleDto;
};

export type UserGetAssignableRolesResponse = UserGetAssignableRolesResponses[keyof UserGetAssignableRolesResponses];

export type UserFindByUsernameData = {
    body?: never;
    path: {
        userName: string;
    };
    query?: never;
    url: '/api/identity/users/by-username/{userName}';
};

export type UserFindByUsernameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserFindByUsernameError = UserFindByUsernameErrors[keyof UserFindByUsernameErrors];

export type UserFindByUsernameResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserFindByUsernameResponse = UserFindByUsernameResponses[keyof UserFindByUsernameResponses];

export type UserFindByEmailData = {
    body?: never;
    path: {
        email: string;
    };
    query?: never;
    url: '/api/identity/users/by-email/{email}';
};

export type UserFindByEmailErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserFindByEmailError = UserFindByEmailErrors[keyof UserFindByEmailErrors];

export type UserFindByEmailResponses = {
    /**
     * OK
     */
    200: IdentityUserDto;
};

export type UserFindByEmailResponse = UserFindByEmailResponses[keyof UserFindByEmailResponses];

export type UserLookupFindByIdData = {
    body?: never;
    path: {
        id: string;
    };
    query?: never;
    url: '/api/identity/users/lookup/{id}';
};

export type UserLookupFindByIdErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupFindByIdError = UserLookupFindByIdErrors[keyof UserLookupFindByIdErrors];

export type UserLookupFindByIdResponses = {
    /**
     * OK
     */
    200: UserData;
};

export type UserLookupFindByIdResponse = UserLookupFindByIdResponses[keyof UserLookupFindByIdResponses];

export type UserLookupFindByUserNameData = {
    body?: never;
    path: {
        userName: string;
    };
    query?: never;
    url: '/api/identity/users/lookup/by-username/{userName}';
};

export type UserLookupFindByUserNameErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupFindByUserNameError = UserLookupFindByUserNameErrors[keyof UserLookupFindByUserNameErrors];

export type UserLookupFindByUserNameResponses = {
    /**
     * OK
     */
    200: UserData;
};

export type UserLookupFindByUserNameResponse = UserLookupFindByUserNameResponses[keyof UserLookupFindByUserNameResponses];

export type UserLookupSearchData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
        Sorting?: string;
        SkipCount?: number;
        MaxResultCount?: number;
        ExtraProperties?: {
            [key: string]: unknown;
        };
    };
    url: '/api/identity/users/lookup/search';
};

export type UserLookupSearchErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupSearchError = UserLookupSearchErrors[keyof UserLookupSearchErrors];

export type UserLookupSearchResponses = {
    /**
     * OK
     */
    200: ListResultDtoOfUserData;
};

export type UserLookupSearchResponse = UserLookupSearchResponses[keyof UserLookupSearchResponses];

export type UserLookupGetCountData = {
    body?: never;
    path?: never;
    query?: {
        Filter?: string;
    };
    url: '/api/identity/users/lookup/count';
};

export type UserLookupGetCountErrors = {
    /**
     * Bad Request
     */
    400: RemoteServiceErrorResponse;
    /**
     * Unauthorized
     */
    401: RemoteServiceErrorResponse;
    /**
     * Forbidden
     */
    403: RemoteServiceErrorResponse;
    /**
     * Not Found
     */
    404: RemoteServiceErrorResponse;
    /**
     * Internal Server Error
     */
    500: RemoteServiceErrorResponse;
    /**
     * Not Implemented
     */
    501: RemoteServiceErrorResponse;
};

export type UserLookupGetCountError = UserLookupGetCountErrors[keyof UserLookupGetCountErrors];

export type UserLookupGetCountResponses = {
    /**
     * OK
     */
    200: number;
};

export type UserLookupGetCountResponse = UserLookupGetCountResponses[keyof UserLookupGetCountResponses];

export type ClientOptions = {
    baseUrl: 'https://abp.antosubash.com' | (string & {});
};